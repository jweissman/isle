{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/resources.ts","webpack:///./src/util.ts","webpack:///./src/actors/index.ts","webpack:///./src/actors/thing.ts","webpack:///./src/models.ts","webpack:///./src/world.ts","webpack:///./src/game.ts","webpack:///./src/images/alex.png","webpack:///./src/images/basic-sprites.png","webpack:///./src/images/spritemap.png","webpack:///./src/images/sword.png","webpack:///./src/actors/brand/logo.ts","webpack:///./src/actors/enemy/enemy.ts","webpack:///./src/actors/player/player.ts","webpack:///./src/scenes/main-menu/main-menu.ts","webpack:///./src/scenes/level-one/level-one.ts","webpack:///./src/index.ts"],"names":["webpackJsonpCallback","data","moduleId","chunkId","chunkIds","moreModules","executeModules","i","resolves","length","installedChunks","push","Object","prototype","hasOwnProperty","call","modules","parentJsonpFunction","shift","deferredModules","apply","checkDeferredModules","result","deferredModule","fulfilled","j","depId","splice","__webpack_require__","s","installedModules","1","exports","module","l","m","c","d","name","getter","o","defineProperty","configurable","enumerable","get","r","value","n","__esModule","default","object","property","p","jsonpArray","window","webpackJsonp","oldJsonpFunction","bind","slice","ex","excalibur_tiled_1","sword","spritemap","basicSprites","alex","Resources","Sword","Texture","Spritemap","BasicSprites","Alex","Map","imagePathAccessor","path","tileset","actualPath","replace","console","log","clamp","min","max","val","clamped","Math","keyToDirection","key","direction","Input","Keys","A","Left","D","Right","S","Down","W","Up","oppositeWay","dir","opp","mode","array","map","maxFreq","item","freq","has","set","addScalarToVec","vec","step","y","x","dirFromVec","abs","e","t","player_1","Player","enemy_1","Enemy","logo_1","Logo","Thing","Actor","[object Object]","zOff","sprite","super","Color","Chartreuse","this","computeZ","ctx","engine","draw","collision","collisionType","CollisionType","Fixed","ellipse","center","Vector","width","height","body","useCircleCollision","polygon","vecs","usePolygonCollision","warn","PreventCollision","resources_1","Item","kind","actor","state","SpriteSheet","BasicSpriteMap","chestClosed","getSprite","chestOpen","itemClasses","Chest","open","addDrawing","setDrawing","buildItem","Isle","items","models_1","thing_1","World","mapResource","debugBoxes","island","_processTiledMap","it","description","activate","cell","tileMap","getCellByPoint","__isle_item","_mapRes","terrainMeta","spriteTerrainById","spriteCollisionById","itemKindBySpriteId","tilesets","forEach","ts","terrains","terrain","properties","tile","reduce","acc","curr","assign","terrainName","tiles","id","terrainTile","solid","every","some","objectgroup","objects","currMeta","getTileMap","blockingActors","sprites","spriteId","spriteSheetKey","removeSprite","newSprite","_spriteSheets","z","thing","constructCollisionArea","_cell","theItem","Game","Engine","displayMode","DisplayMode","FullScreen","loader","Loader","addResource","start","util_1","Label","message","strobeClamp","strobe","intensity","ceil","random","opacity","fontFamily","fontSize","color","initialVelocity","setWidth","setHeight","Red","Passive","vel","setTo","config","spriteSheet","wireWorld","world","_world","halt","move","facing","speed","collisionArea","pos","Active","playerSpeed","interacting","down","up","left","right","interactionPos","entityAt","interact","getCenter","clone","yOff","debugBoundingBoxes","debugDraw","fillRect","delta","currentDrawing","update","setZIndex","actors_1","simpleButtonFactory","myButton","document","createElement","textContent","MainMenu","Scene","logo","drawWidth","add","addTimer","Timer","playMe","UIActor","onClick","factory","hide","rootElement","style","display","position","appendChild","buttonElement","addEventListener","canvasHeight","_engine","devicePixelRatio","canvasWidth","canvas","offsetLeft","top","offsetTop","buttonWidth","clientWidth","buttonHeight","clientHeight","goToScene","LevelOne","level_one_1","main_menu_1","game_1","world_1","debugCells","zoom","playerStart","Physics","collisionPasses","game","mainMenu","levelOne","alexSprites","startX","startY","player","output","brand","input","keyboard","on","evt","E","interaction","camera","text","White","strategy","lockToActor","then","addTileMap","lastViewedCell","pointers","primary","debug"],"mappings":"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","file":"main.js","sourcesContent":[" \t// install a JSONP callback for chunk loading\n \tfunction webpackJsonpCallback(data) {\n \t\tvar chunkIds = data[0];\n \t\tvar moreModules = data[1];\n \t\tvar executeModules = data[2];\n \t\t// add \"moreModules\" to the modules object,\n \t\t// then flag all \"chunkIds\" as loaded and fire callback\n \t\tvar moduleId, chunkId, i = 0, resolves = [];\n \t\tfor(;i < chunkIds.length; i++) {\n \t\t\tchunkId = chunkIds[i];\n \t\t\tif(installedChunks[chunkId]) {\n \t\t\t\tresolves.push(installedChunks[chunkId][0]);\n \t\t\t}\n \t\t\tinstalledChunks[chunkId] = 0;\n \t\t}\n \t\tfor(moduleId in moreModules) {\n \t\t\tif(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {\n \t\t\t\tmodules[moduleId] = moreModules[moduleId];\n \t\t\t}\n \t\t}\n \t\tif(parentJsonpFunction) parentJsonpFunction(data);\n \t\twhile(resolves.length) {\n \t\t\tresolves.shift()();\n \t\t}\n\n \t\t// add entry modules from loaded chunk to deferred list\n \t\tdeferredModules.push.apply(deferredModules, executeModules || []);\n\n \t\t// run deferred modules when all chunks ready\n \t\treturn checkDeferredModules();\n \t};\n \tfunction checkDeferredModules() {\n \t\tvar result;\n \t\tfor(var i = 0; i < deferredModules.length; i++) {\n \t\t\tvar deferredModule = deferredModules[i];\n \t\t\tvar fulfilled = true;\n \t\t\tfor(var j = 1; j < deferredModule.length; j++) {\n \t\t\t\tvar depId = deferredModule[j];\n \t\t\t\tif(installedChunks[depId] !== 0) fulfilled = false;\n \t\t\t}\n \t\t\tif(fulfilled) {\n \t\t\t\tdeferredModules.splice(i--, 1);\n \t\t\t\tresult = __webpack_require__(__webpack_require__.s = deferredModule[0]);\n \t\t\t}\n \t\t}\n \t\treturn result;\n \t}\n\n \t// The module cache\n \tvar installedModules = {};\n\n \t// object to store loaded and loading chunks\n \t// undefined = chunk not loaded, null = chunk preloaded/prefetched\n \t// Promise = chunk loading, 0 = chunk loaded\n \tvar installedChunks = {\n \t\t1: 0\n \t};\n\n \tvar deferredModules = [];\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \tvar jsonpArray = window[\"webpackJsonp\"] = window[\"webpackJsonp\"] || [];\n \tvar oldJsonpFunction = jsonpArray.push.bind(jsonpArray);\n \tjsonpArray.push = webpackJsonpCallback;\n \tjsonpArray = jsonpArray.slice();\n \tfor(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);\n \tvar parentJsonpFunction = oldJsonpFunction;\n\n\n \t// add entry module to deferred list\n \tdeferredModules.push([18,0]);\n \t// run deferred modules when ready\n \treturn checkDeferredModules();\n","import * as ex from 'excalibur';\nimport TiledResource from '@excaliburjs/excalibur-tiled';\n\nconst sword = require('./images/sword.png');\nconst spritemap = require('./images/spritemap.png')\nconst basicSprites = require('./images/basic-sprites.png')\nconst alex = require('./images/alex.png')\n\nlet mapName = 'solidity';\n\nlet Resources = {\n    Sword: new ex.Texture(sword),\n    Spritemap: new ex.Texture(spritemap), // SpriteSheet(spritemap)\n    BasicSprites: new ex.Texture(basicSprites),\n    Alex: new ex.Texture(alex),\n    Map: new TiledResource(`map/${mapName}.json`)\n}\n\nResources.Map.imagePathAccessor = (path, tileset) => {\n    let actualPath = path.replace(/^(?:\\.\\.\\/)+/, \"\");\n    console.log(\"LOAD IMG\", { path, actualPath });\n    return actualPath;\n    // return \"/assets/\" + path;\n}\n\nexport { Resources }\n","import * as ex from 'excalibur';\n\n// restrain a value between a min and a max\nconst clamp = (min: number, max: number) => (val: number) => {\n  let clamped = Math.min(val, max);\n  clamped = Math.max(clamped, min);\n  return clamped;\n}\n\ntype Direction = 'left' | 'right' | 'up' | 'down';\n\nconst keyToDirection = (key: number): Direction => {\n  let direction : Direction;\n  if (key === ex.Input.Keys.A || key === ex.Input.Keys.Left) {\n    direction = 'left';\n  }\n  if (key === ex.Input.Keys.D || key === ex.Input.Keys.Right) {\n    direction = 'right';\n  }\n  if (key === ex.Input.Keys.S || key === ex.Input.Keys.Down) {\n    direction = 'down';\n  }\n  if (key === ex.Input.Keys.W || key === ex.Input.Keys.Up) {\n    direction = 'up';\n  }\n  return direction;\n}\n\nconst oppositeWay = (dir: Direction): Direction => {\n  let opp: Direction;\n  switch(dir) {\n    case 'left': opp = 'right'; break;\n    case 'right': opp = 'left'; break;\n    case 'up': opp = 'down'; break;\n    case 'down': opp = 'up'; break;\n  }\n  return opp;\n}\n\n// suggested impl from https://codereview.stackexchange.com/a/169667\nconst mode = (array) => {\n  const map = new Map(); // new Map();\n\n  let maxFreq = 0;\n  let mode;\n\n  for(const item of array) {\n    let freq = map.has(item) ? map.get(item) : 0;\n    freq++;\n\n    if(freq > maxFreq) {\n      maxFreq = freq;\n      mode = item;\n    }\n    \n    map.set(item, freq);\n  }\n\n  return mode;\n};\n\nconst addScalarToVec = (vec: ex.Vector, direction: Direction, step: number) => {\n  switch (direction) {\n    case 'up':\n      vec.y -= step;\n      break;\n    case 'down':\n      vec.y += step;\n      break;\n    case 'left':\n      vec.x -= step;\n      break;\n    case 'right':\n      vec.x += step;\n      break;\n  }\n}\n\nconst dirFromVec = (vec: ex.Vector): Direction => {\n  let {x,y} = vec;\n  if (Math.abs(x) > Math.abs(y)) {\n    return x > 0 ? 'right' : 'left';\n  } else {\n    return y > 0 ? 'down' : 'up';\n  }\n}\n\nexport {\n  clamp,\n  Direction,\n  keyToDirection,\n  addScalarToVec,\n  dirFromVec,\n  oppositeWay,\n  mode\n};\n","import { Player } from './player/player';\nimport { Enemy } from './enemy/enemy';\nimport { Logo } from './brand/logo';\nexport { Player, Enemy, Logo };\n","import * as ex from 'excalibur';\r\n\r\nexport class Thing extends ex.Actor {\r\n    constructor(public x: number, public y: number, public zOff: number = 0, protected sprite: ex.Sprite) {\r\n        super(x, y, 32, 32, ex.Color.Chartreuse);\r\n        // this.addDrawing(sprite);\r\n    }\r\n    draw(ctx, engine) {\r\n        super.draw(ctx, engine);\r\n        //this.collisionArea.debugDraw(ctx, ex.Color.LightGray);\r\n        //ctx.fillRect(this.x, this.computeZ(), 5, 5);\r\n    }\r\n    computeZ = () => (this.y + 8 + this.zOff * 24) / 10000;\r\n    constructCollisionArea(collision) {\r\n        if (!collision) {\r\n            this.collisionType = ex.CollisionType.PreventCollision;\r\n        }\r\n        else {\r\n            this.collisionType = ex.CollisionType.Fixed;\r\n            if (collision.ellipse) {\r\n                let center = new ex.Vector((collision.x + collision.width / 2) - 16, (collision.y + collision.height / 2) - 16);\r\n                this.body.useCircleCollision(collision.height / 2, center);\r\n            }\r\n            else if (collision.polygon) {\r\n                //console.log(\"poly\", { polygon: collision.polygon });\r\n                //debugger;\r\n                let vecs: ex.Vector[] = collision.polygon.map(({ x, y }) => new ex.Vector(x + collision.x, y + collision.y));\r\n                this.body.usePolygonCollision(vecs);\r\n            }\r\n            else {\r\n                console.warn(\"implement collider:\", { collision });\r\n                //debugger;\r\n            }\r\n        }\r\n    }\r\n}","import * as ex from 'excalibur';\r\nimport { TileSprite } from \"excalibur\";\r\nimport { Thing } from \"./actors/thing\";\r\nimport { Resources } from './resources';\r\n\r\ntype Material = 'wood' | 'stone' | 'glass'; // | 'rope'\r\n\r\ninterface ItemKind {\r\n    name: string\r\n    description: string\r\n    //public sprite: ex.Sprite,\r\n\r\n    z?: number\r\n    // alternate?: boolean\r\n}\r\n\r\nclass Item {\r\n    //static sprites: { [key: string]: ex.Sprite }\r\n\r\n    constructor(\r\n        public kind: ItemKind,\r\n        public actor: ex.Actor,\r\n        //public sprite: ex.Sprite,\r\n        public state: Object = {}\r\n    ) {\r\n        //console.log(\"CREATED ITEM\", { kind: this.kind, sprite: this.sprite });\r\n\r\n    }\r\n\r\n    activate() {\r\n      console.warn(\"item is non-interactive\",\r\n          { kind: this.kind });\r\n        return null; //'...';\r\n    }\r\n}\r\n\r\nconst basicSprites = new ex.SpriteSheet(Resources.BasicSprites, 8, 8, 32, 32);\r\nconst BasicSpriteMap = {\r\n    chestClosed: basicSprites.getSprite(2),\r\n    chestOpen: basicSprites.getSprite(3),\r\n}\r\n\r\nclass Chest extends Item {\r\n    state: { open: boolean } = { open: false }\r\n\r\n    constructor(kind,actor,state) {\r\n        super(kind,actor,state);\r\n        this.actor.addDrawing('closed', BasicSpriteMap.chestClosed);\r\n        this.actor.addDrawing('open', BasicSpriteMap.chestOpen);\r\n        // this.actor.setDrawing(BasicSpriteMap.chestClosed); //this.sprites.closed);\r\n        // this.actor.setDrawing(BasicSpriteMap.chestOpen); //this.sprites.closed);\r\n    }\r\n\r\n    activate() {\r\n        console.log(\"Chest activated!\"); //, { sprite: this.sprite });\r\n        if (this.state.open) {\r\n            this.actor.setDrawing('closed');\r\n            //this.sprite.spriteId -= 1;\r\n            this.state = { open: false };\r\n            return 'closed';\r\n        } else {\r\n            this.actor.setDrawing('open');\r\n            //this.sprite.spriteId += 1;\r\n            this.state = { open: true }\r\n            return 'opened';\r\n        }\r\n        // return 'sesame';\r\n    }\r\n}\r\n\r\nconst itemClasses = {\r\n    Chest\r\n};\r\n\r\nconst buildItem = (kind: ItemKind, actor: ex.Actor, sprite: ex.Sprite): Item => {\r\n    if (itemClasses[kind.name]) {\r\n        //itemClasses[kind.name].sprites[state] = sprite; //can i assign to 'static' members like that??\r\n        return new itemClasses[kind.name](kind, actor);\r\n    } else {\r\n        return new Item(kind, actor);\r\n    }\r\n}\r\n\r\nclass Isle {\r\n    constructor(public name: string, public items: Array<Item> = []) {\r\n    }\r\n}\r\n\r\nexport { Isle, Item, ItemKind, buildItem };","import * as ex from 'excalibur';\r\nimport { TiledResource } from '@excaliburjs/excalibur-tiled';\r\nimport { Isle, Item, ItemKind, buildItem } from './models';\r\nimport { Thing } from './actors/thing';\r\n\r\n// hmmmm (maybe more like a world-factory?)\r\nclass World {\r\n    island: Isle\r\n    tileMap: ex.TileMap\r\n    blockingActors: Array<ex.Actor>\r\n    // itemKindBySpriteId: { [spriteId: number]: ItemKind }\r\n\r\n    constructor(public mapResource: TiledResource, public debugBoxes: boolean) {\r\n        this.island = new Isle('sorna');\r\n\r\n        this._processTiledMap();\r\n    }\r\n\r\n    interact(it: Item): string {\r\n        console.log(\"WOULD INTERACT WITH ITEM\", { it });\r\n        // it.activate();\r\n\r\n        let { name, description } = it.kind;\r\n        return it.activate() || description;\r\n    }\r\n\r\n    entityAt(x: number, y: number): Item {\r\n        let cell = this.tileMap.getCellByPoint(x, y); //interactionPos.x, interactionPos.y);\r\n        console.log(\"looking for entity at \", { x, y, cell });\r\n        if (cell && cell['__isle_item']) { //}.sprites.length > 1) {\r\n            let it: Item = cell['__isle_item'];\r\n            return it; //cell['__isle_item']; // sprites[1] };\r\n            //  // we need to build some kind of object model we can deref\r\n            //  // all we'll have is a spriteId...\r\n        }\r\n        return null; // { nothing: 'to see here' };\r\n    }\r\n\r\n    _processTiledMap() {\r\n        let _mapRes: TiledResource = this.mapResource; // Resources.Map;\r\n        let terrainMeta = {};\r\n        let spriteTerrainById = {};\r\n        let spriteCollisionById = {};\r\n        let itemKindBySpriteId: { [spriteId: number]: ItemKind } = {};\r\n\r\n        _mapRes.data.tilesets.forEach((ts) => {\r\n            //console.log(\"TILESET\", { ts });\r\n            if (ts.terrains) {\r\n                ts.terrains.forEach(terrain => {\r\n                    if (terrain.properties) {\r\n                        terrainMeta[terrain.tile] = terrain.properties.reduce((acc, curr) => {\r\n                            let { name, value } = curr;\r\n                            return (<any>Object).assign(acc, { [name]: value })\r\n                        }, {});\r\n\r\n                        terrainMeta[terrain.tile].terrainName = terrain.name;\r\n\r\n                        console.log(\r\n                            `terrain ${terrain.name} (${terrain.tile}) has props: `,\r\n                            terrainMeta[terrain.tile]\r\n                        )\r\n                    }\r\n                });\r\n\r\n                spriteTerrainById = ts.tiles.reduce((acc, curr) => {\r\n                    let { terrain, id } = curr;\r\n                    const solid = terrain.every(tile => terrainMeta[tile] && terrainMeta[tile].solid); // : false);\r\n                    let terrainTile = { solid };\r\n                    // console.log(`terrain set for ${id}`, { solid }, terrain.map(tile => terrainMeta[tile]))\r\n                    return (<any>Object).assign(acc, { [id]: terrainTile });\r\n                }, {});\r\n\r\n                // console.log({ terrainMeta, spriteTerrainById });\r\n            }\r\n\r\n            // console.log({tiles: ts.tiles})\r\n            if (ts.tiles && ts.tiles.some(tile => tile.objectgroup)) {\r\n                // should also grab item/obj metadata here?\r\n                // console.log(\"todo -- extract obj group collision frame?\");\r\n                //debugger;\r\n                spriteCollisionById = ts.tiles.reduce((acc, curr) => {\r\n                    let { objectgroup, id } = curr;\r\n                    if (objectgroup && objectgroup.objects && objectgroup.objects.length) {\r\n                        return (<any>Object).assign(acc, { [id]: objectgroup.objects[0] });\r\n                    } else {\r\n                        return acc;\r\n                    }\r\n                }, {});\r\n\r\n                console.log({ spriteCollisionById });\r\n                console.log({ ts });\r\n\r\n                itemKindBySpriteId = ts.tiles.reduce((acc, curr) => {\r\n                    // debugger;\r\n                    //console.log({ curr });\r\n                    if (curr.properties) {\r\n                        let currMeta = curr.properties.reduce((acc, curr) => {\r\n                            let { name, value } = curr;\r\n                            return (<any>Object).assign(acc, { [name]: value })\r\n                        }, {});\r\n                        return (<any>Object).assign(acc, { [curr.id]: currMeta });\r\n                    } else {\r\n                        console.warn(\"no props for sprite with id\", { curr });\r\n                        // no props for this one?\r\n                        return acc;\r\n                    }\r\n                }, {})\r\n                //console.log({ itemKindBySpriteId })\r\n            }\r\n        });\r\n\r\n        this.tileMap = _mapRes.getTileMap();\r\n\r\n        this.blockingActors = [];\r\n\r\n        this.tileMap.data.forEach((cell: ex.Cell) => {\r\n\r\n            if (cell.sprites[0]) {\r\n                let tile = spriteTerrainById[cell.sprites[0].spriteId];\r\n                cell = Object.assign(cell, tile);\r\n                // we have another sprite, maybe a thing to build a box for?\r\n                if (cell.sprites[1]) {\r\n                    // we could use the sprite, but... also we could do something else\r\n                    // build our own sprite with z-indexes\r\n\r\n                    let { spriteSheetKey, spriteId } = cell.sprites[1];\r\n                    const kind: ItemKind = itemKindBySpriteId[spriteId];\r\n\r\n                    // we could get the image and attach it to an actor\r\n                    const collision = spriteCollisionById[spriteId]; //cell.sprites[1].spriteId];\r\n                    cell.removeSprite(cell.sprites[1]);\r\n\r\n                    let newSprite: ex.Sprite = (<any>this.tileMap)._spriteSheets[spriteSheetKey].getSprite(spriteId)\r\n                    //if (kind.double)\r\n                    // for two-state chests etc, grab the next sprite?\r\n                    let nextSprite: ex.Sprite = (<any>this.tileMap)._spriteSheets[spriteSheetKey].getSprite(spriteId)\r\n                    let z: number = (kind && kind.z) || 0;\r\n                    let thing: Thing = //collision\r\n                        new Thing(cell.x+16, cell.y+16, z, newSprite);\r\n\r\n                    thing.constructCollisionArea(collision);\r\n                    thing.addDrawing(newSprite);\r\n                    thing['_cell'] = cell;\r\n\r\n                    // de-ref from sprite id\r\n                    if (kind) { // model it!\r\n                        let theItem: Item = buildItem(kind, thing, newSprite); //, tilesprite);\r\n                        this.island.items.push(theItem);\r\n\r\n                        cell['__isle_item'] = theItem;\r\n                        //console.log(\"created item\", { theItem });\r\n                    }\r\n\r\n                    this.blockingActors.push(thing);\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n}\r\n\r\nexport { World };","import * as ex from 'excalibur';\nimport { Resources } from './resources';\n\nexport class Game extends ex.Engine {\n  constructor(width: number, height: number) {\n    super({ width, height, displayMode: ex.DisplayMode.FullScreen });\n  }\n\n  public start() { // loader: ex.Loader) {\n\n    let loader = new ex.Loader();\n    for (let key in Resources) {\n      loader.addResource(Resources[key]);\n    }\n    return super.start(loader);\n  }\n}\n","module.exports = __webpack_public_path__ + \"11463f0311c27e615a3126fa867d1885.png\";","module.exports = __webpack_public_path__ + \"ee2f53a568911b82ec0cba982d774937.png\";","module.exports = __webpack_public_path__ + \"b9b405c74e06d77b7a88f04d6d3ae5cd.png\";","module.exports = __webpack_public_path__ + \"94754f62e0ae4d23d386e246f5e0cb6e.png\";","import * as ex from 'excalibur';\nimport { clamp } from '../../util';\n\nexport class Logo extends ex.Label {\n  intensity: number;\n  constructor(x: number, y: number, message: string) {\n    super(message);\n    //this.setWidth(200);\n    this.x = x; // (game.drawWidth / 2) - 200;\n    this.y = y; // 400;\n\n    this.fontFamily = 'Arial';\n    this.fontSize = 256;\n\n    this.color = new ex.Color(255,255,255);\n    this.intensity = 150;\n    this.strobe();\n  }\n\n  strobeClamp = clamp(50, 200);\n\n  strobe = () => {\n    this.intensity = this.intensity + Math.ceil(Math.random()*16) - 8;\n    this.intensity = this.strobeClamp(this.intensity);\n    // console.log(\"strobe\", { intensity: this.intensity });\n\n    this.opacity = this.intensity / 255;\n  }\n}\n","import * as ex from 'excalibur';\n\nexport class Enemy extends ex.Actor {\n  constructor({initialVelocity}:{initialVelocity: [number,number]}) {\n    super();\n    this.setWidth(15);\n    this.setHeight(15);\n    this.x = 200;\n    this.y = 200;\n    this.color = ex.Color.Red; // new ex.Color(255, 0, 255);\n\n    // we are collision-aware!\n    this.collisionType = ex.CollisionType.Passive;\n\n    this.vel.setTo(initialVelocity[0], initialVelocity[1]); // 100,140);\n  }\n\n  // draw(ctx: CanvasRenderingContext2D) {\n  //   ctx.fillStyle = this.color.toString()\n  //   ctx.beginPath()\n  //   ctx.arc(this.pos.x, this.pos.y, 10, 0, Math.PI * 2)\n  //   ctx.closePath()\n  //   ctx.fill()\n  // }\n}","import * as ex from 'excalibur';\nimport { Game } from '../../game';\nimport { Direction, oppositeWay, addScalarToVec, dirFromVec } from '../../util';\nimport { Vector } from 'excalibur';\nimport { World } from '../../world';\nimport { GameConfig } from '../../game_config';\n\nexport class Player extends ex.Actor {\n  interacting: boolean\n\n  speed: number\n  facing: Direction\n  _world: World\n  alex: { [key: string]: ex.Sprite }\n\n  constructor(\n    public x: number,\n    public y: number,\n    protected config: GameConfig,\n    protected spriteSheet: ex.SpriteSheet \n  ) {\n    super();\n\n    this.setWidth(22);\n    this.setHeight(18);\n    this.collisionArea.pos.y = 20;\n\n    this.color = new ex.Color(255, 255, 255);\n\n    this.collisionType = ex.CollisionType.Active;\n    this.speed = config.playerSpeed; // cells/sec\n    //this.facing = 'down';\n    this.interacting = false;\n\n    this.alex = {\n      'down': spriteSheet.getSprite(0),\n      'up': spriteSheet.getSprite(1),\n      'left': spriteSheet.getSprite(3),\n      'right': spriteSheet.getSprite(2),\n    }\n\n    // set facing + init sprite\n    this.move('down');\n    this.halt();\n  }\n\n  wireWorld = (world: World) => { this._world = world; }\n\n  interact() {\n    let pos = this.interactionPos();\n    this.interacting = true;\n    let item = this._world.entityAt(pos.x, pos.y) ||\n      this._world.entityAt(pos.x, pos.y+10) ||\n      this._world.entityAt(pos.x, pos.y-10) ||\n      this._world.entityAt(pos.x-10, pos.y) ||\n      this._world.entityAt(pos.x+10, pos.y);\n    if (item) {\n      return this._world.interact(item);\n    }\n  }\n\n  interactionPos(): { x:number, y:number }  {\n    let interactionPos = this.getCenter().clone();\n    let yOff = 20; //this.facing === 'up' ? 10 : 16;\n    if (this.facing === 'up') { yOff -= 2; }\n    if (this.facing === 'down') { yOff -= 4; }\n    interactionPos.y += yOff; //this.getHeight();\n    interactionPos.x -= 2;\n    addScalarToVec(interactionPos, this.facing, 24);\n    return interactionPos;\n  }\n\n  draw(ctx: CanvasRenderingContext2D, engine) {\n    super.draw(ctx, engine);\n    if (this.config.debugBoundingBoxes) {\n      this.collisionArea.debugDraw(ctx, ex.Color.Chartreuse);\n      if (this.interacting) {\n        let pos = this.interactionPos(); //getCenter().clone();\n        ctx.fillRect(pos.x, pos.y - 10, 4, 4);\n        ctx.fillRect(pos.x, pos.y, 4, 4);\n        ctx.fillRect(pos.x, pos.y + 10, 4, 4);\n        ctx.fillRect(pos.x - 10, pos.y, 4, 4);\n        ctx.fillRect(pos.x + 10, pos.y, 4, 4);\n      }\n      ctx.fillRect(this.x, this.computeZ(), 3, 3);\n    }\n  }\n\n  computeZ = () => (this.y + 20) / 10000; //8;\n\n  halt = () => {\n    this.vel = new ex.Vector(0, 0);\n  }\n\n  move = (direction: Direction) => {\n    this.facing = direction;\n    const step = this.speed * 32;\n    this.halt();\n    if (direction === 'left')  { this.vel.x = -step; }\n    if (direction === 'right') { this.vel.x = step; }\n    if (direction === 'up')    { this.vel.y = -step; }\n    if (direction === 'down')  { this.vel.y = step; }\n  }\n\n  update(engine, delta) {\n    this.currentDrawing = this.alex[this.facing];\n    super.update(engine, delta);\n    this.setZIndex(this.computeZ());\n    //console.log({z: this.getZIndex()})\n  }\n\n}\n","import * as ex from 'excalibur';\r\nimport { Logo } from '../../actors';\r\n\r\nconst simpleButtonFactory = (message: string) => {\r\n    let myButton = document.createElement('button');\r\n    myButton.textContent = message; // 'The best button';\r\n    return myButton;\r\n};\r\n\r\nclass Button extends ex.UIActor {\r\n    rootElement: HTMLElement\r\n    buttonElement: HTMLElement\r\n    // onClick: Function\r\n    // _engine: ex.Engine\r\n\r\n    constructor(message, x, y, onClick, factory = simpleButtonFactory) {\r\n        super();\r\n        this.rootElement = document.createElement('div');\r\n        this.rootElement.style.position = 'absolute';\r\n        document.body.appendChild(this.rootElement)\r\n        this.buttonElement = factory(message);\r\n        this.rootElement.appendChild(\r\n            this.buttonElement\r\n        );\r\n        this.buttonElement.addEventListener('click', onClick);\r\n        // this.onClick = onClick;\r\n    }\r\n\r\n    hide = () => this.rootElement.style.display = 'none';\r\n\r\n    draw(ctx: CanvasRenderingContext2D) {\r\n      let canvasHeight = this._engine.canvasHeight / window.devicePixelRatio;\r\n      let canvasWidth = this._engine.canvasWidth / window.devicePixelRatio;\r\n      let left = ctx.canvas.offsetLeft;\r\n      let top = ctx.canvas.offsetTop;\r\n      let buttonWidth = this.buttonElement.clientWidth;\r\n      let buttonHeight = this.buttonElement.clientHeight;\r\n      this.rootElement.style.left = `${left + canvasWidth / 2 - buttonWidth / 2}px`;\r\n      this.rootElement.style.top = `${top + canvasHeight / 2 - buttonHeight / 2 + 100}px`;\r\n    }\r\n}\r\n\r\nexport class MainMenu extends ex.Scene {\r\n    public onInitialize(engine: ex.Engine) {\r\n        const logo = new Logo(\r\n            engine.drawWidth / 2,\r\n            400,\r\n            'Isle'\r\n        );\r\n        this.add(logo);\r\n\r\n        engine.addTimer(\r\n            new ex.Timer(\r\n                logo.strobe,\r\n                20,\r\n                true\r\n            )\r\n        )\r\n                \r\n        const playMe = new Button(\r\n            'start game',\r\n            engine.drawWidth / 2,\r\n            400,\r\n            () => {\r\n                playMe.hide()\r\n                engine.goToScene('wander');\r\n            }\r\n        ); \r\n        // new ex.Label(\r\n        //     'start game',\r\n        //     engine.drawWidth / 2,\r\n        //     400,\r\n        //     'Arial'\r\n        // )\r\n        // engine.input.pointers.primary.on('mousedown', () => {\r\n        //     console.log(\"CLICK\")\r\n        //   engine.goToScene('wander')\r\n        // });\r\n\r\n        this.add(playMe);\r\n    }\r\n}","import * as ex from 'excalibur';\n\nexport class LevelOne extends ex.Scene {\n  public onInitialize(engine: ex.Engine) {\n  }\n\n  public onActivate() {}\n  public onDeactivate() {}\n\n  public update(engine: ex.Engine, delta) {\n\n    super.update(engine, delta);\n  }\n}\n","import * as ex from 'excalibur';\nimport { LevelOne } from './scenes/level-one/level-one';\nimport { MainMenu } from './scenes/main-menu/main-menu';\nimport { Player } from './actors';\nimport { Resources } from './resources';\nimport { Game } from './game';\n\n// import { Isle } from './models';\n\nimport { keyToDirection, Direction, mode } from './util';\n// import { TileMap } from 'excalibur';\nimport { World } from './world';\nimport { Thing } from \"./actors/thing\";\nimport { GameConfig } from './game_config';\n\nconst config: GameConfig = {\n  debugCells: false,\n  debugBoundingBoxes: false,\n  zoom: 2,\n  playerStart: { x: 30, y: 30 },\n  playerSpeed: 2.8,\n}\n\nex.Physics.collisionPasses = 16;\n\n// Islands are either from before or for after humankind. (gd)\n\n/* \nDreaming of islands — whether with joy or in fear, it \ndoesn't matter — is dreaming of pulling away, of being already separate, far \nfrom any continent, of being lost and alone — or it is dreaming of starting from \nscratch, recreating, beginning anew. (gd)\n*/\n\n// An island doesn't stop being deserted simply because it is inhabited. (gd)\n\n// const island = new Isle();\n\nconst game = new Game(800, 600);\n\nconst mainMenu = new MainMenu();\ngame.add('main-menu', mainMenu);\n\nconst levelOne = new LevelOne();\n\nconst spritemap = new ex.SpriteSheet(Resources.Spritemap, 8, 8, 32, 32);\nconst basicSprites = new ex.SpriteSheet(Resources.BasicSprites, 8, 8, 32, 32);\nconst alexSprites = new ex.SpriteSheet(Resources.Alex, 4, 1, 32, 64);\n\nconst tinyAlexSprite = basicSprites.getSprite(4); //spritemap.getSprite(7));\n//const alexSprite = alexSprites.getSprite(0); //Resources.Alex.asSprite(); //new ex.Sprite(Resources.Alex.);\n\nconst startX = config.playerStart.x, startY = config.playerStart.y;\nconst player = new Player(startX * 32, startY * 32, config, alexSprites);\n\n//player.addDrawing(alexSprite);\n\nconst output = new ex.Label('(welcome to isle)', 500, 500, 'Arial');\n//output.\nconst brand = new ex.Label('(welcome to isle)', 500, 500, 'Arial');\nlevelOne.add(output);\nlevelOne.add(brand);\n\ngame.input.keyboard.on('press', (evt: ex.Input.KeyEvent) => {\n  let { key } = evt;\n  if (key == ex.Input.Keys.E) {\n    let interaction = player.interact();\n    if (interaction) {\n      output.x = levelOne.camera.x;\n      output.y = levelOne.camera.y;\n      output.text = interaction;\n      output.color = ex.Color.White;\n      output.fontSize = 24;\n    }\n  } else {\n    // assume we're trying to move\n    let direction = keyToDirection(key);\n    if (direction) { player.move(direction); }\n  }\n})\n\ngame.input.keyboard.on('hold', (evt: ex.Input.KeyEvent) => {\n  let { key } = evt;\n  let direction : Direction = keyToDirection(key);\n  if (direction) {\n    player.move(direction);\n  }\n})\n\ngame.input.keyboard.on('release', (evt: ex.Input.KeyEvent) => {\n  // console.log(\"RELEASE\", { evt });\n  let { key } = evt;\n  let direction : Direction = keyToDirection(key);\n  if (direction) {\n    player.halt(); //direction);\n    player.interacting = false;\n  }\n});\n\nlevelOne.add(player);\n\nlevelOne.camera.strategy.lockToActor(player);\nlevelOne.camera.zoom(config.zoom);\n\n// game.input.pointers.primary.on('move', (e: ex.Input.PointerEvent) => {\n//   console.log(\"POINTER MOVE\", e.pos);\n// });\n\n\ngame.add('wander', levelOne);\n\n\ngame.start().then(() => {\n  game.goToScene('wander');\n  let world = new World(Resources.Map, config.debugBoundingBoxes);\n\n  let tileMap = world.tileMap;\n  levelOne.addTileMap(tileMap);\n  player.wireWorld(world); //wireMap(tileMap);\n\n  world.blockingActors.forEach((actor: Thing) => {\n    //let y = actor['_cell'].y; // - 7;\n    //console.log(\"would set z to\", {y, currentZeD: actor.getZIndex()});\n    levelOne.add(actor);\n    actor.setZIndex(actor.computeZ());\n  });\n  output.setZIndex(1000);\n\n  if (config.debugCells) {\n    let lastViewedCell = null;\n    game.input.pointers.primary.on('move', (e: ex.Input.PointerEvent) => {\n      let { pos } = e;\n      let cell = tileMap.getCellByPoint(pos.x, pos.y);\n      if (cell && lastViewedCell != cell) {\n        console.debug(\"CELL\", { pos, spriteId: cell.sprites[0].spriteId }, cell);\n        lastViewedCell = cell;\n      }\n    });\n  }\n\n});\n\n\n"],"sourceRoot":""}