{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/util.ts","webpack:///./src/resources.ts","webpack:///./src/world.ts","webpack:///./src/basic_sprites.ts","webpack:///./src/actors/hud.ts","webpack:///./src/actors/brand/logo.ts","webpack:///./src/actors/player/player.ts","webpack:///./src/actors/index.ts","webpack:///./src/actors/thing.ts","webpack:///./src/models.ts","webpack:///./src/game.ts","webpack:///./src/sounds/finemist.mp3","webpack:///./src/images/campfire.png","webpack:///./src/images/palm.png","webpack:///./src/images/greatpalm.png","webpack:///./src/images/miranda.png","webpack:///./src/images/alex-sprites.png","webpack:///./src/images/basic-sprites.png","webpack:///./src/images/spritemap.png","webpack:///./src/scenes/level-one/level-one.ts","webpack:///./src/index.ts"],"names":["webpackJsonpCallback","data","moduleId","chunkId","chunkIds","moreModules","executeModules","i","resolves","length","installedChunks","push","Object","prototype","hasOwnProperty","call","modules","parentJsonpFunction","shift","deferredModules","apply","checkDeferredModules","result","deferredModule","fulfilled","j","depId","splice","__webpack_require__","s","installedModules","1","exports","module","l","m","c","d","name","getter","o","defineProperty","configurable","enumerable","get","r","value","n","__esModule","default","object","property","p","jsonpArray","window","webpackJsonp","oldJsonpFunction","bind","slice","ex","coinflip","Math","random","clamp","min","max","val","clamped","keyToDirection","key","direction","Input","Keys","A","Left","D","Right","S","Down","W","Up","oppositeWay","dir","opp","mode","array","map","Map","maxFreq","item","freq","has","set","addScalarToVec","vec","step","y","x","dirFromVec","abs","e","t","excalibur_tiled_1","spritemap","basicSprites","alex","miranda","greatPalm","palm","campfire","fineMist","Resources","Alex","Texture","Miranda","Spritemap","BasicSprites","GreatPalm","Palm","Campfire","FineMist","Sound","imagePathAccessor","path","tileset","actualPath","replace","console","log","models_1","thing_1","resources_1","actors_1","Material","Wood","Stone","World","[object Object]","scene","hud","config","engine","this","island","Isle","itemKinds","playerCharacterMeta","sprites","SpriteSheet","primary","debugBoxes","debugBoundingBoxes","stocks","wood","stone","itemName","crafting","craftingItem","craftingAt","it","_primaryCharacter","equipped","material","count","destroy","updateInventory","cell","Item","description","kind","activate","Player","currentPc","message","__isle_pc","move","halt","makePrimaryCharacter","tileMap","getCellByPoint","__isle_item","entity","size","Array","keys","getCellByIndex","index","cols","actor","kill","thing","Thing","drawing","addDrawing","constructCollisionArea","collision","theItem","buildItem","items","add","setZIndex","computeZ","pcMeta","pc","wireWorld","camera","strategy","lockToActor","zoom","mapResource","_mapRes","terrainMeta","spriteTerrainById","spriteCollisionById","characterById","itemKindBySpriteId","tilesets","forEach","ts","terrains","terrain","properties","tile","reduce","acc","curr","assign","terrainName","tiles","id","terrainTile","solid","every","some","objectgroup","objects","prop","currMeta","warn","find","getTileMap","spriteId","spriteSheetKey","removeSprite","characterName","createPlayableCharacter","sheet","_spriteSheets","cx","cy","cellToRemove","newSprite","getSprite","spawn","asSprite","BigCampfire","BasicSpriteMap","chestClosed","chestOpen","world_1","basic_sprites_1","inventorySprites","StockLine","yOff","label","Label","fontSize","color","Color","White","ctx","sprite","clone","scale","Vector","draw","text","Hud","UIActor","game","super","canvasWidth","canvasHeight","initialize","output","setWidth","textAlign","TextAlign","Center","brand","Azure","inventory","lineItems","delta","setStock","opacity","actions","clearActions","fade","util_1","Logo","strobeClamp","strobe","intensity","ceil","fontFamily","Actor","spriteSheet","world","_world","vel","facing","speed","collisionArea","body","useCircleCollision","collisionType","CollisionType","Active","playerSpeed","interacting","down","up","right","left","walkFrames","walkSprites","getAnimationByIndices","pos","interactionPos","entityAndCell","entityAt","interact","getCenter","littleDrawing","debugDraw","Chartreuse","fillRect","currentDrawing","update","player_1","logo_1","zOff","LightGray","Fixed","ellipse","center","width","height","polygon","vecs","usePolygonCollision","useBoxCollision","setHeight","PreventCollision","itemClasses","Chest","state","open","setDrawing","hp","damage","baseCells","offset","base","logKind","WoodLog","collect","WoodLogStack","Handaxe","equip","Game","Engine","displayMode","DisplayMode","FullScreen","setup","loader","Loader","addResource","start","then","kick","LevelOne","Scene","craftPreview","level_one_1","game_1","hud_1","debugCells","bgMusic","levelOne","input","keyboard","on","evt","currentScene","player","primaryCharacter","E","interaction","describe","C","enterCraftMode","processTiledMap","addTileMap","goToScene","theme","setTimeout","isLoaded","play","pointers","screenPos","worldToScreenCoordinates","debit"],"mappings":"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","file":"main.js","sourcesContent":[" \t// install a JSONP callback for chunk loading\n \tfunction webpackJsonpCallback(data) {\n \t\tvar chunkIds = data[0];\n \t\tvar moreModules = data[1];\n \t\tvar executeModules = data[2];\n \t\t// add \"moreModules\" to the modules object,\n \t\t// then flag all \"chunkIds\" as loaded and fire callback\n \t\tvar moduleId, chunkId, i = 0, resolves = [];\n \t\tfor(;i < chunkIds.length; i++) {\n \t\t\tchunkId = chunkIds[i];\n \t\t\tif(installedChunks[chunkId]) {\n \t\t\t\tresolves.push(installedChunks[chunkId][0]);\n \t\t\t}\n \t\t\tinstalledChunks[chunkId] = 0;\n \t\t}\n \t\tfor(moduleId in moreModules) {\n \t\t\tif(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {\n \t\t\t\tmodules[moduleId] = moreModules[moduleId];\n \t\t\t}\n \t\t}\n \t\tif(parentJsonpFunction) parentJsonpFunction(data);\n \t\twhile(resolves.length) {\n \t\t\tresolves.shift()();\n \t\t}\n\n \t\t// add entry modules from loaded chunk to deferred list\n \t\tdeferredModules.push.apply(deferredModules, executeModules || []);\n\n \t\t// run deferred modules when all chunks ready\n \t\treturn checkDeferredModules();\n \t};\n \tfunction checkDeferredModules() {\n \t\tvar result;\n \t\tfor(var i = 0; i < deferredModules.length; i++) {\n \t\t\tvar deferredModule = deferredModules[i];\n \t\t\tvar fulfilled = true;\n \t\t\tfor(var j = 1; j < deferredModule.length; j++) {\n \t\t\t\tvar depId = deferredModule[j];\n \t\t\t\tif(installedChunks[depId] !== 0) fulfilled = false;\n \t\t\t}\n \t\t\tif(fulfilled) {\n \t\t\t\tdeferredModules.splice(i--, 1);\n \t\t\t\tresult = __webpack_require__(__webpack_require__.s = deferredModule[0]);\n \t\t\t}\n \t\t}\n \t\treturn result;\n \t}\n\n \t// The module cache\n \tvar installedModules = {};\n\n \t// object to store loaded and loading chunks\n \t// undefined = chunk not loaded, null = chunk preloaded/prefetched\n \t// Promise = chunk loading, 0 = chunk loaded\n \tvar installedChunks = {\n \t\t1: 0\n \t};\n\n \tvar deferredModules = [];\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \tvar jsonpArray = window[\"webpackJsonp\"] = window[\"webpackJsonp\"] || [];\n \tvar oldJsonpFunction = jsonpArray.push.bind(jsonpArray);\n \tjsonpArray.push = webpackJsonpCallback;\n \tjsonpArray = jsonpArray.slice();\n \tfor(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);\n \tvar parentJsonpFunction = oldJsonpFunction;\n\n\n \t// add entry module to deferred list\n \tdeferredModules.push([22,0]);\n \t// run deferred modules when ready\n \treturn checkDeferredModules();\n","import * as ex from 'excalibur';\n\n// tiny probability handler...\nconst coinflip = () => Math.random() > 0.5\n\n// restrain a value between a min and a max\nconst clamp = (min: number, max: number) => (val: number) => {\n  let clamped = Math.min(val, max);\n  clamped = Math.max(clamped, min);\n  return clamped;\n}\n\ntype Direction = 'left' | 'right' | 'up' | 'down';\n\nconst keyToDirection = (key: number): Direction => {\n  let direction : Direction;\n  if (key === ex.Input.Keys.A || key === ex.Input.Keys.Left) {\n    direction = 'left';\n  }\n  if (key === ex.Input.Keys.D || key === ex.Input.Keys.Right) {\n    direction = 'right';\n  }\n  if (key === ex.Input.Keys.S || key === ex.Input.Keys.Down) {\n    direction = 'down';\n  }\n  if (key === ex.Input.Keys.W || key === ex.Input.Keys.Up) {\n    direction = 'up';\n  }\n  return direction;\n}\n\nconst oppositeWay = (dir: Direction): Direction => {\n  let opp: Direction;\n  switch(dir) {\n    case 'left': opp = 'right'; break;\n    case 'right': opp = 'left'; break;\n    case 'up': opp = 'down'; break;\n    case 'down': opp = 'up'; break;\n  }\n  return opp;\n}\n\n// suggested impl from https://codereview.stackexchange.com/a/169667\nconst mode = (array) => {\n  const map = new Map(); // new Map();\n\n  let maxFreq = 0;\n  let mode;\n\n  for(const item of array) {\n    let freq = map.has(item) ? map.get(item) : 0;\n    freq++;\n\n    if(freq > maxFreq) {\n      maxFreq = freq;\n      mode = item;\n    }\n    \n    map.set(item, freq);\n  }\n\n  return mode;\n};\n\nconst addScalarToVec = (vec: ex.Vector, direction: Direction, step: number) => {\n  switch (direction) {\n    case 'up':\n      vec.y -= step;\n      break;\n    case 'down':\n      vec.y += step;\n      break;\n    case 'left':\n      vec.x -= step;\n      break;\n    case 'right':\n      vec.x += step;\n      break;\n  }\n}\n\nconst dirFromVec = (vec: ex.Vector): Direction => {\n  let {x,y} = vec;\n  if (Math.abs(x) > Math.abs(y)) {\n    return x > 0 ? 'right' : 'left';\n  } else {\n    return y > 0 ? 'down' : 'up';\n  }\n}\n\nexport {\n  clamp,\n  Direction,\n  keyToDirection,\n  addScalarToVec,\n  dirFromVec,\n  oppositeWay,\n  mode,\n  coinflip\n};\n","import * as ex from 'excalibur';\r\nimport TiledResource from '@excaliburjs/excalibur-tiled';\r\n\r\n// const sword = require('./images/sword.png');\r\nconst spritemap = require('./images/spritemap.png')\r\nconst basicSprites = require('./images/basic-sprites.png')\r\n\r\nconst alex = require('./images/alex-sprites.png')\r\nconst miranda = require('./images/miranda.png')\r\n\r\nconst greatPalm = require('./images/greatpalm.png')\r\nconst palm = require('./images/palm.png')\r\nconst campfire = require('./images/campfire.png')\r\n\r\nconst fineMist = require('./sounds/finemist.mp3')\r\n// const science = require('./sounds/science.mp3')\r\n\r\nlet mapName = 'solidity';\r\n\r\nlet Resources = {\r\n    // images\r\n    Alex: new ex.Texture(alex),\r\n    Miranda: new ex.Texture(miranda),\r\n\r\n    //Sword: new ex.Texture(sword),\r\n    Spritemap: new ex.Texture(spritemap), // SpriteSheet(spritemap)\r\n    BasicSprites: new ex.Texture(basicSprites),\r\n    Map: new TiledResource(`map/${mapName}.json`),\r\n    GreatPalm: new ex.Texture(greatPalm),\r\n    Palm: new ex.Texture(palm),\r\n    Campfire: new ex.Texture(campfire),\r\n\r\n    // music\r\n    FineMist: new ex.Sound(fineMist),\r\n    // Science: new ex.Sound(science)\r\n}\r\n\r\nResources.Map.imagePathAccessor = (path, tileset) => {\r\n    let actualPath = path.replace(/^(?:\\.\\.\\/)+/, \"\");\r\n    console.log(\"LOAD IMG\", { path, actualPath });\r\n    return actualPath;\r\n    // return \"/assets/\" + path;\r\n}\r\n\r\nexport { Resources }\r\n","import * as ex from 'excalibur';\r\nimport { TiledResource } from '@excaliburjs/excalibur-tiled';\r\nimport { Isle, Item, ItemKind, buildItem } from './models';\r\nimport { Thing } from './actors/thing';\r\nimport { Resources } from './resources';\r\nimport { Player } from './actors';\r\nimport { GameConfig } from './game_config';\r\nimport { Hud } from './actors/hud';\r\n// import { GameConfig } from './game_config';\r\n// import { SpriteSheet, Sprite } from 'excalibur';\r\n\r\ntype Entity = Item | Player\r\n\r\nexport enum Material {\r\n    Wood = 'wood',\r\n    Stone = 'stone',\r\n    // Strand, Ivy, Thread, Rope = 'rope'\r\n}\r\n\r\ntype Stocks = { [key in Material]: number }\r\n\r\n// hmmmm (maybe more like a world-factory? [now def more world-ly...])\r\nclass World {\r\n    island: Isle\r\n    tileMap: ex.TileMap\r\n    itemKinds: { [key: string]: ItemKind }\r\n    playerCharacterMeta: { [name: string]: {\r\n        sprites: ex.SpriteSheet,\r\n        primary: boolean\r\n    }}\r\n    debugBoxes: boolean\r\n\r\n    // craft state...\r\n    crafting: boolean\r\n    craftingItem: string\r\n    craftingAt: { x: number, y: number }\r\n\r\n    stocks: Stocks\r\n\r\n    // blockingActors: Array<ex.Actor>\r\n    // itemKindBySpriteId: { [spriteId: number]: ItemKind }\r\n\r\n    constructor(\r\n        //public mapResource: TiledResource,\r\n        //public debugBoxes: boolean,\r\n        public scene: ex.Scene,\r\n        public hud: Hud,\r\n        public config: GameConfig,\r\n        protected engine: ex.Engine\r\n    ) {\r\n        this.island = new Isle('sorna');\r\n        this.itemKinds = {};\r\n        this.playerCharacterMeta = {\r\n            Alex: {\r\n                sprites: new ex.SpriteSheet(Resources.Alex, 4, 7, 32, 64),\r\n                primary: true\r\n            },\r\n            Miranda: {\r\n                sprites: new ex.SpriteSheet(Resources.Miranda, 4, 1, 32, 64),\r\n                primary: false\r\n            }\r\n        }\r\n        this.debugBoxes = config.debugBoundingBoxes;\r\n        //this._processTiledMap();\r\n\r\n        this.stocks = {\r\n            wood: 0,\r\n            stone: 0,\r\n        }\r\n    }\r\n\r\n    enterCraftMode(itemName: string, x: number, y: number) {\r\n        this.crafting = true;\r\n        this.craftingItem = itemName; // 'Campfire';\r\n        this.craftingAt = { x, y };\r\n    }\r\n\r\n    equip(it: Item) {\r\n        this._primaryCharacter.equipped = it;\r\n    }\r\n\r\n    collect(it: Item, material: Material, count: number = 1) {\r\n      console.log(\"WOULD COLLECT ITEM\", { it, material, count });\r\n      this.destroy(it);\r\n      this.stocks[material] += count;\r\n      this.hud.updateInventory(this.stocks);\r\n      console.log(\"AFTER COLLECT ITEM\", { it, material, count, stocks: this.stocks });\r\n    }\r\n\r\n    debit(material: Material, count: number = 1) {\r\n        this.stocks[material] -= count;\r\n        this.hud.updateInventory(this.stocks);\r\n    }\r\n\r\n    // need to remove it from the cell...?\r\n    //\r\n\r\n    interact(it: Entity, cell: ex.Cell): string {\r\n        if (it instanceof Item) {\r\n            // console.log(\"WOULD INTERACT WITH ITEM\", { it });\r\n            let { name, description } = it.kind;\r\n            return it.activate() || description;\r\n        } else if (it instanceof Player) {\r\n            // console.log(\"WOULD SWAP PLAYER CHARACTER!!!\", {it});\r\n            let currentPc = this._primaryCharacter;\r\n            let message = `nice to see you again, ${currentPc.name}`;\r\n            cell['__isle_pc'] = currentPc;\r\n            currentPc.x = cell.x\r\n            currentPc.y = cell.y-16\r\n            currentPc.move('down');\r\n            currentPc.halt();\r\n            //cell.removeSprite(cell.sprites[1]);\r\n            // todo remove new pc from cell, add old pc TO that cell...\r\n            this.makePrimaryCharacter(it);\r\n            return message;\r\n        }\r\n    }\r\n\r\n    entityAt(x: number, y: number): { entity: Entity, cell: ex.Cell } {\r\n        let cell = this.tileMap.getCellByPoint(x, y);\r\n        // console.log(\"looking for entity at \", { x, y, cell });\r\n        if (cell) {\r\n            if (cell['__isle_item']) {\r\n                let it: Item = cell['__isle_item'];\r\n                return { entity: it, cell };\r\n            } else if (cell['__isle_pc']) {\r\n                let pc: Player = cell['__isle_pc'];\r\n                return { entity: pc, cell };\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    destroy(it: Item) {\r\n        console.log(\"DESTROY\", {it});\r\n        let { kind, cell } = it;\r\n        let { size } = kind;\r\n        for (const x of Array(size).keys()) {\r\n            for (const y of Array(size).keys()) {\r\n                let cellToMark = this.tileMap.getCellByIndex(cell.index + x + (y * this.tileMap.cols));\r\n                // remove item from list...\r\n                cellToMark['__isle_item'] = null;\r\n            }\r\n        }\r\n\r\n        it.actor.kill();\r\n\r\n        return true;\r\n    }\r\n\r\n    spawn(kind: ItemKind, cell: ex.Cell): Thing {\r\n        let { size } = kind;\r\n        size = size || 1;\r\n\r\n        let x = cell.x + 16 * size;\r\n        let y = cell.y + 16 * size;\r\n        let thing: Thing = new Thing(x, y, size, size, this.debugBoxes);\r\n\r\n        if (kind.drawing) {\r\n          thing.addDrawing(kind.drawing);\r\n        }\r\n\r\n        thing.constructCollisionArea(kind.collision);\r\n\r\n        let theItem: Item = buildItem(kind, thing, cell, this);\r\n        this.island.items.push(theItem);\r\n        for (const x of Array(size).keys()) {\r\n            for (const y of Array(size).keys()) {\r\n                let cellToMark = this.tileMap.getCellByIndex(cell.index + x + (y * this.tileMap.cols));\r\n                cellToMark['__isle_item'] = theItem;\r\n            }\r\n        }\r\n\r\n        this.scene.add(thing);\r\n        thing.setZIndex(thing.computeZ());\r\n        // console.log(`SPAWN ${kind.name}`, { kind, thing });\r\n        return thing;\r\n    }\r\n\r\n    _primaryCharacter: Player\r\n    createPlayableCharacter(name: string, cell: ex.Cell) { // x: number, y: number) {\r\n        let pcMeta = this.playerCharacterMeta[name];\r\n        if (pcMeta) {\r\n            let { x, y } = cell;\r\n            console.log(\"CREATE PC\", { pcMeta });\r\n            const pc = new Player(name, x, y, this.config, pcMeta.sprites, this.engine);\r\n            pc.wireWorld(this);\r\n            this.scene.add(pc);\r\n            cell['__isle_pc'] = pc;\r\n            if (pcMeta.primary) {\r\n                this.makePrimaryCharacter(pc);\r\n            } else {\r\n                console.log(\"PC is not primary\", { pcMeta });\r\n            }\r\n        }\r\n    }\r\n\r\n    makePrimaryCharacter(pc: Player) {\r\n        console.log(\"CREATE PRIMARY PC!!!\", { pc });\r\n        this._primaryCharacter = pc;\r\n        pc.move('down');\r\n        pc.halt();\r\n        //pc.facing = 'down';\r\n        // fix cam!\r\n        this.scene.camera.strategy.lockToActor(pc);\r\n        this.scene.camera.zoom(this.config.zoom);\r\n    }\r\n\r\n    primaryCharacter() {\r\n        return this._primaryCharacter;\r\n    }\r\n\r\n    processTiledMap(mapResource: TiledResource) {\r\n        let _mapRes: TiledResource = mapResource; // Resources.Map;\r\n        let terrainMeta = {};\r\n        let spriteTerrainById = {};\r\n        let spriteCollisionById = {};\r\n\r\n        let characterById = {};\r\n\r\n        let itemKindBySpriteId: { [spriteId: number]: ItemKind } = {};\r\n\r\n        _mapRes.data.tilesets.forEach((ts) => {\r\n            //console.log(\"TILESET\", { ts });\r\n            if (ts.terrains) {\r\n                ts.terrains.forEach(terrain => {\r\n                    if (terrain.properties) {\r\n                        terrainMeta[terrain.tile] = terrain.properties.reduce((acc, curr) => {\r\n                            let { name, value } = curr;\r\n                            return (<any>Object).assign(acc, { [name]: value })\r\n                        }, {});\r\n\r\n                        terrainMeta[terrain.tile].terrainName = terrain.name;\r\n\r\n                        console.log(\r\n                            `terrain ${terrain.name} (${terrain.tile}) has props: `,\r\n                            terrainMeta[terrain.tile]\r\n                        )\r\n                    }\r\n                });\r\n\r\n                spriteTerrainById = ts.tiles.reduce((acc, curr) => {\r\n                    let { terrain, id } = curr;\r\n                    const solid = terrain.every(tile => terrainMeta[tile] && terrainMeta[tile].solid); // : false);\r\n                    let terrainTile = { solid };\r\n                    // console.log(`terrain set for ${id}`, { solid }, terrain.map(tile => terrainMeta[tile]))\r\n                    return (<any>Object).assign(acc, { [id]: terrainTile });\r\n                }, {});\r\n\r\n                // console.log({ terrainMeta, spriteTerrainById });\r\n            }\r\n\r\n            // console.log({tiles: ts.tiles})\r\n            if (ts.tiles && ts.tiles.some(tile => tile.objectgroup)) {\r\n                // should also grab item/obj metadata here?\r\n                // console.log(\"todo -- extract obj group collision frame?\");\r\n                //debugger;\r\n                spriteCollisionById = ts.tiles.reduce((acc, curr) => {\r\n                    let { objectgroup, id } = curr;\r\n                    if (objectgroup && objectgroup.objects && objectgroup.objects.length) {\r\n                        return (<any>Object).assign(acc, { [id]: objectgroup.objects[0] });\r\n                    } else {\r\n                        return acc;\r\n                    }\r\n                }, {});\r\n\r\n                console.log({ spriteCollisionById });\r\n                console.log({ ts });\r\n\r\n                itemKindBySpriteId = ts.tiles.reduce((acc, curr) => {\r\n                    // debugger;\r\n                    //console.log({ curr });\r\n                    if (curr.properties && !curr.properties.some(prop => prop.name === 'character')) {\r\n                        let currMeta = curr.properties.reduce((acc, curr) => {\r\n                            let { name, value } = curr;\r\n                            return (<any>Object).assign(acc, { [name]: value })\r\n                        }, {});\r\n                        return (<any>Object).assign(acc, { [curr.id]: currMeta });\r\n                    } else {\r\n                        console.warn(\"no props for sprite with id (or maybe char?)\", { curr });\r\n                        // no props for this one?\r\n                        return acc;\r\n                    }\r\n                }, {})\r\n                //console.log({ itemKindBySpriteId })\r\n\r\n                \r\n            }\r\n\r\n            if (ts.tiles && ts.tiles.some(tile => tile.properties && tile.properties.some(prop => prop.name === 'character'))) {\r\n                // console.log('character somewhere!!');\r\n                characterById = ts.tiles.reduce((acc, curr) => {\r\n                    if (curr.properties && curr.properties.some(prop => prop.name === 'character')) {\r\n                        // console.log('char found!', { curr });\r\n                        let charProp = curr.properties.find(prop => prop.name === 'character');\r\n                        let name = charProp.value;\r\n                        return (<any>Object.assign(acc, {\r\n                            [curr.id]: name // charProp.value // curr.properties.character.name\r\n                        }));\r\n                    } else {\r\n                        return acc;\r\n                    }\r\n                }, {});\r\n                console.log({ characterById });\r\n            } else {\r\n                console.warn('no chars in tileset', { tiles: ts.tiles })\r\n            }\r\n        });\r\n\r\n        this.tileMap = _mapRes.getTileMap();\r\n\r\n        // this.blockingActors = [];\r\n\r\n        this.tileMap.data.forEach((cell: ex.Cell, index) => {\r\n\r\n            if (cell.sprites[0]) {\r\n                let tile = spriteTerrainById[cell.sprites[0].spriteId];\r\n                cell = Object.assign(cell, tile);\r\n                // we have another sprite, maybe a thing to build a box for?\r\n                if (cell.sprites[1]) {\r\n                    // we could use the sprite, but... also we could do something else\r\n                    // build our own sprite with z-indexes\r\n                    // better yet: spawn an entity\r\n\r\n                    let { spriteSheetKey, spriteId } = cell.sprites[1];\r\n                    cell.removeSprite(cell.sprites[1]); //hhclearSprites();\r\n                    const kind: ItemKind = itemKindBySpriteId[spriteId];\r\n                    if (!kind) {\r\n                        const characterName: string = characterById[spriteId];\r\n                        if (characterName) {\r\n                            console.log(\"WOULD CREATE PLAYABLE CHARACTER\", {characterName, cell});\r\n                            this.createPlayableCharacter(characterName, cell); // cell.x, cell.y);\r\n                        } else {\r\n                            console.warn(\"CELL has sprite with no kind or character\", { cell, itemKindBySpriteId, characterById });\r\n                        }\r\n                        return;\r\n                    } // hm\r\n                    this.itemKinds[kind.name] = kind;\r\n\r\n                    // we could get the image and attach it to an actor\r\n                    const collision = spriteCollisionById[spriteId]; //cell.sprites[1].spriteId];\r\n                    //cell.removeSprite(cell.sprites[1]);\r\n\r\n                    let sheet: ex.SpriteSheet = (<any>this.tileMap)._spriteSheets[spriteSheetKey];\r\n                    // let xOff = 16, yOff = 16;\r\n                    let size = kind.size || 1;\r\n                    //let cellsToMark = [];\r\n                    if (size > 1) {\r\n                        // xOff = 16 * size; yOff = 16 * size;\r\n                        for (const x of Array(size).keys()) {\r\n                            for (const y of Array(size).keys()) {\r\n                                let cx = x, cy = y;\r\n                                let cellToRemove = this.tileMap.getCellByIndex(index + cx + (cy * this.tileMap.cols));\r\n                                if (cellToRemove.sprites[1]) {\r\n                                    //console.log(\"REMOVE SPRITE FROM\", {x,y,cellToRemove});\r\n                                    cellToRemove.removeSprite(cellToRemove.sprites[1]);\r\n                                    //cellsToMark.push(cellToRemove);\r\n                                } else {\r\n                                    // console.warn(\"NO SPRITE TO REMOVE FROM\", { x, y, size });\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    // let z: number = (kind && kind.z) || 0;\r\n                    kind.collision = collision;\r\n                    let newSprite: ex.Sprite = sheet.getSprite(spriteId)\r\n                    kind.drawing = newSprite; \r\n\r\n                    // let thing: Thing = \r\n                    this.spawn(kind, cell);\r\n                }\r\n            }\r\n        });\r\n\r\n        // console.log({ itemKinds: this.itemKinds });\r\n    }\r\n\r\n}\r\n\r\nexport { World };","import * as ex from 'excalibur';\r\nimport { Resources } from './resources';\r\n\r\nconst basicSprites = new ex.SpriteSheet(Resources.BasicSprites, 8, 8, 32, 32);\r\nconst greatPalm = Resources.GreatPalm.asSprite();\r\nconst palm = Resources.Palm.asSprite();\r\n\r\nconst BigCampfire = Resources.Campfire.asSprite();\r\n\r\n//new ex.Sprite(Resources.GreatPalm.once)\r\nexport const BasicSpriteMap = {\r\n    chestClosed: basicSprites.getSprite(2),\r\n    chestOpen: basicSprites.getSprite(3),\r\n    greatPalm,\r\n    palm,\r\n\r\n    // also used for crafting, so needs to be capitalized/match item name\r\n    BigCampfire,\r\n\r\n    // materials...\r\n    wood: basicSprites.getSprite(9),\r\n    stone: basicSprites.getSprite(15),\r\n};","import * as ex from 'excalibur';\r\nimport { Game } from '../game';\r\nimport { Material } from '../world';\r\nimport { Resources } from '../resources';\r\nimport { BasicSpriteMap } from '../basic_sprites';\r\n\r\n//class Inventory extends ex.UIActor {\r\n//    // backpack:\r\n//}\r\n// inv is complex, like it's own actor/obj tree? \r\nconst inventorySprites: { [key in Material]: ex.Sprite } = {\r\n    [Material.Wood]: BasicSpriteMap.wood,\r\n    [Material.Stone]: BasicSpriteMap.stone\r\n}\r\n\r\nclass StockLine { // extends ex.UIActor {\r\n    label: ex.Label\r\n    constructor(public material: Material, public count: number, public yOff: number) {\r\n        //super(0, yOff * 30, 200, 20)\r\n\r\n        this.label = new ex.Label(`${material} x ${count}`, 0,0, 'Arial')\r\n        this.label.fontSize = 12\r\n        this.label.color = ex.Color.White\r\n        //this.add(this.label)\r\n    }\r\n    \r\n    draw(ctx, x: number, y: number) { // delta) {\r\n        //super.draw(ctx, delta);\r\n        let sprite = inventorySprites[this.material].clone();\r\n        sprite.scale = new ex.Vector(0.5, 0.5)\r\n        sprite.draw(ctx, x, y); // - 16, y - 16)\r\n\r\n        this.label.text = `${this.material} x ${this.count}`;\r\n        this.label.x = x + 24;\r\n        this.label.y = y + 16;\r\n        this.label.draw(ctx, 0);\r\n    }\r\n}\r\n\r\nclass Inventory extends ex.UIActor {\r\n    lineItems: { [key in Material]: StockLine }\r\n\r\n    constructor(public x: number, public y: number) {\r\n        super(x,y,100,300);\r\n\r\n        this.lineItems = {\r\n            [Material.Wood]: new StockLine(Material.Wood, 0, 0),\r\n            [Material.Stone]: new StockLine(Material.Stone, 0, 1)\r\n        }\r\n\r\n        //Object.keys(this.lineItems).forEach(material => this.add(this.lineItems[material]));\r\n    }\r\n\r\n    setStock(stocks: {[key: string]: number}) {\r\n        Object.keys(stocks).forEach((material: Material) => {\r\n            this.lineItems[material].count = stocks[material]\r\n        });\r\n\r\n        // console.log(\"AFTER SET STOCKS\", { items: this.lineItems });\r\n    }\r\n\r\n    draw(ctx, delta) {\r\n        super.draw(ctx, delta);\r\n        Object.keys(this.lineItems).forEach(\r\n            (material: Material, index: number) =>\r\n                this.lineItems[material].draw(ctx, this.x, this.y + index * 32)\r\n        );\r\n    }\r\n}\r\n\r\n\r\nclass Hud extends ex.UIActor {\r\n    output: ex.Label\r\n    inventory: Inventory //ex.UIActor\r\n\r\n    constructor(game: Game) {\r\n        super(0, 0, game.canvasWidth, game.canvasHeight);\r\n        this.initialize(game);\r\n    }\r\n\r\n    initialize(game: Game) {\r\n        this.output = new ex.Label(\r\n            '(press E to interact)',\r\n            game.canvasWidth / 2,\r\n            game.canvasHeight - 40,\r\n            'Arial'\r\n        );\r\n        this.output.color = ex.Color.White;\r\n        this.output.fontSize = 48\r\n        this.output.setWidth(game.canvasWidth);\r\n        this.output.textAlign = ex.TextAlign.Center;\r\n\r\n        const brand = new ex.Label('I S L E', 10, 50, 'Arial');\r\n        brand.color = ex.Color.Azure;\r\n        brand.fontSize = 24\r\n\r\n        this.inventory = new Inventory(game.canvasWidth - 300, 50) // .text = 'a bunch of stuff';\r\n\r\n        this.add(this.output);\r\n        this.add(brand);\r\n        this.add(this.inventory);\r\n\r\n        this.updateInventory({\r\n            [Material.Wood]: 0,\r\n            [Material.Stone]: 0\r\n        })\r\n    }\r\n\r\n    updateInventory(stocks: {[key: string]: number}) {\r\n        console.log(\"UPDATE INV\", { stocks });\r\n        this.inventory.setStock(stocks);\r\n    }\r\n\r\n    describe(description) {\r\n      this.output.text = description;\r\n      this.output.opacity = 1;\r\n      this.output.actions.clearActions();\r\n      this.output.actions.fade(0, 2000);\r\n    }\r\n}\r\n\r\nexport { Hud };","import * as ex from 'excalibur';\nimport { clamp } from '../../util';\n\nexport class Logo extends ex.Label {\n  intensity: number;\n  constructor(x: number, y: number, message: string) {\n    super(message);\n    //this.setWidth(200);\n    this.x = x; // (game.drawWidth / 2) - 200;\n    this.y = y; // 400;\n\n    this.fontFamily = 'Arial';\n    this.fontSize = 256;\n\n    this.color = new ex.Color(255,255,255);\n    this.intensity = 150;\n    this.strobe();\n  }\n\n  strobeClamp = clamp(50, 200);\n\n  strobe = () => {\n    this.intensity = this.intensity + Math.ceil(Math.random()*16) - 8;\n    this.intensity = this.strobeClamp(this.intensity);\n    // console.log(\"strobe\", { intensity: this.intensity });\n\n    this.opacity = this.intensity / 255;\n  }\n}\n","import * as ex from 'excalibur';\r\nimport { Game } from '../../game';\r\nimport { Direction, oppositeWay, addScalarToVec, dirFromVec } from '../../util';\r\nimport { Vector } from 'excalibur';\r\nimport { World } from '../../world';\r\nimport { GameConfig } from '../../game_config';\r\nimport { Item } from '../../models';\r\n\r\nexport class Player extends ex.Actor {\r\n  interacting: boolean\r\n  equipped: Item\r\n\r\n  speed: number\r\n  facing: Direction\r\n  _world: World\r\n  sprites: { [key: string]: ex.Sprite }\r\n  walkSprites: { [key: string]: ex.Animation }\r\n\r\n  constructor(\r\n    public name: string,\r\n    public x: number,\r\n    public y: number,\r\n    protected config: GameConfig,\r\n    protected spriteSheet: ex.SpriteSheet,\r\n    private engine: ex.Engine,\r\n  ) {\r\n    super(x, y, 32, 64);\r\n\r\n    this.collisionArea.body.useCircleCollision(6, new ex.Vector(0, 22));\r\n    this.color = new ex.Color(255, 255, 255);\r\n\r\n    this.collisionType = ex.CollisionType.Active;\r\n    this.speed = config.playerSpeed;\r\n    this.interacting = false;\r\n\r\n    this.sprites = {\r\n      'down':  spriteSheet.getSprite(0),\r\n      'up':    spriteSheet.getSprite(1),\r\n      'right': spriteSheet.getSprite(2),\r\n      'left':  spriteSheet.getSprite(3),\r\n    }\r\n\r\n    let walkFrames = [1,2,3,4,5,6].map(x => x * 4)\r\n    let animRate = 125;\r\n    this.walkSprites = {\r\n      'down': spriteSheet.getAnimationByIndices(\r\n        engine,\r\n        walkFrames, // [4, 8, 12, 16, 20, 24], // 1, 2, 3, 4],\r\n        animRate\r\n      ),\r\n      'up': spriteSheet.getAnimationByIndices(\r\n        engine,\r\n        walkFrames.map(x => x+1),\r\n        animRate\r\n      ),\r\n      'right': spriteSheet.getAnimationByIndices(\r\n        engine,\r\n        walkFrames.map(x => x+2),\r\n        animRate\r\n      ),\r\n      'left': spriteSheet.getAnimationByIndices(\r\n        engine,\r\n        walkFrames.map(x => x+3),\r\n        animRate\r\n      )\r\n    }\r\n\r\n    // assemble indexes for walking...\r\n    //let directions = ['down', 'up', 'right', 'left'];\r\n    //directions.forEach((dir: Direction, column: number) => {\r\n    //  //let dirIndices: number[] = [0,1,2,3,4,5].map((index: number) => {\r\n    //  //  return 4 + index*4 + column\r\n    //  //})\r\n    //  this.sprites['walk'][dir] = spriteSheet.getAnimationByIndices(\r\n    //    engine,\r\n    //    [1,2,3,4],\r\n    //    8\r\n    //  )\r\n    //})\r\n\r\n    // set facing + init sprite\r\n    this.move('down');\r\n    this.halt();\r\n  }\r\n\r\n  wireWorld = (world: World) => { this._world = world; }\r\n\r\n  interact() {\r\n    let pos = this.interactionPos();\r\n    this.interacting = true;\r\n    let entityAndCell = this._world.entityAt(pos.x, pos.y) ||\r\n      this._world.entityAt(pos.x, pos.y+10) ||\r\n      this._world.entityAt(pos.x, pos.y-10) ||\r\n      this._world.entityAt(pos.x-10, pos.y) ||\r\n      this._world.entityAt(pos.x+10, pos.y);\r\n    if (entityAndCell) {\r\n      let { entity, cell } = entityAndCell;\r\n      return this._world.interact(entity, cell);\r\n    }\r\n  }\r\n\r\n  interactionPos(): { x:number, y:number }  {\r\n    let interactionPos = this.getCenter().clone();\r\n    let yOff = 20; //this.facing === 'up' ? 10 : 16;\r\n    if (this.facing === 'up') { yOff -= 2; }\r\n    if (this.facing === 'down') { yOff -= 4; }\r\n    interactionPos.y += yOff; //this.getHeight();\r\n    interactionPos.x -= 2;\r\n    addScalarToVec(interactionPos, this.facing, 24);\r\n    return interactionPos;\r\n  }\r\n\r\n  draw(ctx: CanvasRenderingContext2D, engine) {\r\n    super.draw(ctx, engine);\r\n\r\n    if (this.equipped) {\r\n      let littleDrawing = this.equipped.kind.drawing.clone()\r\n      littleDrawing.scale = new ex.Vector(0.5, 0.5)\r\n      littleDrawing.draw(ctx, this.pos.x, this.pos.y)\r\n    }\r\n\r\n    if (this.config.debugBoundingBoxes) {\r\n      this.collisionArea.debugDraw(ctx, ex.Color.Chartreuse);\r\n      if (this.interacting) {\r\n        let pos = this.interactionPos(); //getCenter().clone();\r\n        ctx.fillRect(pos.x, pos.y - 10, 4, 4);\r\n        ctx.fillRect(pos.x, pos.y, 4, 4);\r\n        ctx.fillRect(pos.x, pos.y + 10, 4, 4);\r\n        ctx.fillRect(pos.x - 10, pos.y, 4, 4);\r\n        ctx.fillRect(pos.x + 10, pos.y, 4, 4);\r\n      }\r\n      ctx.fillRect(this.x, this.computeZ(), 3, 3);\r\n    }\r\n  }\r\n\r\n  computeZ = () => (this.y + 24); // / 10000; //8;\r\n\r\n  halt = () => {\r\n    this.vel = new ex.Vector(0, 0);\r\n  }\r\n\r\n  move = (direction: Direction) => {\r\n    this.facing = direction;\r\n    const step = this.speed * 32;\r\n    this.halt();\r\n    if (direction === 'left')  { this.vel.x = -step; }\r\n    if (direction === 'right') { this.vel.x = step; }\r\n    if (direction === 'up')    { this.vel.y = -step; }\r\n    if (direction === 'down')  { this.vel.y = step; }\r\n  }\r\n\r\n  update(engine, delta) {\r\n    this.currentDrawing = this.walkSprites[this.facing];\r\n    if (Math.abs(this.vel.x + this.vel.y) < this.speed) {\r\n      this.halt();\r\n      this.currentDrawing = this.sprites[this.facing];\r\n    }\r\n    super.update(engine, delta);\r\n    this.setZIndex(this.computeZ());\r\n    //console.log({z: this.getZIndex()})\r\n  }\r\n\r\n}\r\n","import { Player } from './player/player';\nimport { Logo } from './brand/logo';\nexport { Player, Logo };\n","import * as ex from 'excalibur';\r\nimport { GameConfig } from '../game_config';\r\n\r\nexport class Thing extends ex.Actor {\r\n    constructor(\r\n        public x: number,\r\n        public y: number,\r\n        public zOff: number = 0,\r\n        public size: number = 1,\r\n        public debugBoxes: boolean,\r\n    ) {\r\n        super(x, y, 32 * size, 32 * size, ex.Color.Chartreuse);\r\n    }\r\n\r\n    draw(ctx, engine) {\r\n        super.draw(ctx, engine);\r\n        if (this.debugBoxes) {\r\n            this.collisionArea.debugDraw(ctx, ex.Color.LightGray);\r\n            ctx.fillRect(this.x, this.computeZ(), 5, 5);\r\n        }\r\n    }\r\n\r\n    computeZ = () => (this.y + 4 + (this.size-1) * 16); // / 10000;\r\n    constructCollisionArea(collision) {\r\n        if (!collision) {\r\n            if (this.size > 1) {\r\n                // console.log(\"CREATE LARGE THING!!!\")\r\n                this.collisionType = ex.CollisionType.Fixed;\r\n                this.body.useBoxCollision(\r\n                    new ex.Vector(\r\n                        0, //(32 * this.size) / 2,\r\n                        (16 * this.size) - 14 \r\n                    )\r\n                )\r\n                this.setHeight((26*this.size) / 4);\r\n                this.setWidth(24*this.size);\r\n            } else {\r\n                this.collisionType = ex.CollisionType.PreventCollision;\r\n            }\r\n        }\r\n        else {\r\n            this.collisionType = ex.CollisionType.Fixed;\r\n            if (collision.ellipse) {\r\n                let center = new ex.Vector((collision.x + collision.width / 2) - 16, (collision.y + collision.height / 2) - 16);\r\n                this.body.useCircleCollision(collision.height / 2, center);\r\n            }\r\n            else if (collision.polygon) {\r\n                //console.log(\"poly\", { polygon: collision.polygon });\r\n                //debugger;\r\n                let vecs: ex.Vector[] = collision.polygon.map(({ x, y }) => new ex.Vector(x + collision.x, y + collision.y));\r\n                this.body.usePolygonCollision(vecs);\r\n            }\r\n            else {\r\n                console.warn(\"implement collider:\", { collision });\r\n                //debugger;\r\n            }\r\n        }\r\n    }\r\n}","import * as ex from 'excalibur';\r\nimport { World, Material } from './world';\r\nimport { Cell } from 'excalibur';\r\nimport { coinflip } from './util';\r\nimport { BasicSpriteMap } from './basic_sprites';\r\n\r\n//type Material = 'wood' | 'stone' | 'glass'; // | 'rope'\r\n\r\ninterface ItemKind {\r\n    name: string\r\n    description: string\r\n    //public sprite: ex.Sprite,\r\n\r\n    z?: number\r\n    size?: number\r\n\r\n    drawing?: ex.Sprite\r\n    collision?: any\r\n    // alternate?: boolean\r\n}\r\n\r\nclass Item {\r\n    //static sprites: { [key: string]: ex.Sprite }\r\n\r\n    constructor(\r\n        public kind: ItemKind,\r\n        public actor: ex.Actor,\r\n        public cell: ex.Cell, // the 'root' cell (upper-left corner of large objs)\r\n        //public sprite: ex.Sprite,\r\n        //public state: Object = {},\r\n        public world: World\r\n    ) {\r\n        //console.log(\"CREATED ITEM\", { kind: this.kind, sprite: this.sprite });\r\n        this.initialize();\r\n    }\r\n\r\n    initialize() {}\r\n\r\n    activate() {\r\n      console.warn(\"item is non-interactive\",\r\n          { kind: this.kind });\r\n        return null; //'...';\r\n    }\r\n}\r\n\r\nclass Chest extends Item {\r\n    state: { open: boolean } = { open: false }\r\n\r\n    initialize() {\r\n        this.actor.addDrawing('closed', BasicSpriteMap.chestClosed);\r\n        this.actor.addDrawing('open', BasicSpriteMap.chestOpen);\r\n        //this.actor.addDrawing();\r\n    }\r\n\r\n    activate() {\r\n        console.log(\"Chest activated!\");\r\n        if (this.state.open) {\r\n            this.actor.setDrawing('closed');\r\n            this.state = { open: false };\r\n            return 'closed';\r\n        } else {\r\n            this.actor.setDrawing('open');\r\n            this.state = { open: true }\r\n            return 'opened';\r\n        }\r\n    }\r\n}\r\n\r\nclass Palm extends Item {\r\n    initialize() {\r\n        this.actor.addDrawing('palm', BasicSpriteMap.palm);\r\n        this.actor.setDrawing('palm');\r\n    }\r\n}\r\n\r\nclass BigCampfire extends Item {\r\n    initialize() {\r\n        this.actor.addDrawing('fire', BasicSpriteMap.BigCampfire);\r\n        this.actor.setDrawing('fire');\r\n        //this.actor.setDrawing('big')\r\n    }\r\n}\r\n\r\nclass WoodLog extends Item {\r\n  activate() {\r\n      this.world.collect(this, Material.Wood);\r\n      return this.kind.description;\r\n  }\r\n}\r\n\r\nclass WoodLogStack extends Item {\r\n    activate() {\r\n        this.world.collect(this, Material.Wood, 3);\r\n        return this.kind.description;\r\n    }\r\n}\r\n\r\nclass GreatPalm extends Item {\r\n    state: { hp: number } = { hp: 100 }\r\n\r\n    initialize() {\r\n        this.actor.addDrawing('palm', BasicSpriteMap.greatPalm);\r\n        this.actor.setDrawing('palm');\r\n    }\r\n\r\n    activate() {\r\n        if (this.state.hp > 0) {\r\n            const message: string = `once a seed (${this.state.hp}%)`\r\n            let damage = this.world._primaryCharacter.equipped ? 30 : 3;\r\n            this.state.hp -= damage;\r\n            return message;\r\n        } else {\r\n            let baseCells: Array<ex.Cell> = [-2,-1,0,1,2].map((offset) => //this.cell; //world.tileMap.getCellByPoint(this.actor.x, this.actor.y);\r\n                this.world.tileMap.getCellByIndex(\r\n                    this.cell.index +\r\n                    (this.kind.size / 2) + offset +\r\n                    ((this.kind.size - 1) * this.world.tileMap.cols)\r\n                )\r\n            );\r\n\r\n            this.world.destroy(this);\r\n\r\n            baseCells.forEach(base => {\r\n                let logKind = coinflip() ? 'WoodLogStack' : 'WoodLog';\r\n\r\n                this.world.spawn(\r\n                    this.world.itemKinds[logKind],\r\n                    base,\r\n                );\r\n            });\r\n            return \"timber\";\r\n        }\r\n    }\r\n}\r\n\r\nclass Handaxe extends Item {\r\n    activate() {\r\n        this.world.equip(this);\r\n        this.world.destroy(this);\r\n        return \"chop chop\";\r\n    }\r\n}\r\n\r\nconst itemClasses = {\r\n    Chest,\r\n    Palm,\r\n    GreatPalm,\r\n    BigCampfire,\r\n    WoodLog,\r\n    WoodLogStack,\r\n    Handaxe\r\n};\r\n\r\nconst buildItem = (kind: ItemKind, actor: ex.Actor, cell: Cell, world: World): Item => {\r\n    if (itemClasses[kind.name]) {\r\n        return new itemClasses[kind.name](kind, actor, cell, world);\r\n    } else {\r\n        return new Item(kind, actor, cell, world);\r\n    }\r\n}\r\n\r\nclass Isle {\r\n    constructor(public name: string, public items: Array<Item> = []) {\r\n    }\r\n}\r\n\r\nexport { Isle, Item, ItemKind, buildItem };","import * as ex from 'excalibur';\nimport { Resources } from './resources';\nimport { GameConfig } from './game_config';\nimport { setupMaster } from 'cluster';\nimport { LevelOne } from './scenes/level-one/level-one';\n\nexport class Game extends ex.Engine {\n  constructor(width: number, height: number, config: GameConfig) {\n    super({ width, height, displayMode: ex.DisplayMode.FullScreen });\n\n    this.setup();\n  }\n\n\n  // entrypoint\n\n  public start() {\n    let loader = new ex.Loader();\n    for (let key in Resources) {\n      loader.addResource(Resources[key]);\n    }\n\n    return super.start(loader).then(this.kick);\n  }\n\n  // runs on new Game\n  protected setup() {\n    // console.log(\"game setup here\")\n    // initialize island...\n\n    // const levelOne = new LevelOne();\n    // this.add(levelOne);\n  }\n\n  // runs after loader\n  protected kick() {\n\n  } \n}\n","module.exports = __webpack_public_path__ + \"fac8210e66067d101e48370329fc4c5a.mp3\";","module.exports = __webpack_public_path__ + \"8e8aa6414e948820c3ad76cc2be5950e.png\";","module.exports = __webpack_public_path__ + \"db6f4f593c47b1aa561da3453157f4bb.png\";","module.exports = __webpack_public_path__ + \"e12b440e05a78caaa8a410ac5a9ae975.png\";","module.exports = __webpack_public_path__ + \"9cc1647a9ee8e4b02e846cff8fa0e3db.png\";","module.exports = __webpack_public_path__ + \"2a68646c6ea259ec7876244b66663310.png\";","module.exports = __webpack_public_path__ + \"bced88c8216228953a6f7efe3bbc84a1.png\";","module.exports = __webpack_public_path__ + \"b9b405c74e06d77b7a88f04d6d3ae5cd.png\";","import * as ex from 'excalibur';\nimport { World } from '../../world';\nimport { BasicSpriteMap } from '../../basic_sprites';\n\nexport class LevelOne extends ex.Scene {\n  world: World\n\n  public onInitialize(engine: ex.Engine) {\n  }\n\n  public wireWorld(world: World) { this.world = world; }\n\n  public onActivate() {\n    \n  }\n\n  public onDeactivate() {\n\n  }\n\n  // public update(engine: ex.Engine, delta) {\n  //   super.update(engine, delta);\n  // }\n\n  public draw(ctx, delta) {\n    super.draw(ctx, delta);\n\n    // draw currently-crafting item...\n    if (this.world && this.world.crafting) {\n      console.log(\"TRYING TO DRAW CRAFTING ITEM\", this.world.craftingItem);\n      let sprite: ex.Sprite = BasicSpriteMap[this.world.craftingItem]; //.clone();\n      if (sprite) { //BasicSpriteMap[this.world.craftingItem])\n        let craftPreview = sprite.clone()\n        let { x, y } = this.world.craftingAt;\n        // console.log(\"draw crafting item at\", {x,y});\n        craftPreview.opacity(0.5);\n        craftPreview.scale = new ex.Vector(2, 2);\n\n        // maybe it's red if we can't do it??\n\n        craftPreview.draw(ctx, x, y);\n      }\n    }\n  }\n}\n","import * as ex from 'excalibur';\r\nimport { LevelOne } from './scenes/level-one/level-one';\r\nimport { Resources } from './resources';\r\nimport { Game } from './game';\r\nimport { keyToDirection, Direction, mode } from './util';\r\nimport { World, Material } from './world';\r\nimport { GameConfig } from './game_config';\r\nimport { Hud } from './actors/hud';\r\nimport { BasicSpriteMap } from './basic_sprites';\r\nimport { TileMap } from 'excalibur';\r\n\r\n// Islands are either from before or for after humankind. (gd)\r\n\r\n/* \r\nDreaming of islands — whether with joy or in fear, it \r\ndoesn't matter — is dreaming of pulling away, of being already separate, far \r\nfrom any continent, of being lost and alone — or it is dreaming of starting from \r\nscratch, recreating, beginning anew. (gd)\r\n*/\r\n\r\n// An island doesn't stop being deserted simply because it is inhabited. (gd)\r\n\r\nconst config: GameConfig = {\r\n  debugCells: false,\r\n  debugBoundingBoxes: false,\r\n  zoom: 2,\r\n  playerSpeed: 5,\r\n  bgMusic: true\r\n}\r\n\r\nconst game = new Game(800, 600, config);\r\nconst levelOne = new LevelOne();\r\n\r\nconst hud = new Hud(game);\r\nlevelOne.add(hud);\r\n\r\nconst world = new World(levelOne, hud, config, game);\r\nlevelOne.wireWorld(world); // hmmm\r\n\r\ngame.input.keyboard.on('press', (evt: ex.Input.KeyEvent) => {\r\n    // check for current scene?\r\n  if (game.currentScene === levelOne) {\r\n    let player = world.primaryCharacter();\r\n\r\n    let { key } = evt;\r\n    if (key === ex.Input.Keys.E) {\r\n      let interaction = player.interact();\r\n      if (interaction) {\r\n        hud.describe(interaction);\r\n      }\r\n    } else if (key === ex.Input.Keys.C) {\r\n      if (!world.crafting) {\r\n        hud.describe('would craft!');\r\n        world.enterCraftMode('BigCampfire', 0,0);\r\n      } else {\r\n        world.crafting = false;\r\n      }\r\n    } else {\r\n      // assume we're trying to move\r\n      let direction = keyToDirection(key);\r\n      if (direction) { player.move(direction); }\r\n    }\r\n  }\r\n})\r\n\r\ngame.input.keyboard.on('hold', (evt: ex.Input.KeyEvent) => {\r\n  let { key } = evt;\r\n  let direction: Direction = keyToDirection(key);\r\n  if (direction) {\r\n    let player = world.primaryCharacter();\r\n    player.move(direction);\r\n  }\r\n})\r\n\r\ngame.input.keyboard.on('release', (evt: ex.Input.KeyEvent) => {\r\n  // console.log(\"RELEASE\", { evt });\r\n  let { key } = evt;\r\n  let direction: Direction = keyToDirection(key);\r\n  if (direction) {\r\n    let player = world.primaryCharacter();\r\n    player.halt(); //direction);\r\n    player.interacting = false;\r\n  }\r\n});\r\n\r\ngame.add('wander', levelOne);\r\n\r\ngame.start().then(() => {\r\n  world.processTiledMap(Resources.Map);\r\n\r\n  let tileMap = world.tileMap;\r\n  levelOne.addTileMap(tileMap);\r\n  game.goToScene('wander');\r\n\r\n  // really should be an audio player!\r\n  if (config.bgMusic) {\r\n    let theme = Resources.FineMist; //Science;\r\n    // wait a tiny bit for music to load??? (seems to work welll)\r\n    setTimeout(() => {\r\n      console.log('about to play music', { theme, isLoaded: theme.isLoaded() });\r\n      theme.play(0.2) //1.0)\r\n    }, 3000);\r\n  }\r\n\r\n  game.input.pointers.primary.on('move', (e: ex.Input.PointerEvent) => {\r\n    // console.log(\"MOUSE MOVE\");\r\n    let { pos } = e;\r\n    if (world && world.crafting) {\r\n      // console.log(\"MOUSE MOVE while CRAFTING...\");\r\n      let cell = world.tileMap.getCellByPoint(pos.x, pos.y);\r\n      let x = cell.x, y = cell.y;\r\n      let screenPos = game.worldToScreenCoordinates(new ex.Vector(x,y));\r\n      //world.craftingItem = 'campfire';\r\n      world.craftingAt = screenPos;\r\n      //console.log(\"draw fire sprite at\", {x,y});\r\n      //fireSprite.draw(game.ctx, x, y); //cell.x * 32, cell.y * 32);\r\n    }\r\n  });\r\n\r\n  game.input.pointers.primary.on('down', (e: ex.Input.PointerEvent) => {\r\n    let { pos } = e;\r\n    console.log(\"CLICK\", { pos });\r\n    if (world && world.crafting) { // && world.ableToCraft()) {\r\n      console.log(\"CLICK while CRAFTING\");\r\n      hud.describe(`would build ${world.craftingItem}!`);\r\n      let kind = world.itemKinds[world.craftingItem];\r\n\r\n      let cell = world.tileMap.getCellByPoint(pos.x, pos.y);\r\n      //debugger;\r\n      world.spawn(kind, cell);\r\n      world.crafting = false;\r\n      world.debit(Material.Wood);\r\n      //world.primaryCharacter().a\r\n    }\r\n  })\r\n\r\n});"],"sourceRoot":""}