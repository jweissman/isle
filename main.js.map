{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/util.ts","webpack:///./src/actors/index.ts","webpack:///./src/world.ts","webpack:///./src/game.ts","webpack:///./src/images/spritemap.png","webpack:///./src/images/sword.png","webpack:///./src/resources.ts","webpack:///./src/actors/brand/logo.ts","webpack:///./src/actors/enemy/enemy.ts","webpack:///./src/actors/player/player.ts","webpack:///./src/scenes/main-menu/main-menu.ts","webpack:///./src/scenes/level-one/level-one.ts","webpack:///./src/index.ts"],"names":["webpackJsonpCallback","data","moduleId","chunkId","chunkIds","moreModules","executeModules","i","resolves","length","installedChunks","push","Object","prototype","hasOwnProperty","call","modules","parentJsonpFunction","shift","deferredModules","apply","checkDeferredModules","result","deferredModule","fulfilled","j","depId","splice","__webpack_require__","s","installedModules","1","exports","module","l","m","c","d","name","getter","o","defineProperty","configurable","enumerable","get","r","value","n","__esModule","default","object","property","p","jsonpArray","window","webpackJsonp","oldJsonpFunction","bind","slice","ex","clamp","min","max","val","clamped","Math","keyToDirection","key","direction","Input","Keys","A","Left","D","Right","S","Down","W","Up","oppositeWay","dir","opp","mode","array","map","Map","maxFreq","item","freq","has","set","addScalarToVec","vec","step","y","x","dirFromVec","abs","e","t","player_1","Player","enemy_1","Enemy","logo_1","Logo","World","[object Object]","mapResource","debugBoxes","this","_processTiledMap","nothing","_mapRes","terrainMeta","spriteTerrainById","spriteCollisionById","tilesets","forEach","ts","console","log","terrains","terrain","properties","tile","reduce","acc","curr","assign","terrainName","tiles","id","terrainTile","solid","some","objectgroup","objects","tileMap","getTileMap","blockingActors","cell","sprites","spriteId","collision","block","Actor","collisionType","CollisionType","Fixed","body","useCircleCollision","height","Vector","draw","ctx","collisionArea","debugDraw","Color","LightGray","Game","Engine","width","super","displayMode","DisplayMode","FullScreen","loader","start","excalibur_tiled_1","sword","spritemap","Resources","Sword","Texture","Spritemap","imagePathAccessor","path","tileset","actualPath","replace","util_1","Label","message","strobeClamp","strobe","intensity","ceil","random","opacity","fontFamily","fontSize","color","initialVelocity","setWidth","setHeight","Red","Passive","vel","setTo","wireWorld","world","_world","halt","move","facing","speed","pos","Active","on","interactionPos","getCenter","clone","entity","entityAt","engine","Chartreuse","actors_1","simpleButtonFactory","myButton","document","createElement","textContent","MainMenu","Scene","logo","drawWidth","add","addTimer","Timer","playMe","UIActor","onClick","factory","hide","rootElement","style","display","position","appendChild","buttonElement","addEventListener","canvasHeight","_engine","devicePixelRatio","canvasWidth","left","canvas","offsetLeft","top","offsetTop","buttonWidth","clientWidth","buttonHeight","clientHeight","goToScene","LevelOne","level_one_1","main_menu_1","resources_1","game_1","world_1","game","mainMenu","levelOne","sheet","SpriteSheet","player","startX","startY","addDrawing","getSprite","input","keyboard","evt","E","interact","camera","strategy","lockToActor","zoom","Loader","addResource","then","config","addTileMap","actor"],"mappings":"aACA,SAAAA,EAAAC,GAOA,IANA,IAKAC,EAAAC,EALAC,EAAAH,EAAA,GACAI,EAAAJ,EAAA,GACAK,EAAAL,EAAA,GAGAM,EAAA,EAAAC,KACQD,EAAAH,EAAAK,OAAoBF,IAC5BJ,EAAAC,EAAAG,GACAG,EAAAP,IACAK,EAAAG,KAAAD,EAAAP,GAAA,IAEAO,EAAAP,GAAA,EAEA,IAAAD,KAAAG,EACAO,OAAAC,UAAAC,eAAAC,KAAAV,EAAAH,KACAc,EAAAd,GAAAG,EAAAH,IAIA,IADAe,KAAAhB,GACAO,EAAAC,QACAD,EAAAU,OAAAV,GAOA,OAHAW,EAAAR,KAAAS,MAAAD,EAAAb,OAGAe,IAEA,SAAAA,IAEA,IADA,IAAAC,EACAf,EAAA,EAAiBA,EAAAY,EAAAV,OAA4BF,IAAA,CAG7C,IAFA,IAAAgB,EAAAJ,EAAAZ,GACAiB,KACAC,EAAA,EAAkBA,EAAAF,EAAAd,OAA2BgB,IAAA,CAC7C,IAAAC,EAAAH,EAAAE,GACA,IAAAf,EAAAgB,KAAAF,MAEAA,IACAL,EAAAQ,OAAApB,IAAA,GACAe,EAAAM,IAAAC,EAAAN,EAAA,KAGA,OAAAD,EAIA,IAAAQ,KAKApB,GACAqB,EAAA,GAGAZ,KAGA,SAAAS,EAAA1B,GAGA,GAAA4B,EAAA5B,GACA,OAAA4B,EAAA5B,GAAA8B,QAGA,IAAAC,EAAAH,EAAA5B,IACAK,EAAAL,EACAgC,KACAF,YAUA,OANAhB,EAAAd,GAAAa,KAAAkB,EAAAD,QAAAC,IAAAD,QAAAJ,GAGAK,EAAAC,KAGAD,EAAAD,QAKAJ,EAAAO,EAAAnB,EAGAY,EAAAQ,EAAAN,EAGAF,EAAAS,EAAA,SAAAL,EAAAM,EAAAC,GACAX,EAAAY,EAAAR,EAAAM,IACA1B,OAAA6B,eAAAT,EAAAM,GACAI,gBACAC,cACAC,IAAAL,KAMAX,EAAAiB,EAAA,SAAAb,GACApB,OAAA6B,eAAAT,EAAA,cAAiDc,YAIjDlB,EAAAmB,EAAA,SAAAd,GACA,IAAAM,EAAAN,KAAAe,WACA,WAA2B,OAAAf,EAAAgB,SAC3B,WAAiC,OAAAhB,GAEjC,OADAL,EAAAS,EAAAE,EAAA,IAAAA,GACAA,GAIAX,EAAAY,EAAA,SAAAU,EAAAC,GAAsD,OAAAvC,OAAAC,UAAAC,eAAAC,KAAAmC,EAAAC,IAGtDvB,EAAAwB,EAAA,GAEA,IAAAC,EAAAC,OAAAC,aAAAD,OAAAC,iBACAC,EAAAH,EAAA1C,KAAA8C,KAAAJ,GACAA,EAAA1C,KAAAX,EACAqD,IAAAK,QACA,QAAAnD,EAAA,EAAgBA,EAAA8C,EAAA5C,OAAuBF,IAAAP,EAAAqD,EAAA9C,IACvC,IAAAU,EAAAuC,EAIArC,EAAAR,MAAA,OAEAU,qFCrIA,MAAAsC,EAAA/B,EAAA,GAwFEI,EAAA4B,MArFY,EAACC,EAAaC,IAAiBC,IAC3C,IAAIC,EAAUC,KAAKJ,IAAIE,EAAKD,GAE5B,OADUG,KAAKH,IAAIE,EAASH,KAqF5B7B,EAAAkC,eA/EqB,CAACC,IACtB,IAAIC,EAaJ,OAZID,IAAQR,EAAGU,MAAMC,KAAKC,GAAKJ,IAAQR,EAAGU,MAAMC,KAAKE,OACnDJ,EAAY,QAEVD,IAAQR,EAAGU,MAAMC,KAAKG,GAAKN,IAAQR,EAAGU,MAAMC,KAAKI,QACnDN,EAAY,SAEVD,IAAQR,EAAGU,MAAMC,KAAKK,GAAKR,IAAQR,EAAGU,MAAMC,KAAKM,OACnDR,EAAY,QAEVD,IAAQR,EAAGU,MAAMC,KAAKO,GAAKV,IAAQR,EAAGU,MAAMC,KAAKQ,KACnDV,EAAY,MAEPA,IAoEPpC,EAAA+C,YAjEkB,CAACC,IACnB,IAAIC,EACJ,OAAOD,GACL,IAAK,OAAQC,EAAM,QAAS,MAC5B,IAAK,QAASA,EAAM,OAAQ,MAC5B,IAAK,KAAMA,EAAM,OAAQ,MACzB,IAAK,OAAQA,EAAM,KAErB,OAAOA,IA0DPjD,EAAAkD,KAtDW,CAACC,IACZ,MAAMC,EAAM,IAAIC,IAEhB,IACIH,EADAI,EAAU,EAGd,IAAI,MAAMC,KAAQJ,EAAO,CACvB,IAAIK,EAAOJ,EAAIK,IAAIF,GAAQH,EAAIxC,IAAI2C,GAAQ,IAC3CC,EAEUF,IACRA,EAAUE,EACVN,EAAOK,GAGTH,EAAIM,IAAIH,EAAMC,GAGhB,OAAON,IAiCPlD,EAAA2D,eA9BqB,EAACC,EAAgBxB,EAAsByB,KAC5D,OAAQzB,GACN,IAAK,KACHwB,EAAIE,GAAKD,EACT,MACF,IAAK,OACHD,EAAIE,GAAKD,EACT,MACF,IAAK,OACHD,EAAIG,GAAKF,EACT,MACF,IAAK,QACHD,EAAIG,GAAKF,KAmBb7D,EAAAgE,WAdiB,CAACJ,IAClB,IAAIG,EAACA,EAACD,EAACA,GAAKF,EACZ,OAAI3B,KAAKgC,IAAIF,GAAK9B,KAAKgC,IAAIH,GAClBC,EAAI,EAAI,QAAU,OAElBD,EAAI,EAAI,OAAS,iBAAAI,EAAAC,EAAAtE,GAAA,aAAAjB,OAAA6B,eAAA0D,EAAA,cAAArD,OAAA,ICnF5B,MAAAsD,EAAAxE,EAAA,IAGSI,EAAAqE,OAHAD,EAAAC,OACT,MAAAC,EAAA1E,EAAA,IAEiBI,EAAAuE,MAFRD,EAAAC,MACT,MAAAC,EAAA5E,EAAA,GACwBI,EAAAyE,KADfD,EAAAC,oFCFT,MAAA9C,EAAA/B,EAAA,GAsHSI,EAAA0E,YA9GLC,YAAmBC,EAAmCC,GAAnCC,KAAAF,cAAmCE,KAAAD,aAClDC,KAAKC,mBAGTJ,SAASZ,EAAWD,GAChB,OAASkB,QAAS,eActBL,mBACI,IAAIM,EAAUH,KAAKF,YACfM,KACAC,KACAC,KAEJH,EAAQhH,KAAKoH,SAASC,QAASC,IAC3BC,QAAQC,IAAI,WAAaF,OACrBA,EAAGG,WACHH,EAAGG,SAASJ,QAAQK,IACZA,EAAQC,aACRV,EAAYS,EAAQE,MAAQF,EAAQC,WAAWE,OAAO,CAACC,EAAKC,KACxD,IAAI1F,KAAEA,EAAIQ,MAAEA,GAAUkF,EACtB,OAAapH,OAAQqH,OAAOF,GAAOpB,CAACrE,GAAOQ,SAG/CoE,EAAYS,EAAQE,MAAMK,YAAcP,EAAQrF,KAEhDkF,QAAQC,eACOE,EAAQrF,SAASqF,EAAQE,oBACpCX,EAAYS,EAAQE,UAKhCV,EAAoBI,EAAGY,MAAML,OAAO,CAACC,EAAKC,KACtC,IAAIL,QAAEA,EAAOS,GAAEA,GAAOJ,EAElBK,GAAgBC,MADNX,EAAQY,KAAKV,GAAQX,EAAYW,IAASX,EAAYW,GAAMS,QAG1E,OAAa1H,OAAQqH,OAAOF,GAAOpB,CAACyB,GAAKC,UAO7Cd,EAAGY,OAASZ,EAAGY,MAAMI,KAAKV,GAAQA,EAAKW,eAIvCpB,EAAsBG,EAAGY,MAAML,OAAO,CAACC,EAAKC,KACxC,IAAIQ,YAAEA,EAAWJ,GAAEA,GAAOJ,EAC1B,OAAIQ,GAAeA,EAAYC,SAAWD,EAAYC,QAAQhI,OAC7CG,OAAQqH,OAAOF,GAAOpB,CAACyB,GAAKI,EAAYC,QAAQ,KAEtDV,UASvBjB,KAAK4B,QAAUzB,EAAQ0B,aAEvB7B,KAAK8B,kBAEL9B,KAAK4B,QAAQzI,KAAKqH,QAASuB,IAEvB,GAAIA,EAAKC,QAAQ,GAAI,CACjB,IAAIjB,EAAOV,EAAkB0B,EAAKC,QAAQ,GAAGC,UAI7C,IAHAF,EAAOjI,OAAOqH,OAAOY,EAAMhB,IAGlBiB,QAAQ,GAAI,CACjB,MAAME,EAAY5B,EAAoByB,EAAKC,QAAQ,GAAGC,UACtD,GAAIC,EAAW,CACX,IAAIC,EAAQ,IAAItF,EAAGuF,MAAML,EAAK9C,EAAG8C,EAAK/C,EAAG,GAAI,IAC7CmD,EAAME,cAAgBxF,EAAGyF,cAAcC,MACvCJ,EAAMK,KAAKC,mBACPP,EAAUQ,OAAS,EACnB,IAAI7F,EAAG8F,OAAOT,EAAUjD,EAAGiD,EAAUlD,IAErCgB,KAAKD,aACLW,QAAQC,KAAMuB,YAAWC,UACzBA,EAAMS,KAAO,CAACC,IACVV,EAAMW,cAAcC,UAAUF,EAAKhG,EAAGmG,MAAMC,cAGpDjD,KAAK8B,eAAejI,KAAKsI,yFC5GjD,MAAAtF,EAAA/B,EAAA,GAEAI,EAAAgI,mBAA0BrG,EAAGsG,OAC3BtD,YAAYuD,EAAeV,GACzBW,OAAQD,QAAOV,SAAQY,YAAazG,EAAG0G,YAAYC,aAG9C3D,MAAM4D,GACX,OAAOJ,MAAMK,MAAMD,sBCRvBtI,EAAAD,QAAiBJ,EAAAwB,EAAuB,iDAAA8C,EAAAC,EAAAtE,GCAxCI,EAAAD,QAAiBJ,EAAAwB,EAAuB,kDAAA8C,EAAAC,EAAAtE,GAAA,aAAAjB,OAAA6B,eAAA0D,EAAA,cAAArD,OAAA,ICAxC,MAAAa,EAAA/B,EAAA,GACA6I,EAAA7I,EAAA,GAEM8I,EAAQ9I,EAAQ,GAChB+I,EAAY/I,EAAQ,GAE1B,IAEIgJ,GACAC,MAAO,IAAIlH,EAAGmH,QAAQJ,GACtBK,UAAW,IAAIpH,EAAGmH,QAAQH,GAC1BtF,IAAK,IAAIoF,EAAAxH,QAAc,sBAUlBjB,EAAA4I,YAPTA,EAAUvF,IAAI2F,kBAAoB,EAACC,EAAMC,KACrC,IAAIC,EAAaF,EAAKG,QAAQ,eAAgB,IAE9C,OADA5D,QAAQC,IAAI,YAAcwD,OAAME,eACzBA,mFCjBX,MAAAxH,EAAA/B,EAAA,GACAyJ,EAAAzJ,EAAA,GAEAI,EAAAyE,mBAA0B9C,EAAG2H,MAE3B3E,YAAYZ,EAAWD,EAAWyF,GAChCpB,MAAMoB,GAaRzE,KAAA0E,YAAcH,EAAAzH,MAAM,GAAI,KAExBkD,KAAA2E,OAAS,MACP3E,KAAK4E,UAAY5E,KAAK4E,UAAYzH,KAAK0H,KAAmB,GAAd1H,KAAK2H,UAAe,EAChE9E,KAAK4E,UAAY5E,KAAK0E,YAAY1E,KAAK4E,WAGvC5E,KAAK+E,QAAU/E,KAAK4E,UAAY,MAlBhC5E,KAAKf,EAAIA,EACTe,KAAKhB,EAAIA,EAETgB,KAAKgF,WAAa,QAClBhF,KAAKiF,SAAW,IAEhBjF,KAAKkF,MAAQ,IAAIrI,EAAGmG,MAAM,IAAI,IAAI,KAClChD,KAAK4E,UAAY,IACjB5E,KAAK2E,0FChBT,MAAA9H,EAAA/B,EAAA,GAEAI,EAAAuE,oBAA2B5C,EAAGuF,MAC5BvC,aAAYsF,gBAACA,IACX9B,QACArD,KAAKoF,SAAS,IACdpF,KAAKqF,UAAU,IACfrF,KAAKf,EAAI,IACTe,KAAKhB,EAAI,IACTgB,KAAKkF,MAAQrI,EAAGmG,MAAMsC,IAGtBtF,KAAKqC,cAAgBxF,EAAGyF,cAAciD,QAEtCvF,KAAKwF,IAAIC,MAAMN,EAAgB,GAAIA,EAAgB,gBAAA/F,EAAAC,EAAAtE,GAAA,aAAAjB,OAAA6B,eAAA0D,EAAA,cAAArD,OAAA,ICdvD,MAAAa,EAAA/B,EAAA,GAEAyJ,EAAAzJ,EAAA,GAIAI,EAAAqE,qBAA4B1C,EAAGuF,MAO7BvC,YAAmBZ,EAAkBD,GACnCqE,QADiBrD,KAAAf,IAAkBe,KAAAhB,IAkBrCgB,KAAA0F,UAAY,CAACC,IAAmB3F,KAAK4F,OAASD,IAc9C3F,KAAA6F,KAAO,KAAM7F,KAAKwF,IAAM,IAAI3I,EAAG8F,OAAO,EAAE,IAExC3C,KAAA8F,KAAO,CAACxI,IACN0C,KAAK+F,OAASzI,EACd,MAAMyB,EAAOiB,KAAKgG,MACA,SAAd1I,IAAyB0C,KAAKwF,IAAIvG,GAAKF,GACzB,UAAdzB,IAAyB0C,KAAKwF,IAAIvG,EAAIF,GACxB,OAAdzB,IAAyB0C,KAAKwF,IAAIxG,GAAKD,GACzB,SAAdzB,IAAyB0C,KAAKwF,IAAIxG,EAAID,KArC1CiB,KAAKoF,SAAS,IACdpF,KAAKqF,UAAU,IACfrF,KAAK8C,cAAcmD,IAAIjH,EAAI,EAC3BgB,KAAK8C,cAAcmD,IAAIhH,GAAK,EAE5Be,KAAKkF,MAAQ,IAAIrI,EAAGmG,MAAM,IAAK,IAAK,KAEpChD,KAAKqC,cAAgBxF,EAAGyF,cAAc4D,OACtClG,KAAKgG,MAAQ,IAEbhG,KAAKmG,GAAG,eAAgBnG,KAAK6F,MAE7B7F,KAAK+F,OAAS,OAKhBlG,WACE,IAAIuG,EAAiBpG,KAAKqG,YAAYC,QACtC/B,EAAA1F,eAAeuH,EAAgBpG,KAAK+F,OAAQ,IAC5C,IAAIQ,EAASvG,KAAK4F,OAAOY,SAASJ,EAAenH,EAAGmH,EAAepH,GACnE0B,QAAQC,IAAI,aAAe4F,WAG7B1G,KAAKgD,EAAK4D,GACRzG,KAAK8C,cAAcC,UAAUF,EAAKhG,EAAGmG,MAAM0D,YAC3CrD,MAAMT,KAAKC,EAAK4D,oFC1CpB,MAAA5J,EAAA/B,EAAA,GACA6L,EAAA7L,EAAA,GAEM8L,EAAuBnC,IACzB,IAAIoC,EAAWC,SAASC,cAAc,UAEtC,OADAF,EAASG,YAAcvC,EAChBoC,GAoCX3L,EAAA+L,uBAA8BpK,EAAGqK,MACtBrH,aAAa4G,GAChB,MAAMU,EAAO,IAAIR,EAAAhH,KACb8G,EAAOW,UAAY,EACnB,IACA,QAEJpH,KAAKqH,IAAIF,GAETV,EAAOa,SACH,IAAIzK,EAAG0K,MACHJ,EAAKxC,OACL,QAKR,MAAM6C,EAAS,kBAlDF3K,EAAG4K,QAMpB5H,YAAY4E,EAASxF,EAAGD,EAAG0I,EAASC,EAAUf,GAC1CvD,QAYJrD,KAAA4H,KAAO,KAAM5H,KAAK6H,YAAYC,MAAMC,QAAU,QAX1C/H,KAAK6H,YAAcf,SAASC,cAAc,OAC1C/G,KAAK6H,YAAYC,MAAME,SAAW,WAClClB,SAAStE,KAAKyF,YAAYjI,KAAK6H,aAC/B7H,KAAKkI,cAAgBP,EAAQlD,GAC7BzE,KAAK6H,YAAYI,YACbjI,KAAKkI,eAETlI,KAAKkI,cAAcC,iBAAiB,QAAST,GAMjD7H,KAAKgD,GACH,IAAIuF,EAAepI,KAAKqI,QAAQD,aAAe5L,OAAO8L,iBAClDC,EAAcvI,KAAKqI,QAAQE,YAAc/L,OAAO8L,iBAChDE,EAAO3F,EAAI4F,OAAOC,WAClBC,EAAM9F,EAAI4F,OAAOG,UACjBC,EAAc7I,KAAKkI,cAAcY,YACjCC,EAAe/I,KAAKkI,cAAcc,aACtChJ,KAAK6H,YAAYC,MAAMU,QAAUA,EAAOD,EAAc,EAAIM,EAAc,MACxE7I,KAAK6H,YAAYC,MAAMa,OAASA,EAAMP,EAAe,EAAIW,EAAe,EAAI,UAsBtE,aACAtC,EAAOW,UAAY,EACnB,IACA,KACII,EAAOI,OACPnB,EAAOwC,UAAU,YAczBjJ,KAAKqH,IAAIG,oFC/EjB,MAAA3K,EAAA/B,EAAA,GAEAI,EAAAgO,uBAA8BrM,EAAGqK,MACxBrH,aAAa4G,IAEb5G,cACAA,iGCNT,MAAAhD,EAAA/B,EAAA,GACAqO,EAAArO,EAAA,IACAsO,EAAAtO,EAAA,IACA6L,EAAA7L,EAAA,GACAuO,EAAAvO,EAAA,GACAwO,EAAAxO,EAAA,GAIAyJ,EAAAzJ,EAAA,GAEAyO,EAAAzO,EAAA,GAsBM0O,EAAO,IAAIF,EAAApG,KAAK,IAAK,KAErBuG,EAAW,IAAIL,EAAAnC,SACrBuC,EAAKnC,IAAI,YAAaoC,GAEtB,MAAMC,EAAW,IAAIP,EAAAD,SAEfS,EAAQ,IAAI9M,EAAG+M,YAAYP,EAAAvF,UAAUG,UAAW,EAAG,EAAG,GAAI,IAG1D4F,EAAS,IAAIlD,EAAApH,OAAOuK,IAAaC,KAGvCF,EAAOG,WAAWL,EAAMM,UAAU,IAElCT,EAAKU,MAAMC,SAAShE,GAAG,QAAUiE,IAC/B,IAAI/M,IAAEA,GAAQ+M,EACd,GAAI/M,GAAOR,EAAGU,MAAMC,KAAK6M,EACvB3J,QAAQC,IAAI,cACZkJ,EAAOS,eACF,CACL,IAAIhN,EAAYiH,EAAAnH,eAAeC,GAC3BC,GACFuM,EAAO/D,KAAKxI,MAKlBkM,EAAKU,MAAMC,SAAShE,GAAG,OAASiE,IAC9B,IAAI/M,IAAEA,GAAQ+M,EACV9M,EAAwBiH,EAAAnH,eAAeC,GACvCC,GACFuM,EAAO/D,KAAKxI,KAIhBkM,EAAKU,MAAMC,SAAShE,GAAG,UAAYiE,IACjC1J,QAAQC,IAAI,WAAayJ,QACzB,IAAI/M,IAAEA,GAAQ+M,EACc7F,EAAAnH,eAAeC,IAEzCwM,EAAOhE,SAIX6D,EAASrC,IAAIwC,GAEbH,EAASa,OAAOC,SAASC,YAAYZ,GACrCH,EAASa,OAAOG,KAjER,GAwERlB,EAAKnC,IAAI,SAAUqC,GAEnB,IAAIjG,EAAS,IAAI5G,EAAG8N,OACpB,IAAK,IAAItN,KAAOgM,EAAAvF,UACdL,EAAOmH,YAAYvB,EAAAvF,UAAUzG,IAG/BmM,EAAK9F,MAAMD,GAAQoH,KAAK,KACtBrB,EAAKP,UAAU,UACf,IAAItD,EAAQ,IAAI4D,EAAA3J,MAAMyJ,EAAAvF,UAAUvF,KApF5BuM,GAsFAlJ,EAAU+D,EAAM/D,QACpB8H,EAASqB,WAAWnJ,GACpBiI,EAAOnE,UAAUC,GAEjBA,EAAM7D,eAAetB,QAAQwK,GAAStB,EAASrC,IAAI2D","file":"main.js","sourcesContent":[" \t// install a JSONP callback for chunk loading\n \tfunction webpackJsonpCallback(data) {\n \t\tvar chunkIds = data[0];\n \t\tvar moreModules = data[1];\n \t\tvar executeModules = data[2];\n \t\t// add \"moreModules\" to the modules object,\n \t\t// then flag all \"chunkIds\" as loaded and fire callback\n \t\tvar moduleId, chunkId, i = 0, resolves = [];\n \t\tfor(;i < chunkIds.length; i++) {\n \t\t\tchunkId = chunkIds[i];\n \t\t\tif(installedChunks[chunkId]) {\n \t\t\t\tresolves.push(installedChunks[chunkId][0]);\n \t\t\t}\n \t\t\tinstalledChunks[chunkId] = 0;\n \t\t}\n \t\tfor(moduleId in moreModules) {\n \t\t\tif(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {\n \t\t\t\tmodules[moduleId] = moreModules[moduleId];\n \t\t\t}\n \t\t}\n \t\tif(parentJsonpFunction) parentJsonpFunction(data);\n \t\twhile(resolves.length) {\n \t\t\tresolves.shift()();\n \t\t}\n\n \t\t// add entry modules from loaded chunk to deferred list\n \t\tdeferredModules.push.apply(deferredModules, executeModules || []);\n\n \t\t// run deferred modules when all chunks ready\n \t\treturn checkDeferredModules();\n \t};\n \tfunction checkDeferredModules() {\n \t\tvar result;\n \t\tfor(var i = 0; i < deferredModules.length; i++) {\n \t\t\tvar deferredModule = deferredModules[i];\n \t\t\tvar fulfilled = true;\n \t\t\tfor(var j = 1; j < deferredModule.length; j++) {\n \t\t\t\tvar depId = deferredModule[j];\n \t\t\t\tif(installedChunks[depId] !== 0) fulfilled = false;\n \t\t\t}\n \t\t\tif(fulfilled) {\n \t\t\t\tdeferredModules.splice(i--, 1);\n \t\t\t\tresult = __webpack_require__(__webpack_require__.s = deferredModule[0]);\n \t\t\t}\n \t\t}\n \t\treturn result;\n \t}\n\n \t// The module cache\n \tvar installedModules = {};\n\n \t// object to store loaded and loading chunks\n \t// undefined = chunk not loaded, null = chunk preloaded/prefetched\n \t// Promise = chunk loading, 0 = chunk loaded\n \tvar installedChunks = {\n \t\t1: 0\n \t};\n\n \tvar deferredModules = [];\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \tvar jsonpArray = window[\"webpackJsonp\"] = window[\"webpackJsonp\"] || [];\n \tvar oldJsonpFunction = jsonpArray.push.bind(jsonpArray);\n \tjsonpArray.push = webpackJsonpCallback;\n \tjsonpArray = jsonpArray.slice();\n \tfor(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);\n \tvar parentJsonpFunction = oldJsonpFunction;\n\n\n \t// add entry module to deferred list\n \tdeferredModules.push([14,0]);\n \t// run deferred modules when ready\n \treturn checkDeferredModules();\n","import * as ex from 'excalibur';\n\n// restrain a value between a min and a max\nconst clamp = (min: number, max: number) => (val: number) => {\n  let clamped = Math.min(val, max);\n  clamped = Math.max(clamped, min);\n  return clamped;\n}\n\ntype Direction = 'left' | 'right' | 'up' | 'down';\n\nconst keyToDirection = (key: number): Direction => {\n  let direction : Direction;\n  if (key === ex.Input.Keys.A || key === ex.Input.Keys.Left) {\n    direction = 'left';\n  }\n  if (key === ex.Input.Keys.D || key === ex.Input.Keys.Right) {\n    direction = 'right';\n  }\n  if (key === ex.Input.Keys.S || key === ex.Input.Keys.Down) {\n    direction = 'down';\n  }\n  if (key === ex.Input.Keys.W || key === ex.Input.Keys.Up) {\n    direction = 'up';\n  }\n  return direction;\n}\n\nconst oppositeWay = (dir: Direction): Direction => {\n  let opp: Direction;\n  switch(dir) {\n    case 'left': opp = 'right'; break;\n    case 'right': opp = 'left'; break;\n    case 'up': opp = 'down'; break;\n    case 'down': opp = 'up'; break;\n  }\n  return opp;\n}\n\n// suggested impl from https://codereview.stackexchange.com/a/169667\nconst mode = (array) => {\n  const map = new Map(); // new Map();\n\n  let maxFreq = 0;\n  let mode;\n\n  for(const item of array) {\n    let freq = map.has(item) ? map.get(item) : 0;\n    freq++;\n\n    if(freq > maxFreq) {\n      maxFreq = freq;\n      mode = item;\n    }\n    \n    map.set(item, freq);\n  }\n\n  return mode;\n};\n\nconst addScalarToVec = (vec: ex.Vector, direction: Direction, step: number) => {\n  switch (direction) {\n    case 'up':\n      vec.y -= step;\n      break;\n    case 'down':\n      vec.y += step;\n      break;\n    case 'left':\n      vec.x -= step;\n      break;\n    case 'right':\n      vec.x += step;\n      break;\n  }\n}\n\nconst dirFromVec = (vec: ex.Vector): Direction => {\n  let {x,y} = vec;\n  if (Math.abs(x) > Math.abs(y)) {\n    return x > 0 ? 'right' : 'left';\n  } else {\n    return y > 0 ? 'down' : 'up';\n  }\n}\n\nexport {\n  clamp,\n  Direction,\n  keyToDirection,\n  addScalarToVec,\n  dirFromVec,\n  oppositeWay,\n  mode\n};\n","import { Player } from './player/player';\nimport { Enemy } from './enemy/enemy';\nimport { Logo } from './brand/logo';\nexport { Player, Enemy, Logo };\n","import * as ex from 'excalibur';\r\nimport TiledResource from '@excaliburjs/excalibur-tiled';\r\n\r\n// hmmmm (maybe more like a world-factory?)\r\nclass World {\r\n    tileMap: ex.TileMap\r\n    blockingActors: Array<ex.Actor>\r\n\r\n    constructor(public mapResource: TiledResource, public debugBoxes: boolean) {\r\n        this._processTiledMap();\r\n    }\r\n\r\n    entityAt(x: number, y: number) {\r\n        return { nothing: 'to see here' };\r\n         //let cell = this._map.getCellByPoint(interactionPos.x, interactionPos.y);\r\n    //console.log(\r\n    //  \"WOULD ATTEMPT TO INTERACT IN DIRECTION w/ CELL: \", \r\n    //  { dir: this.facing, cell }\r\n    //);\r\n    //if (cell.sprites.length > 1) {\r\n    //  console.log(\"goodness, there is something there!!!\", cell.sprites);\r\n    //  // we need to build some kind of object model we can deref\r\n    //  // all we'll have is a spriteId...\r\n    //}\r\n\r\n    }\r\n\r\n    _processTiledMap() {\r\n        let _mapRes = this.mapResource; // Resources.Map;\r\n        let terrainMeta = {};\r\n        let spriteTerrainById = {};\r\n        let spriteCollisionById = {};\r\n\r\n        _mapRes.data.tilesets.forEach((ts) => {\r\n            console.log(\"TILESET\", { ts });\r\n            if (ts.terrains) {\r\n                ts.terrains.forEach(terrain => {\r\n                    if (terrain.properties) {\r\n                        terrainMeta[terrain.tile] = terrain.properties.reduce((acc, curr) => {\r\n                            let { name, value } = curr;\r\n                            return (<any>Object).assign(acc, { [name]: value })\r\n                        }, {});\r\n\r\n                        terrainMeta[terrain.tile].terrainName = terrain.name;\r\n\r\n                        console.log(\r\n                            `terrain ${terrain.name} (${terrain.tile}) has props: `,\r\n                            terrainMeta[terrain.tile]\r\n                        )\r\n                    }\r\n                });\r\n\r\n                spriteTerrainById = ts.tiles.reduce((acc, curr) => {\r\n                    let { terrain, id } = curr;\r\n                    const solid = terrain.some(tile => terrainMeta[tile] && terrainMeta[tile].solid); // : false);\r\n                    let terrainTile = { solid };\r\n                    // console.log(`terrain set for ${id}`, { solid }, terrain.map(tile => terrainMeta[tile]))\r\n                    return (<any>Object).assign(acc, { [id]: terrainTile });\r\n                }, {});\r\n\r\n                // console.log({ terrainMeta, spriteTerrainById });\r\n            }\r\n\r\n            // console.log({tiles: ts.tiles})\r\n            if (ts.tiles && ts.tiles.some(tile => tile.objectgroup)) {\r\n                // should also grab item/obj metadata here?\r\n                // console.log(\"todo -- extract obj group collision frame?\");\r\n                //debugger;\r\n                spriteCollisionById = ts.tiles.reduce((acc, curr) => {\r\n                    let { objectgroup, id } = curr;\r\n                    if (objectgroup && objectgroup.objects && objectgroup.objects.length) {\r\n                        return (<any>Object).assign(acc, { [id]: objectgroup.objects[0] });\r\n                    } else {\r\n                        return acc;\r\n                    }\r\n                }, {});\r\n\r\n                // console.log({ spriteCollisionById });\r\n\r\n            }\r\n        });\r\n\r\n        this.tileMap = _mapRes.getTileMap();\r\n\r\n        this.blockingActors = [];\r\n\r\n        this.tileMap.data.forEach((cell: ex.Cell) => {\r\n\r\n            if (cell.sprites[0]) {\r\n                let tile = spriteTerrainById[cell.sprites[0].spriteId];\r\n                cell = Object.assign(cell, tile);\r\n\r\n                // we have another sprite, maybe a thing to build a box for?\r\n                if (cell.sprites[1]) {\r\n                    const collision = spriteCollisionById[cell.sprites[1].spriteId];\r\n                    if (collision) {\r\n                        let block = new ex.Actor(cell.x, cell.y, 32, 32);\r\n                        block.collisionType = ex.CollisionType.Fixed;\r\n                        block.body.useCircleCollision(\r\n                            collision.height / 2, // / 1.2,\r\n                            new ex.Vector(collision.x, collision.y)\r\n                        );\r\n                        if (this.debugBoxes) { // config.debugBoundingBoxes) {\r\n                            console.log({ collision, block });\r\n                            block.draw = (ctx) => {\r\n                                block.collisionArea.debugDraw(ctx, ex.Color.LightGray);\r\n                            }\r\n                        }\r\n                        this.blockingActors.push(block);\r\n                    }\r\n                    // add it to the level...\r\n                    // levelOne.add(block);\r\n                }\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nexport { World };","import * as ex from 'excalibur';\n\nexport class Game extends ex.Engine {\n  constructor(width: number, height: number) {\n    super({ width, height, displayMode: ex.DisplayMode.FullScreen });\n  }\n\n  public start(loader: ex.Loader) {\n    return super.start(loader);\n  }\n}\n","module.exports = __webpack_public_path__ + \"b9b405c74e06d77b7a88f04d6d3ae5cd.png\";","module.exports = __webpack_public_path__ + \"94754f62e0ae4d23d386e246f5e0cb6e.png\";","import * as ex from 'excalibur';\nimport TiledResource from '@excaliburjs/excalibur-tiled';\n\nconst sword = require('./images/sword.png');\nconst spritemap = require('./images/spritemap.png')\n\nlet mapName = 'solidity';\n\nlet Resources = {\n    Sword: new ex.Texture(sword),\n    Spritemap: new ex.Texture(spritemap), // SpriteSheet(spritemap)\n    Map: new TiledResource(`map/${mapName}.json`)\n}\n\nResources.Map.imagePathAccessor = (path, tileset) => {\n    let actualPath = path.replace(/^(?:\\.\\.\\/)+/, \"\");\n    console.log(\"LOAD IMG\", { path, actualPath });\n    return actualPath;\n    // return \"/assets/\" + path;\n}\n\nexport { Resources }\n","import * as ex from 'excalibur';\nimport { clamp } from '../../util';\n\nexport class Logo extends ex.Label {\n  intensity: number;\n  constructor(x: number, y: number, message: string) {\n    super(message);\n    //this.setWidth(200);\n    this.x = x; // (game.drawWidth / 2) - 200;\n    this.y = y; // 400;\n\n    this.fontFamily = 'Arial';\n    this.fontSize = 256;\n\n    this.color = new ex.Color(255,255,255);\n    this.intensity = 150;\n    this.strobe();\n  }\n\n  strobeClamp = clamp(50, 200);\n\n  strobe = () => {\n    this.intensity = this.intensity + Math.ceil(Math.random()*16) - 8;\n    this.intensity = this.strobeClamp(this.intensity);\n    // console.log(\"strobe\", { intensity: this.intensity });\n\n    this.opacity = this.intensity / 255;\n  }\n}\n","import * as ex from 'excalibur';\n\nexport class Enemy extends ex.Actor {\n  constructor({initialVelocity}:{initialVelocity: [number,number]}) {\n    super();\n    this.setWidth(15);\n    this.setHeight(15);\n    this.x = 200;\n    this.y = 200;\n    this.color = ex.Color.Red; // new ex.Color(255, 0, 255);\n\n    // we are collision-aware!\n    this.collisionType = ex.CollisionType.Passive;\n\n    this.vel.setTo(initialVelocity[0], initialVelocity[1]); // 100,140);\n  }\n\n  // draw(ctx: CanvasRenderingContext2D) {\n  //   ctx.fillStyle = this.color.toString()\n  //   ctx.beginPath()\n  //   ctx.arc(this.pos.x, this.pos.y, 10, 0, Math.PI * 2)\n  //   ctx.closePath()\n  //   ctx.fill()\n  // }\n}","import * as ex from 'excalibur';\nimport { Game } from '../../game';\nimport { Direction, oppositeWay, addScalarToVec, dirFromVec } from '../../util';\nimport { Vector } from 'excalibur';\nimport { World } from '../../world';\n\nexport class Player extends ex.Actor {\n  speed: number\n  facing: Direction\n  _world: World\n  // _map: ex.TileMap\n  blocked: { [key: string]: boolean }\n\n  constructor(public x: number, public y: number) { //game: Game) {\n    super();\n\n    this.setWidth(20);\n    this.setHeight(10);\n    this.collisionArea.pos.y = 8;\n    this.collisionArea.pos.x = -4;\n\n    this.color = new ex.Color(255, 255, 255);\n\n    this.collisionType = ex.CollisionType.Active;\n    this.speed = 128; // 4 cells/sec?\n\n    this.on('precollision', this.halt);\n\n    this.facing = 'down';\n  }\n\n  wireWorld = (world: World) => { this._world = world; }\n\n  interact() {\n    let interactionPos = this.getCenter().clone();\n    addScalarToVec(interactionPos, this.facing, 32);\n    let entity = this._world.entityAt(interactionPos.x, interactionPos.y);\n    console.log(\"ENTITY IS\", { entity });\n  }\n\n  draw(ctx, engine) {\n    this.collisionArea.debugDraw(ctx, ex.Color.Chartreuse);\n    super.draw(ctx, engine);\n  }\n\n  halt = () => this.vel = new ex.Vector(0,0);\n\n  move = (direction: Direction) => {\n    this.facing = direction;\n    const step = this.speed; // * 32;\n    if (direction === 'left')  { this.vel.x = -step; }\n    if (direction === 'right') { this.vel.x = step; }\n    if (direction === 'up')    { this.vel.y = -step; }\n    if (direction === 'down')  { this.vel.y = step; }\n  }\n}\n","import * as ex from 'excalibur';\r\nimport { Logo } from '../../actors';\r\n\r\nconst simpleButtonFactory = (message: string) => {\r\n    let myButton = document.createElement('button');\r\n    myButton.textContent = message; // 'The best button';\r\n    return myButton;\r\n};\r\n\r\nclass Button extends ex.UIActor {\r\n    rootElement: HTMLElement\r\n    buttonElement: HTMLElement\r\n    // onClick: Function\r\n    // _engine: ex.Engine\r\n\r\n    constructor(message, x, y, onClick, factory = simpleButtonFactory) {\r\n        super();\r\n        this.rootElement = document.createElement('div');\r\n        this.rootElement.style.position = 'absolute';\r\n        document.body.appendChild(this.rootElement)\r\n        this.buttonElement = factory(message);\r\n        this.rootElement.appendChild(\r\n            this.buttonElement\r\n        );\r\n        this.buttonElement.addEventListener('click', onClick);\r\n        // this.onClick = onClick;\r\n    }\r\n\r\n    hide = () => this.rootElement.style.display = 'none';\r\n\r\n    draw(ctx: CanvasRenderingContext2D) {\r\n      let canvasHeight = this._engine.canvasHeight / window.devicePixelRatio;\r\n      let canvasWidth = this._engine.canvasWidth / window.devicePixelRatio;\r\n      let left = ctx.canvas.offsetLeft;\r\n      let top = ctx.canvas.offsetTop;\r\n      let buttonWidth = this.buttonElement.clientWidth;\r\n      let buttonHeight = this.buttonElement.clientHeight;\r\n      this.rootElement.style.left = `${left + canvasWidth / 2 - buttonWidth / 2}px`;\r\n      this.rootElement.style.top = `${top + canvasHeight / 2 - buttonHeight / 2 + 100}px`;\r\n    }\r\n}\r\n\r\nexport class MainMenu extends ex.Scene {\r\n    public onInitialize(engine: ex.Engine) {\r\n        const logo = new Logo(\r\n            engine.drawWidth / 2,\r\n            400,\r\n            'Isle'\r\n        );\r\n        this.add(logo);\r\n\r\n        engine.addTimer(\r\n            new ex.Timer(\r\n                logo.strobe,\r\n                20,\r\n                true\r\n            )\r\n        )\r\n                \r\n        const playMe = new Button(\r\n            'start game',\r\n            engine.drawWidth / 2,\r\n            400,\r\n            () => {\r\n                playMe.hide()\r\n                engine.goToScene('wander');\r\n            }\r\n        ); \r\n        // new ex.Label(\r\n        //     'start game',\r\n        //     engine.drawWidth / 2,\r\n        //     400,\r\n        //     'Arial'\r\n        // )\r\n        // engine.input.pointers.primary.on('mousedown', () => {\r\n        //     console.log(\"CLICK\")\r\n        //   engine.goToScene('wander')\r\n        // });\r\n\r\n        this.add(playMe);\r\n    }\r\n}","import * as ex from 'excalibur';\n\nexport class LevelOne extends ex.Scene {\n  public onInitialize(engine: ex.Engine) {\n  }\n  public onActivate() {}\n  public onDeactivate() {}\n}\n","import * as ex from 'excalibur';\nimport { LevelOne } from './scenes/level-one/level-one';\nimport { MainMenu } from './scenes/main-menu/main-menu';\nimport { Player, Enemy, Logo } from './actors';\nimport { Resources } from './resources';\nimport { Game } from './game';\n\nimport { Isle } from './models';\n\nimport { keyToDirection, Direction, mode } from './util';\nimport { TileMap } from 'excalibur';\nimport { World } from './world';\n\nconst config = {\n  debugCells: false,\n  debugBoundingBoxes: true,\n  zoom: 3.0 //.0\n}\n\n\n// Islands are either from before or for after humankind. (gd)\n\n/* \nDreaming of islands — whether with joy or in fear, it \ndoesn't matter — is dreaming of pulling away, of being already separate, far \nfrom any continent, of being lost and alone — or it is dreaming of starting from \nscratch, recreating, beginning anew. (gd)\n*/\n\n// An island doesn't stop being deserted simply because it is inhabited. (gd)\n\n// const island = new Isle();\n\nconst game = new Game(800, 600);\n\nconst mainMenu = new MainMenu();\ngame.add('main-menu', mainMenu);\n\nconst levelOne = new LevelOne();\n\nconst sheet = new ex.SpriteSheet(Resources.Spritemap, 8, 8, 32, 32);\n\nconst startX = 4, startY = 4;\nconst player = new Player(startX * 32, startY * 32);\n\n\nplayer.addDrawing(sheet.getSprite(7));\n\ngame.input.keyboard.on('press', (evt: ex.Input.KeyEvent) => {\n  let { key } = evt;\n  if (key == ex.Input.Keys.E) {\n    console.log(\"INTERACT?!\");\n    player.interact(); //tileMap);\n  } else {\n    let direction = keyToDirection(key);\n    if (direction) {\n      player.move(direction);\n    }\n  }\n})\n\ngame.input.keyboard.on('hold', (evt: ex.Input.KeyEvent) => {\n  let { key } = evt;\n  let direction : Direction = keyToDirection(key);\n  if (direction) {\n    player.move(direction);\n  }\n})\n\ngame.input.keyboard.on('release', (evt: ex.Input.KeyEvent) => {\n  console.log(\"RELEASE\", { evt });\n  let { key } = evt;\n  let direction : Direction = keyToDirection(key);\n  if (direction) {\n    player.halt(); //direction);\n  }\n});\n\nlevelOne.add(player);\n\nlevelOne.camera.strategy.lockToActor(player);\nlevelOne.camera.zoom(config.zoom);\n\n// game.input.pointers.primary.on('move', (e: ex.Input.PointerEvent) => {\n//   console.log(\"POINTER MOVE\", e.pos);\n// });\n\n\ngame.add('wander', levelOne);\n\nlet loader = new ex.Loader();\nfor (let key in Resources) {\n  loader.addResource(Resources[key]);\n}\n\ngame.start(loader).then(() => {\n  game.goToScene('wander');\n  let world = new World(Resources.Map, config.debugBoundingBoxes);\n\n  let tileMap = world.tileMap;\n  levelOne.addTileMap(tileMap);\n  player.wireWorld(world); //wireMap(tileMap);\n\n  world.blockingActors.forEach(actor => levelOne.add(actor));\n\n  if (config.debugCells) {\n    let lastViewedCell = null;\n    game.input.pointers.primary.on('move', (e: ex.Input.PointerEvent) => {\n      let { pos } = e;\n      let cell = tileMap.getCellByPoint(pos.x, pos.y);\n      if (cell && lastViewedCell != cell) {\n        console.debug(\"CELL\", { pos, spriteId: cell.sprites[0].spriteId }, cell);\n        lastViewedCell = cell;\n      }\n    });\n  }\n\n});\n\n\n"],"sourceRoot":""}