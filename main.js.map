{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/util.ts","webpack:///./src/resources.ts","webpack:///./src/world.ts","webpack:///./src/basic_sprites.ts","webpack:///./src/actors/hud.ts","webpack:///./src/actors/brand/logo.ts","webpack:///./src/actors/player/player.ts","webpack:///./src/actors/index.ts","webpack:///./src/actors/thing.ts","webpack:///./src/models.ts","webpack:///./src/game.ts","webpack:///./src/sounds/science.mp3","webpack:///./src/sounds/finemist.mp3","webpack:///./src/images/campfire.png","webpack:///./src/images/palm.png","webpack:///./src/images/greatpalm.png","webpack:///./src/images/miranda.png","webpack:///./src/images/alex.png","webpack:///./src/images/basic-sprites.png","webpack:///./src/images/spritemap.png","webpack:///./src/scenes/level-one/level-one.ts","webpack:///./src/index.ts"],"names":["webpackJsonpCallback","data","moduleId","chunkId","chunkIds","moreModules","executeModules","i","resolves","length","installedChunks","push","Object","prototype","hasOwnProperty","call","modules","parentJsonpFunction","shift","deferredModules","apply","checkDeferredModules","result","deferredModule","fulfilled","j","depId","splice","__webpack_require__","s","installedModules","1","exports","module","l","m","c","d","name","getter","o","defineProperty","configurable","enumerable","get","r","value","n","__esModule","default","object","property","p","jsonpArray","window","webpackJsonp","oldJsonpFunction","bind","slice","ex","coinflip","Math","random","clamp","min","max","val","clamped","keyToDirection","key","direction","Input","Keys","A","Left","D","Right","S","Down","W","Up","oppositeWay","dir","opp","mode","array","map","Map","maxFreq","item","freq","has","set","addScalarToVec","vec","step","y","x","dirFromVec","abs","e","t","excalibur_tiled_1","spritemap","basicSprites","alex","miranda","greatPalm","palm","campfire","fineMist","science","Resources","Alex","Texture","Miranda","Spritemap","BasicSprites","GreatPalm","Palm","Campfire","FineMist","Sound","Science","imagePathAccessor","path","tileset","actualPath","replace","console","log","models_1","thing_1","resources_1","actors_1","Material","Wood","Stone","World","[object Object]","scene","hud","config","this","island","Isle","itemKinds","playerCharacterMeta","sprites","SpriteSheet","primary","debugBoxes","debugBoundingBoxes","stocks","wood","stone","it","_primaryCharacter","equipped","material","count","destroy","updateInventory","cell","Item","description","kind","activate","Player","currentPc","message","__isle_pc","move","halt","makePrimaryCharacter","tileMap","getCellByPoint","__isle_item","entity","size","Array","keys","getCellByIndex","index","cols","actor","kill","thing","Thing","drawing","addDrawing","constructCollisionArea","collision","theItem","buildItem","items","add","setZIndex","computeZ","pcMeta","pc","wireWorld","camera","strategy","lockToActor","zoom","mapResource","_mapRes","terrainMeta","spriteTerrainById","spriteCollisionById","characterById","itemKindBySpriteId","tilesets","forEach","ts","terrains","terrain","properties","tile","reduce","acc","curr","assign","terrainName","tiles","id","terrainTile","solid","every","some","objectgroup","objects","prop","currMeta","warn","find","getTileMap","spriteId","spriteSheetKey","removeSprite","characterName","createPlayableCharacter","sheet","_spriteSheets","cx","cy","cellToRemove","newSprite","getSprite","spawn","asSprite","BasicSpriteMap","chestClosed","chestOpen","world_1","basic_sprites_1","inventorySprites","Hud","UIActor","game","super","canvasWidth","canvasHeight","initialize","output","Label","color","Color","White","fontSize","setWidth","textAlign","TextAlign","Center","brand","Azure","inventory","stockLines","yOff","label","ctx","delta","draw","sprite","clone","scale","Vector","line","children","child","remove","text","opacity","actions","clearActions","fade","util_1","Logo","strobeClamp","strobe","intensity","ceil","fontFamily","Actor","spriteSheet","world","_world","vel","facing","speed","collisionArea","body","useCircleCollision","collisionType","CollisionType","Active","playerSpeed","interacting","down","up","right","left","pos","interactionPos","entityAndCell","entityAt","interact","getCenter","engine","littleDrawing","debugDraw","Chartreuse","fillRect","currentDrawing","update","player_1","logo_1","zOff","LightGray","Fixed","ellipse","center","width","height","polygon","vecs","usePolygonCollision","useBoxCollision","setHeight","PreventCollision","itemClasses","Chest","state","open","setDrawing","hp","damage","baseCells","offset","base","logKind","BigCampfire","WoodLog","collect","WoodLogStack","Handaxe","equip","Game","Engine","displayMode","DisplayMode","FullScreen","setup","loader","Loader","addResource","start","then","kick","LevelOne","Scene","level_one_1","game_1","hud_1","debugCells","bgMusic","levelOne","input","keyboard","on","evt","currentScene","player","primaryCharacter","E","interaction","describe","processTiledMap","addTileMap","goToScene","theme","setTimeout","isLoaded","play"],"mappings":"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","file":"main.js","sourcesContent":[" \t// install a JSONP callback for chunk loading\n \tfunction webpackJsonpCallback(data) {\n \t\tvar chunkIds = data[0];\n \t\tvar moreModules = data[1];\n \t\tvar executeModules = data[2];\n \t\t// add \"moreModules\" to the modules object,\n \t\t// then flag all \"chunkIds\" as loaded and fire callback\n \t\tvar moduleId, chunkId, i = 0, resolves = [];\n \t\tfor(;i < chunkIds.length; i++) {\n \t\t\tchunkId = chunkIds[i];\n \t\t\tif(installedChunks[chunkId]) {\n \t\t\t\tresolves.push(installedChunks[chunkId][0]);\n \t\t\t}\n \t\t\tinstalledChunks[chunkId] = 0;\n \t\t}\n \t\tfor(moduleId in moreModules) {\n \t\t\tif(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {\n \t\t\t\tmodules[moduleId] = moreModules[moduleId];\n \t\t\t}\n \t\t}\n \t\tif(parentJsonpFunction) parentJsonpFunction(data);\n \t\twhile(resolves.length) {\n \t\t\tresolves.shift()();\n \t\t}\n\n \t\t// add entry modules from loaded chunk to deferred list\n \t\tdeferredModules.push.apply(deferredModules, executeModules || []);\n\n \t\t// run deferred modules when all chunks ready\n \t\treturn checkDeferredModules();\n \t};\n \tfunction checkDeferredModules() {\n \t\tvar result;\n \t\tfor(var i = 0; i < deferredModules.length; i++) {\n \t\t\tvar deferredModule = deferredModules[i];\n \t\t\tvar fulfilled = true;\n \t\t\tfor(var j = 1; j < deferredModule.length; j++) {\n \t\t\t\tvar depId = deferredModule[j];\n \t\t\t\tif(installedChunks[depId] !== 0) fulfilled = false;\n \t\t\t}\n \t\t\tif(fulfilled) {\n \t\t\t\tdeferredModules.splice(i--, 1);\n \t\t\t\tresult = __webpack_require__(__webpack_require__.s = deferredModule[0]);\n \t\t\t}\n \t\t}\n \t\treturn result;\n \t}\n\n \t// The module cache\n \tvar installedModules = {};\n\n \t// object to store loaded and loading chunks\n \t// undefined = chunk not loaded, null = chunk preloaded/prefetched\n \t// Promise = chunk loading, 0 = chunk loaded\n \tvar installedChunks = {\n \t\t1: 0\n \t};\n\n \tvar deferredModules = [];\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \tvar jsonpArray = window[\"webpackJsonp\"] = window[\"webpackJsonp\"] || [];\n \tvar oldJsonpFunction = jsonpArray.push.bind(jsonpArray);\n \tjsonpArray.push = webpackJsonpCallback;\n \tjsonpArray = jsonpArray.slice();\n \tfor(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);\n \tvar parentJsonpFunction = oldJsonpFunction;\n\n\n \t// add entry module to deferred list\n \tdeferredModules.push([23,0]);\n \t// run deferred modules when ready\n \treturn checkDeferredModules();\n","import * as ex from 'excalibur';\n\n// tiny probability handler...\nconst coinflip = () => Math.random() > 0.5\n\n// restrain a value between a min and a max\nconst clamp = (min: number, max: number) => (val: number) => {\n  let clamped = Math.min(val, max);\n  clamped = Math.max(clamped, min);\n  return clamped;\n}\n\ntype Direction = 'left' | 'right' | 'up' | 'down';\n\nconst keyToDirection = (key: number): Direction => {\n  let direction : Direction;\n  if (key === ex.Input.Keys.A || key === ex.Input.Keys.Left) {\n    direction = 'left';\n  }\n  if (key === ex.Input.Keys.D || key === ex.Input.Keys.Right) {\n    direction = 'right';\n  }\n  if (key === ex.Input.Keys.S || key === ex.Input.Keys.Down) {\n    direction = 'down';\n  }\n  if (key === ex.Input.Keys.W || key === ex.Input.Keys.Up) {\n    direction = 'up';\n  }\n  return direction;\n}\n\nconst oppositeWay = (dir: Direction): Direction => {\n  let opp: Direction;\n  switch(dir) {\n    case 'left': opp = 'right'; break;\n    case 'right': opp = 'left'; break;\n    case 'up': opp = 'down'; break;\n    case 'down': opp = 'up'; break;\n  }\n  return opp;\n}\n\n// suggested impl from https://codereview.stackexchange.com/a/169667\nconst mode = (array) => {\n  const map = new Map(); // new Map();\n\n  let maxFreq = 0;\n  let mode;\n\n  for(const item of array) {\n    let freq = map.has(item) ? map.get(item) : 0;\n    freq++;\n\n    if(freq > maxFreq) {\n      maxFreq = freq;\n      mode = item;\n    }\n    \n    map.set(item, freq);\n  }\n\n  return mode;\n};\n\nconst addScalarToVec = (vec: ex.Vector, direction: Direction, step: number) => {\n  switch (direction) {\n    case 'up':\n      vec.y -= step;\n      break;\n    case 'down':\n      vec.y += step;\n      break;\n    case 'left':\n      vec.x -= step;\n      break;\n    case 'right':\n      vec.x += step;\n      break;\n  }\n}\n\nconst dirFromVec = (vec: ex.Vector): Direction => {\n  let {x,y} = vec;\n  if (Math.abs(x) > Math.abs(y)) {\n    return x > 0 ? 'right' : 'left';\n  } else {\n    return y > 0 ? 'down' : 'up';\n  }\n}\n\nexport {\n  clamp,\n  Direction,\n  keyToDirection,\n  addScalarToVec,\n  dirFromVec,\n  oppositeWay,\n  mode,\n  coinflip\n};\n","import * as ex from 'excalibur';\r\nimport TiledResource from '@excaliburjs/excalibur-tiled';\r\n\r\n// const sword = require('./images/sword.png');\r\nconst spritemap = require('./images/spritemap.png')\r\nconst basicSprites = require('./images/basic-sprites.png')\r\n\r\nconst alex = require('./images/alex.png')\r\nconst miranda = require('./images/miranda.png')\r\n\r\nconst greatPalm = require('./images/greatpalm.png')\r\nconst palm = require('./images/palm.png')\r\nconst campfire = require('./images/campfire.png')\r\n\r\nconst fineMist = require('./sounds/finemist.mp3')\r\nconst science = require('./sounds/science.mp3')\r\n\r\nlet mapName = 'solidity';\r\n\r\nlet Resources = {\r\n    // images\r\n    Alex: new ex.Texture(alex),\r\n    Miranda: new ex.Texture(miranda),\r\n\r\n    //Sword: new ex.Texture(sword),\r\n    Spritemap: new ex.Texture(spritemap), // SpriteSheet(spritemap)\r\n    BasicSprites: new ex.Texture(basicSprites),\r\n    Map: new TiledResource(`map/${mapName}.json`),\r\n    GreatPalm: new ex.Texture(greatPalm),\r\n    Palm: new ex.Texture(palm),\r\n    Campfire: new ex.Texture(campfire),\r\n\r\n    // music\r\n    FineMist: new ex.Sound(fineMist),\r\n    Science: new ex.Sound(science)\r\n}\r\n\r\nResources.Map.imagePathAccessor = (path, tileset) => {\r\n    let actualPath = path.replace(/^(?:\\.\\.\\/)+/, \"\");\r\n    console.log(\"LOAD IMG\", { path, actualPath });\r\n    return actualPath;\r\n    // return \"/assets/\" + path;\r\n}\r\n\r\nexport { Resources }\r\n","import * as ex from 'excalibur';\r\nimport { TiledResource } from '@excaliburjs/excalibur-tiled';\r\nimport { Isle, Item, ItemKind, buildItem } from './models';\r\nimport { Thing } from './actors/thing';\r\nimport { Resources } from './resources';\r\nimport { Player } from './actors';\r\nimport { GameConfig } from './game_config';\r\nimport { Hud } from './actors/hud';\r\n// import { GameConfig } from './game_config';\r\n// import { SpriteSheet, Sprite } from 'excalibur';\r\n\r\ntype Entity = Item | Player\r\n\r\nexport enum Material {\r\n    Wood = 'wood',\r\n    Stone = 'stone',\r\n    // Strand, Ivy, Thread, Rope = 'rope'\r\n}\r\n\r\ntype Stocks = { [key in Material]: number }\r\n\r\n// hmmmm (maybe more like a world-factory? [now def more world-ly...])\r\nclass World {\r\n    island: Isle\r\n    tileMap: ex.TileMap\r\n    itemKinds: { [key: string]: ItemKind }\r\n    playerCharacterMeta: { [name: string]: {\r\n        sprites: ex.SpriteSheet,\r\n        primary: boolean\r\n    }}\r\n    debugBoxes: boolean\r\n\r\n    stocks: Stocks\r\n\r\n    // blockingActors: Array<ex.Actor>\r\n    // itemKindBySpriteId: { [spriteId: number]: ItemKind }\r\n\r\n    constructor(\r\n        //public mapResource: TiledResource,\r\n        //public debugBoxes: boolean,\r\n        public scene: ex.Scene,\r\n        public hud: Hud,\r\n        public config: GameConfig\r\n    ) {\r\n        this.island = new Isle('sorna');\r\n        this.itemKinds = {};\r\n        this.playerCharacterMeta = {\r\n            Alex: {\r\n                sprites: new ex.SpriteSheet(Resources.Alex, 4, 1, 32, 64),\r\n                primary: false\r\n            },\r\n            Miranda: {\r\n                sprites: new ex.SpriteSheet(Resources.Miranda, 4, 1, 32, 64),\r\n                primary: true\r\n            }\r\n        }\r\n        this.debugBoxes = config.debugBoundingBoxes;\r\n        //this._processTiledMap();\r\n\r\n        this.stocks = {\r\n            wood: 0,\r\n            stone: 0,\r\n        }\r\n    }\r\n\r\n    equip(it: Item) {\r\n        this._primaryCharacter.equipped = it;\r\n    }\r\n\r\n    collect(it: Item, material: Material, count: number = 1) {\r\n      console.log(\"WOULD COLLECT ITEM\", { it, material, count });\r\n      this.destroy(it);\r\n      this.stocks[material] += count;\r\n      this.hud.updateInventory(this.stocks);\r\n      console.log(\"AFTER COLLECT ITEM\", { it, material, count, stocks: this.stocks });\r\n    }\r\n    // need to remove it from the cell...\r\n    //\r\n\r\n    interact(it: Entity, cell: ex.Cell): string {\r\n        if (it instanceof Item) {\r\n            // console.log(\"WOULD INTERACT WITH ITEM\", { it });\r\n            let { name, description } = it.kind;\r\n            return it.activate() || description;\r\n        } else if (it instanceof Player) {\r\n            // console.log(\"WOULD SWAP PLAYER CHARACTER!!!\", {it});\r\n            let currentPc = this._primaryCharacter;\r\n            let message = `nice to see you again, ${currentPc.name}`;\r\n            cell['__isle_pc'] = currentPc;\r\n            currentPc.x = cell.x\r\n            currentPc.y = cell.y-16\r\n            currentPc.move('down');\r\n            currentPc.halt();\r\n            //cell.removeSprite(cell.sprites[1]);\r\n            // todo remove new pc from cell, add old pc TO that cell...\r\n            this.makePrimaryCharacter(it);\r\n            return message;\r\n        }\r\n    }\r\n\r\n    entityAt(x: number, y: number): { entity: Entity, cell: ex.Cell } {\r\n        let cell = this.tileMap.getCellByPoint(x, y);\r\n        // console.log(\"looking for entity at \", { x, y, cell });\r\n        if (cell) {\r\n            if (cell['__isle_item']) {\r\n                let it: Item = cell['__isle_item'];\r\n                return { entity: it, cell };\r\n            } else if (cell['__isle_pc']) {\r\n                let pc: Player = cell['__isle_pc'];\r\n                return { entity: pc, cell };\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    destroy(it: Item) {\r\n        console.log(\"DESTROY\", {it});\r\n        let { kind, cell } = it;\r\n        let { size } = kind;\r\n        for (const x of Array(size).keys()) {\r\n            for (const y of Array(size).keys()) {\r\n                let cellToMark = this.tileMap.getCellByIndex(cell.index + x + (y * this.tileMap.cols));\r\n                // remove item from list...\r\n                cellToMark['__isle_item'] = null;\r\n            }\r\n        }\r\n\r\n        it.actor.kill();\r\n\r\n        return true;\r\n    }\r\n\r\n    spawn(kind: ItemKind, cell: ex.Cell): Thing {\r\n        let { size } = kind;\r\n        size = size || 1;\r\n\r\n        let x = cell.x + 16 * size;\r\n        let y = cell.y + 16 * size;\r\n        let thing: Thing = new Thing(x, y, size, size, this.debugBoxes);\r\n\r\n        if (kind.drawing) {\r\n          thing.addDrawing(kind.drawing);\r\n        }\r\n\r\n        thing.constructCollisionArea(kind.collision);\r\n\r\n        let theItem: Item = buildItem(kind, thing, cell, this);\r\n        this.island.items.push(theItem);\r\n        for (const x of Array(size).keys()) {\r\n            for (const y of Array(size).keys()) {\r\n                let cellToMark = this.tileMap.getCellByIndex(cell.index + x + (y * this.tileMap.cols));\r\n                cellToMark['__isle_item'] = theItem;\r\n            }\r\n        }\r\n\r\n        this.scene.add(thing);\r\n        thing.setZIndex(thing.computeZ());\r\n        // console.log(`SPAWN ${kind.name}`, { kind, thing });\r\n        return thing;\r\n    }\r\n\r\n    _primaryCharacter: Player\r\n    createPlayableCharacter(name: string, cell: ex.Cell) { // x: number, y: number) {\r\n        let pcMeta = this.playerCharacterMeta[name];\r\n        if (pcMeta) {\r\n            let { x, y } = cell;\r\n            console.log(\"CREATE PC\", { pcMeta });\r\n            const pc = new Player(name, x, y, this.config, pcMeta.sprites);\r\n            pc.wireWorld(this);\r\n            this.scene.add(pc);\r\n            cell['__isle_pc'] = pc;\r\n            if (pcMeta.primary) {\r\n                this.makePrimaryCharacter(pc);\r\n            } else {\r\n                console.log(\"PC is not primary\", { pcMeta });\r\n            }\r\n        }\r\n    }\r\n\r\n    makePrimaryCharacter(pc: Player) {\r\n        console.log(\"CREATE PRIMARY PC!!!\", { pc });\r\n        this._primaryCharacter = pc;\r\n        pc.move('down');\r\n        pc.halt();\r\n        //pc.facing = 'down';\r\n        // fix cam!\r\n        this.scene.camera.strategy.lockToActor(pc);\r\n        this.scene.camera.zoom(this.config.zoom);\r\n    }\r\n\r\n    primaryCharacter() {\r\n        return this._primaryCharacter;\r\n    }\r\n\r\n    processTiledMap(mapResource: TiledResource) {\r\n        let _mapRes: TiledResource = mapResource; // Resources.Map;\r\n        let terrainMeta = {};\r\n        let spriteTerrainById = {};\r\n        let spriteCollisionById = {};\r\n\r\n        let characterById = {};\r\n\r\n        let itemKindBySpriteId: { [spriteId: number]: ItemKind } = {};\r\n\r\n        _mapRes.data.tilesets.forEach((ts) => {\r\n            //console.log(\"TILESET\", { ts });\r\n            if (ts.terrains) {\r\n                ts.terrains.forEach(terrain => {\r\n                    if (terrain.properties) {\r\n                        terrainMeta[terrain.tile] = terrain.properties.reduce((acc, curr) => {\r\n                            let { name, value } = curr;\r\n                            return (<any>Object).assign(acc, { [name]: value })\r\n                        }, {});\r\n\r\n                        terrainMeta[terrain.tile].terrainName = terrain.name;\r\n\r\n                        console.log(\r\n                            `terrain ${terrain.name} (${terrain.tile}) has props: `,\r\n                            terrainMeta[terrain.tile]\r\n                        )\r\n                    }\r\n                });\r\n\r\n                spriteTerrainById = ts.tiles.reduce((acc, curr) => {\r\n                    let { terrain, id } = curr;\r\n                    const solid = terrain.every(tile => terrainMeta[tile] && terrainMeta[tile].solid); // : false);\r\n                    let terrainTile = { solid };\r\n                    // console.log(`terrain set for ${id}`, { solid }, terrain.map(tile => terrainMeta[tile]))\r\n                    return (<any>Object).assign(acc, { [id]: terrainTile });\r\n                }, {});\r\n\r\n                // console.log({ terrainMeta, spriteTerrainById });\r\n            }\r\n\r\n            // console.log({tiles: ts.tiles})\r\n            if (ts.tiles && ts.tiles.some(tile => tile.objectgroup)) {\r\n                // should also grab item/obj metadata here?\r\n                // console.log(\"todo -- extract obj group collision frame?\");\r\n                //debugger;\r\n                spriteCollisionById = ts.tiles.reduce((acc, curr) => {\r\n                    let { objectgroup, id } = curr;\r\n                    if (objectgroup && objectgroup.objects && objectgroup.objects.length) {\r\n                        return (<any>Object).assign(acc, { [id]: objectgroup.objects[0] });\r\n                    } else {\r\n                        return acc;\r\n                    }\r\n                }, {});\r\n\r\n                console.log({ spriteCollisionById });\r\n                console.log({ ts });\r\n\r\n                itemKindBySpriteId = ts.tiles.reduce((acc, curr) => {\r\n                    // debugger;\r\n                    //console.log({ curr });\r\n                    if (curr.properties && !curr.properties.some(prop => prop.name === 'character')) {\r\n                        let currMeta = curr.properties.reduce((acc, curr) => {\r\n                            let { name, value } = curr;\r\n                            return (<any>Object).assign(acc, { [name]: value })\r\n                        }, {});\r\n                        return (<any>Object).assign(acc, { [curr.id]: currMeta });\r\n                    } else {\r\n                        console.warn(\"no props for sprite with id (or maybe char?)\", { curr });\r\n                        // no props for this one?\r\n                        return acc;\r\n                    }\r\n                }, {})\r\n                //console.log({ itemKindBySpriteId })\r\n\r\n                \r\n            }\r\n\r\n            if (ts.tiles && ts.tiles.some(tile => tile.properties && tile.properties.some(prop => prop.name === 'character'))) {\r\n                // console.log('character somewhere!!');\r\n                characterById = ts.tiles.reduce((acc, curr) => {\r\n                    if (curr.properties && curr.properties.some(prop => prop.name === 'character')) {\r\n                        // console.log('char found!', { curr });\r\n                        let charProp = curr.properties.find(prop => prop.name === 'character');\r\n                        let name = charProp.value;\r\n                        return (<any>Object.assign(acc, {\r\n                            [curr.id]: name // charProp.value // curr.properties.character.name\r\n                        }));\r\n                    } else {\r\n                        return acc;\r\n                    }\r\n                }, {});\r\n                console.log({ characterById });\r\n            } else {\r\n                console.warn('no chars in tileset', { tiles: ts.tiles })\r\n            }\r\n        });\r\n\r\n        this.tileMap = _mapRes.getTileMap();\r\n\r\n        // this.blockingActors = [];\r\n\r\n        this.tileMap.data.forEach((cell: ex.Cell, index) => {\r\n\r\n            if (cell.sprites[0]) {\r\n                let tile = spriteTerrainById[cell.sprites[0].spriteId];\r\n                cell = Object.assign(cell, tile);\r\n                // we have another sprite, maybe a thing to build a box for?\r\n                if (cell.sprites[1]) {\r\n                    // we could use the sprite, but... also we could do something else\r\n                    // build our own sprite with z-indexes\r\n                    // better yet: spawn an entity\r\n\r\n                    let { spriteSheetKey, spriteId } = cell.sprites[1];\r\n                    cell.removeSprite(cell.sprites[1]); //hhclearSprites();\r\n                    const kind: ItemKind = itemKindBySpriteId[spriteId];\r\n                    if (!kind) {\r\n                        const characterName: string = characterById[spriteId];\r\n                        if (characterName) {\r\n                            console.log(\"WOULD CREATE PLAYABLE CHARACTER\", {characterName, cell});\r\n                            this.createPlayableCharacter(characterName, cell); // cell.x, cell.y);\r\n                        } else {\r\n                            console.warn(\"CELL has sprite with no kind or character\", { cell, itemKindBySpriteId, characterById });\r\n                        }\r\n                        return;\r\n                    } // hm\r\n                    this.itemKinds[kind.name] = kind;\r\n\r\n                    // we could get the image and attach it to an actor\r\n                    const collision = spriteCollisionById[spriteId]; //cell.sprites[1].spriteId];\r\n                    //cell.removeSprite(cell.sprites[1]);\r\n\r\n                    let sheet: ex.SpriteSheet = (<any>this.tileMap)._spriteSheets[spriteSheetKey];\r\n                    // let xOff = 16, yOff = 16;\r\n                    let size = kind.size || 1;\r\n                    //let cellsToMark = [];\r\n                    if (size > 1) {\r\n                        // xOff = 16 * size; yOff = 16 * size;\r\n                        for (const x of Array(size).keys()) {\r\n                            for (const y of Array(size).keys()) {\r\n                                let cx = x, cy = y;\r\n                                let cellToRemove = this.tileMap.getCellByIndex(index + cx + (cy * this.tileMap.cols));\r\n                                if (cellToRemove.sprites[1]) {\r\n                                    //console.log(\"REMOVE SPRITE FROM\", {x,y,cellToRemove});\r\n                                    cellToRemove.removeSprite(cellToRemove.sprites[1]);\r\n                                    //cellsToMark.push(cellToRemove);\r\n                                } else {\r\n                                    // console.warn(\"NO SPRITE TO REMOVE FROM\", { x, y, size });\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    // let z: number = (kind && kind.z) || 0;\r\n                    kind.collision = collision;\r\n                    let newSprite: ex.Sprite = sheet.getSprite(spriteId)\r\n                    kind.drawing = newSprite; \r\n\r\n                    // let thing: Thing = \r\n                    this.spawn(kind, cell);\r\n                }\r\n            }\r\n        });\r\n\r\n        // console.log({ itemKinds: this.itemKinds });\r\n    }\r\n\r\n}\r\n\r\nexport { World };","import * as ex from 'excalibur';\r\nimport { Resources } from './resources';\r\n\r\nconst basicSprites = new ex.SpriteSheet(Resources.BasicSprites, 8, 8, 32, 32);\r\nconst greatPalm = Resources.GreatPalm.asSprite();\r\nconst palm = Resources.Palm.asSprite();\r\nconst campfire = Resources.Campfire.asSprite();\r\n\r\n//new ex.Sprite(Resources.GreatPalm.once)\r\nexport const BasicSpriteMap = {\r\n    chestClosed: basicSprites.getSprite(2),\r\n    chestOpen: basicSprites.getSprite(3),\r\n    greatPalm,\r\n    palm,\r\n    campfire,\r\n\r\n    // materials...\r\n    wood: basicSprites.getSprite(9),\r\n    stone: basicSprites.getSprite(15),\r\n};","import * as ex from 'excalibur';\r\nimport { Game } from '../game';\r\nimport { Material } from '../world';\r\nimport { Resources } from '../resources';\r\nimport { BasicSpriteMap } from '../basic_sprites';\r\n\r\n//class Inventory extends ex.UIActor {\r\n//    // backpack:\r\n//}\r\n// inv is complex, like it's own actor/obj tree? \r\nconst inventorySprites: { [key in Material]: ex.Sprite } = {\r\n    [Material.Wood]: BasicSpriteMap.wood,\r\n    [Material.Stone]: BasicSpriteMap.stone\r\n}\r\n\r\nclass StockLine extends ex.UIActor {\r\n    label: ex.Label\r\n    constructor(public material: Material, public count: number, public yOff: number) {\r\n        super(0, yOff * 30, 200, 20)\r\n\r\n        this.label = new ex.Label(`${material} x ${count}`, this.x, this.y, 'Arial')\r\n        this.label.fontSize = 12\r\n        this.label.color = ex.Color.White\r\n        this.add(this.label)\r\n    }\r\n    \r\n    draw(ctx, delta) {\r\n        super.draw(ctx, delta);\r\n        let sprite = inventorySprites[this.material].clone();\r\n        sprite.scale = new ex.Vector(0.5, 0.5)\r\n        sprite.draw(ctx, this.x, this.y)\r\n    }\r\n}\r\n\r\n// yeah we need an inventory ui actor layer :)\r\n\r\nclass Hud extends ex.UIActor {\r\n    output: ex.Label\r\n    inventory: ex.UIActor\r\n\r\n    constructor(game: Game) {\r\n        super(0, 0, game.canvasWidth, game.canvasHeight);\r\n        this.initialize(game);\r\n    }\r\n\r\n    initialize(game: Game) {\r\n        this.output = new ex.Label(\r\n            '(press E to interact)',\r\n            game.canvasWidth / 2,\r\n            game.canvasHeight - 40,\r\n            'Arial'\r\n        );\r\n        this.output.color = ex.Color.White;\r\n        this.output.fontSize = 48\r\n        this.output.setWidth(game.canvasWidth);\r\n        this.output.textAlign = ex.TextAlign.Center;\r\n\r\n        const brand = new ex.Label('I S L E', 10, 50, 'Arial');\r\n        brand.color = ex.Color.Azure;\r\n        brand.fontSize = 24\r\n\r\n        // this.inventory = new ex.Label('(inventory)', game.canvasWidth - 300, 40, 'Arial')\r\n        // this.inventory.color = ex.Color.Green;\r\n        // this.inventory.fontSize = 24\r\n        this.inventory = new ex.UIActor(game.canvasWidth - 300, 50, 300, 500) // .text = 'a bunch of stuff';\r\n\r\n        this.add(this.output);\r\n        this.add(brand);\r\n        this.add(this.inventory);\r\n\r\n        this.updateInventory({\r\n            [Material.Wood]: 0,\r\n            [Material.Stone]: 0\r\n        })\r\n    }\r\n\r\n    updateInventory(stocks: {[key: string]: number}) {\r\n        let stockLines: StockLine[] = Object.keys(stocks).map(\r\n            (material: Material, index) => new StockLine(material, stocks[material], index) //`${material} x${stocks[material]}`\r\n        );\r\n        stockLines.forEach(line => this.inventory.add(line));\r\n        console.log(\"update inventory\", { stocks, stockLines });\r\n        this.inventory.children.forEach(child => this.inventory.remove(child))\r\n        \r\n        stockLines.forEach(line => this.inventory.add(line))\r\n        // rebuild??\r\n    }\r\n\r\n    //update(engine, delta) {\r\n    //    //super(engine, delta);\r\n    //}\r\n\r\n    describe(description) {\r\n      this.output.text = description;\r\n      this.output.opacity = 1;\r\n      this.output.actions.clearActions();\r\n      this.output.actions.fade(0, 2000);\r\n    }\r\n}\r\n\r\nexport { Hud };","import * as ex from 'excalibur';\nimport { clamp } from '../../util';\n\nexport class Logo extends ex.Label {\n  intensity: number;\n  constructor(x: number, y: number, message: string) {\n    super(message);\n    //this.setWidth(200);\n    this.x = x; // (game.drawWidth / 2) - 200;\n    this.y = y; // 400;\n\n    this.fontFamily = 'Arial';\n    this.fontSize = 256;\n\n    this.color = new ex.Color(255,255,255);\n    this.intensity = 150;\n    this.strobe();\n  }\n\n  strobeClamp = clamp(50, 200);\n\n  strobe = () => {\n    this.intensity = this.intensity + Math.ceil(Math.random()*16) - 8;\n    this.intensity = this.strobeClamp(this.intensity);\n    // console.log(\"strobe\", { intensity: this.intensity });\n\n    this.opacity = this.intensity / 255;\n  }\n}\n","import * as ex from 'excalibur';\r\nimport { Game } from '../../game';\r\nimport { Direction, oppositeWay, addScalarToVec, dirFromVec } from '../../util';\r\nimport { Vector } from 'excalibur';\r\nimport { World } from '../../world';\r\nimport { GameConfig } from '../../game_config';\r\nimport { Item } from '../../models';\r\n\r\nexport class Player extends ex.Actor {\r\n  interacting: boolean\r\n  equipped: Item\r\n\r\n  speed: number\r\n  facing: Direction\r\n  _world: World\r\n  sprites: { [key: string]: ex.Sprite }\r\n\r\n  constructor(\r\n    public name: string,\r\n    public x: number,\r\n    public y: number,\r\n    protected config: GameConfig,\r\n    protected spriteSheet: ex.SpriteSheet \r\n  ) {\r\n    super(x, y, 32, 64);\r\n\r\n    this.collisionArea.body.useCircleCollision(6, new ex.Vector(0, 22));\r\n    this.color = new ex.Color(255, 255, 255);\r\n\r\n    this.collisionType = ex.CollisionType.Active;\r\n    this.speed = config.playerSpeed;\r\n    this.interacting = false;\r\n\r\n    this.sprites = {\r\n      'down':  spriteSheet.getSprite(0),\r\n      'up':    spriteSheet.getSprite(1),\r\n      'right': spriteSheet.getSprite(2),\r\n      'left':  spriteSheet.getSprite(3),\r\n    }\r\n\r\n\r\n    // set facing + init sprite\r\n    this.move('down');\r\n    this.halt();\r\n  }\r\n\r\n  wireWorld = (world: World) => { this._world = world; }\r\n\r\n  interact() {\r\n    let pos = this.interactionPos();\r\n    this.interacting = true;\r\n    let entityAndCell = this._world.entityAt(pos.x, pos.y) ||\r\n      this._world.entityAt(pos.x, pos.y+10) ||\r\n      this._world.entityAt(pos.x, pos.y-10) ||\r\n      this._world.entityAt(pos.x-10, pos.y) ||\r\n      this._world.entityAt(pos.x+10, pos.y);\r\n    if (entityAndCell) {\r\n      let { entity, cell } = entityAndCell;\r\n      return this._world.interact(entity, cell);\r\n    }\r\n  }\r\n\r\n  interactionPos(): { x:number, y:number }  {\r\n    let interactionPos = this.getCenter().clone();\r\n    let yOff = 20; //this.facing === 'up' ? 10 : 16;\r\n    if (this.facing === 'up') { yOff -= 2; }\r\n    if (this.facing === 'down') { yOff -= 4; }\r\n    interactionPos.y += yOff; //this.getHeight();\r\n    interactionPos.x -= 2;\r\n    addScalarToVec(interactionPos, this.facing, 24);\r\n    return interactionPos;\r\n  }\r\n\r\n  draw(ctx: CanvasRenderingContext2D, engine) {\r\n    super.draw(ctx, engine);\r\n\r\n    if (this.equipped) {\r\n      let littleDrawing = this.equipped.kind.drawing.clone()\r\n      littleDrawing.scale = new ex.Vector(0.5, 0.5)\r\n      littleDrawing.draw(ctx, this.pos.x, this.pos.y)\r\n    }\r\n\r\n    if (this.config.debugBoundingBoxes) {\r\n      this.collisionArea.debugDraw(ctx, ex.Color.Chartreuse);\r\n      if (this.interacting) {\r\n        let pos = this.interactionPos(); //getCenter().clone();\r\n        ctx.fillRect(pos.x, pos.y - 10, 4, 4);\r\n        ctx.fillRect(pos.x, pos.y, 4, 4);\r\n        ctx.fillRect(pos.x, pos.y + 10, 4, 4);\r\n        ctx.fillRect(pos.x - 10, pos.y, 4, 4);\r\n        ctx.fillRect(pos.x + 10, pos.y, 4, 4);\r\n      }\r\n      ctx.fillRect(this.x, this.computeZ(), 3, 3);\r\n    }\r\n  }\r\n\r\n  computeZ = () => (this.y + 24); // / 10000; //8;\r\n\r\n  halt = () => {\r\n    this.vel = new ex.Vector(0, 0);\r\n  }\r\n\r\n  move = (direction: Direction) => {\r\n    this.facing = direction;\r\n    const step = this.speed * 32;\r\n    this.halt();\r\n    if (direction === 'left')  { this.vel.x = -step; }\r\n    if (direction === 'right') { this.vel.x = step; }\r\n    if (direction === 'up')    { this.vel.y = -step; }\r\n    if (direction === 'down')  { this.vel.y = step; }\r\n  }\r\n\r\n  update(engine, delta) {\r\n    this.currentDrawing = this.sprites[this.facing];\r\n    super.update(engine, delta);\r\n    this.setZIndex(this.computeZ());\r\n    //console.log({z: this.getZIndex()})\r\n  }\r\n\r\n}\r\n","import { Player } from './player/player';\nimport { Logo } from './brand/logo';\nexport { Player, Logo };\n","import * as ex from 'excalibur';\r\nimport { GameConfig } from '../game_config';\r\n\r\nexport class Thing extends ex.Actor {\r\n    constructor(\r\n        public x: number,\r\n        public y: number,\r\n        public zOff: number = 0,\r\n        public size: number = 1,\r\n        public debugBoxes: boolean,\r\n    ) {\r\n        super(x, y, 32 * size, 32 * size, ex.Color.Chartreuse);\r\n    }\r\n\r\n    draw(ctx, engine) {\r\n        super.draw(ctx, engine);\r\n        if (this.debugBoxes) {\r\n            this.collisionArea.debugDraw(ctx, ex.Color.LightGray);\r\n            ctx.fillRect(this.x, this.computeZ(), 5, 5);\r\n        }\r\n    }\r\n\r\n    computeZ = () => (this.y + 4 + (this.size-1) * 16); // / 10000;\r\n    constructCollisionArea(collision) {\r\n        if (!collision) {\r\n            if (this.size > 1) {\r\n                // console.log(\"CREATE LARGE THING!!!\")\r\n                this.collisionType = ex.CollisionType.Fixed;\r\n                this.body.useBoxCollision(\r\n                    new ex.Vector(\r\n                        0, //(32 * this.size) / 2,\r\n                        (16 * this.size) - 14 \r\n                    )\r\n                )\r\n                this.setHeight((26*this.size) / 4);\r\n                this.setWidth(24*this.size);\r\n            } else {\r\n                this.collisionType = ex.CollisionType.PreventCollision;\r\n            }\r\n        }\r\n        else {\r\n            this.collisionType = ex.CollisionType.Fixed;\r\n            if (collision.ellipse) {\r\n                let center = new ex.Vector((collision.x + collision.width / 2) - 16, (collision.y + collision.height / 2) - 16);\r\n                this.body.useCircleCollision(collision.height / 2, center);\r\n            }\r\n            else if (collision.polygon) {\r\n                //console.log(\"poly\", { polygon: collision.polygon });\r\n                //debugger;\r\n                let vecs: ex.Vector[] = collision.polygon.map(({ x, y }) => new ex.Vector(x + collision.x, y + collision.y));\r\n                this.body.usePolygonCollision(vecs);\r\n            }\r\n            else {\r\n                console.warn(\"implement collider:\", { collision });\r\n                //debugger;\r\n            }\r\n        }\r\n    }\r\n}","import * as ex from 'excalibur';\r\nimport { World, Material } from './world';\r\nimport { Cell } from 'excalibur';\r\nimport { coinflip } from './util';\r\nimport { BasicSpriteMap } from './basic_sprites';\r\n\r\n//type Material = 'wood' | 'stone' | 'glass'; // | 'rope'\r\n\r\ninterface ItemKind {\r\n    name: string\r\n    description: string\r\n    //public sprite: ex.Sprite,\r\n\r\n    z?: number\r\n    size?: number\r\n\r\n    drawing?: ex.Sprite\r\n    collision?: any\r\n    // alternate?: boolean\r\n}\r\n\r\nclass Item {\r\n    //static sprites: { [key: string]: ex.Sprite }\r\n\r\n    constructor(\r\n        public kind: ItemKind,\r\n        public actor: ex.Actor,\r\n        public cell: ex.Cell, // the 'root' cell (upper-left corner of large objs)\r\n        //public sprite: ex.Sprite,\r\n        //public state: Object = {},\r\n        public world: World\r\n    ) {\r\n        //console.log(\"CREATED ITEM\", { kind: this.kind, sprite: this.sprite });\r\n        this.initialize();\r\n    }\r\n\r\n    initialize() {}\r\n\r\n    activate() {\r\n      console.warn(\"item is non-interactive\",\r\n          { kind: this.kind });\r\n        return null; //'...';\r\n    }\r\n}\r\n\r\nclass Chest extends Item {\r\n    state: { open: boolean } = { open: false }\r\n\r\n    initialize() {\r\n        this.actor.addDrawing('closed', BasicSpriteMap.chestClosed);\r\n        this.actor.addDrawing('open', BasicSpriteMap.chestOpen);\r\n        //this.actor.addDrawing();\r\n    }\r\n\r\n    activate() {\r\n        console.log(\"Chest activated!\");\r\n        if (this.state.open) {\r\n            this.actor.setDrawing('closed');\r\n            this.state = { open: false };\r\n            return 'closed';\r\n        } else {\r\n            this.actor.setDrawing('open');\r\n            this.state = { open: true }\r\n            return 'opened';\r\n        }\r\n    }\r\n}\r\n\r\nclass Palm extends Item {\r\n    initialize() {\r\n        this.actor.addDrawing('palm', BasicSpriteMap.palm);\r\n        this.actor.setDrawing('palm');\r\n    }\r\n}\r\n\r\nclass BigCampfire extends Item {\r\n    initialize() {\r\n        this.actor.addDrawing('fire', BasicSpriteMap.campfire);\r\n        this.actor.setDrawing('fire');\r\n        //this.actor.setDrawing('big')\r\n    }\r\n}\r\n\r\nclass WoodLog extends Item {\r\n  activate() {\r\n      this.world.collect(this, Material.Wood);\r\n      return this.kind.description;\r\n  }\r\n}\r\n\r\nclass WoodLogStack extends Item {\r\n    activate() {\r\n        this.world.collect(this, Material.Wood, 3);\r\n        return this.kind.description;\r\n    }\r\n}\r\n\r\nclass GreatPalm extends Item {\r\n    state: { hp: number } = { hp: 100 }\r\n\r\n    initialize() {\r\n        this.actor.addDrawing('palm', BasicSpriteMap.greatPalm);\r\n        this.actor.setDrawing('palm');\r\n    }\r\n\r\n    activate() {\r\n        if (this.state.hp > 0) {\r\n            const message: string = `once a seed (${this.state.hp}%)`\r\n            let damage = this.world._primaryCharacter.equipped ? 30 : 3;\r\n            this.state.hp -= damage;\r\n            return message;\r\n        } else {\r\n            let baseCells: Array<ex.Cell> = [-2,-1,0,1,2].map((offset) => //this.cell; //world.tileMap.getCellByPoint(this.actor.x, this.actor.y);\r\n                this.world.tileMap.getCellByIndex(\r\n                    this.cell.index +\r\n                    (this.kind.size / 2) + offset +\r\n                    ((this.kind.size - 1) * this.world.tileMap.cols)\r\n                )\r\n            );\r\n\r\n            this.world.destroy(this);\r\n\r\n            baseCells.forEach(base => {\r\n                let logKind = coinflip() ? 'WoodLogStack' : 'WoodLog';\r\n\r\n                this.world.spawn(\r\n                    this.world.itemKinds[logKind],\r\n                    base,\r\n                );\r\n            });\r\n            return \"timber\";\r\n        }\r\n    }\r\n}\r\n\r\nclass Handaxe extends Item {\r\n    activate() {\r\n        this.world.equip(this);\r\n        this.world.destroy(this);\r\n        return \"chop chop\";\r\n    }\r\n}\r\n\r\nconst itemClasses = {\r\n    Chest,\r\n    Palm,\r\n    GreatPalm,\r\n    BigCampfire,\r\n    WoodLog,\r\n    WoodLogStack,\r\n    Handaxe\r\n};\r\n\r\nconst buildItem = (kind: ItemKind, actor: ex.Actor, cell: Cell, world: World): Item => {\r\n    if (itemClasses[kind.name]) {\r\n        return new itemClasses[kind.name](kind, actor, cell, world);\r\n    } else {\r\n        return new Item(kind, actor, cell, world);\r\n    }\r\n}\r\n\r\nclass Isle {\r\n    constructor(public name: string, public items: Array<Item> = []) {\r\n    }\r\n}\r\n\r\nexport { Isle, Item, ItemKind, buildItem };","import * as ex from 'excalibur';\nimport { Resources } from './resources';\nimport { GameConfig } from './game_config';\nimport { setupMaster } from 'cluster';\nimport { LevelOne } from './scenes/level-one/level-one';\n\nexport class Game extends ex.Engine {\n  constructor(width: number, height: number, config: GameConfig) {\n    super({ width, height, displayMode: ex.DisplayMode.FullScreen });\n\n    this.setup();\n  }\n\n\n  // entrypoint\n\n  public start() {\n    let loader = new ex.Loader();\n    for (let key in Resources) {\n      loader.addResource(Resources[key]);\n    }\n\n    return super.start(loader).then(this.kick);\n  }\n\n  // runs on new Game\n  protected setup() {\n    // console.log(\"game setup here\")\n    // initialize island...\n\n    // const levelOne = new LevelOne();\n    // this.add(levelOne);\n  }\n\n  // runs after loader\n  protected kick() {\n\n  } \n}\n","module.exports = __webpack_public_path__ + \"1452350757e2b9db94866b0f3a01e215.mp3\";","module.exports = __webpack_public_path__ + \"fac8210e66067d101e48370329fc4c5a.mp3\";","module.exports = __webpack_public_path__ + \"8e8aa6414e948820c3ad76cc2be5950e.png\";","module.exports = __webpack_public_path__ + \"db6f4f593c47b1aa561da3453157f4bb.png\";","module.exports = __webpack_public_path__ + \"e12b440e05a78caaa8a410ac5a9ae975.png\";","module.exports = __webpack_public_path__ + \"9cc1647a9ee8e4b02e846cff8fa0e3db.png\";","module.exports = __webpack_public_path__ + \"46e1c84312a40f66fc1fb74c55561536.png\";","module.exports = __webpack_public_path__ + \"53a219e01679b3babc8afba20c0f0839.png\";","module.exports = __webpack_public_path__ + \"b9b405c74e06d77b7a88f04d6d3ae5cd.png\";","import * as ex from 'excalibur';\nimport { Resources } from '../../resources';\n\nexport class LevelOne extends ex.Scene {\n  public onInitialize(engine: ex.Engine) {\n  }\n\n  public onActivate() {\n    \n  }\n  public onDeactivate() {}\n\n  public update(engine: ex.Engine, delta) {\n\n    super.update(engine, delta);\n  }\n}\n","import * as ex from 'excalibur';\r\nimport { LevelOne } from './scenes/level-one/level-one';\r\nimport { Resources } from './resources';\r\nimport { Game } from './game';\r\nimport { keyToDirection, Direction, mode } from './util';\r\nimport { World } from './world';\r\nimport { GameConfig } from './game_config';\r\nimport { Hud } from './actors/hud';\r\n\r\n// Islands are either from before or for after humankind. (gd)\r\n\r\n/* \r\nDreaming of islands — whether with joy or in fear, it \r\ndoesn't matter — is dreaming of pulling away, of being already separate, far \r\nfrom any continent, of being lost and alone — or it is dreaming of starting from \r\nscratch, recreating, beginning anew. (gd)\r\n*/\r\n\r\n// An island doesn't stop being deserted simply because it is inhabited. (gd)\r\n\r\nconst config: GameConfig = {\r\n  debugCells: false,\r\n  debugBoundingBoxes: false,\r\n  zoom: 2,\r\n  playerSpeed: 7,\r\n  bgMusic: true\r\n}\r\n\r\nconst game = new Game(800, 600, config);\r\nconst levelOne = new LevelOne();\r\n\r\nconst hud = new Hud(game);\r\nlevelOne.add(hud);\r\n\r\nconst world = new World(levelOne, hud, config);\r\n\r\ngame.input.keyboard.on('press', (evt: ex.Input.KeyEvent) => {\r\n    // check for current scene?\r\n  if (game.currentScene === levelOne) {\r\n    let player = world.primaryCharacter();\r\n\r\n    let { key } = evt;\r\n    if (key == ex.Input.Keys.E) {\r\n      let interaction = player.interact();\r\n      if (interaction) {\r\n        hud.describe(interaction);\r\n      }\r\n    } else {\r\n      // assume we're trying to move\r\n      let direction = keyToDirection(key);\r\n      if (direction) { player.move(direction); }\r\n    }\r\n  }\r\n})\r\n\r\ngame.input.keyboard.on('hold', (evt: ex.Input.KeyEvent) => {\r\n  let { key } = evt;\r\n  let direction: Direction = keyToDirection(key);\r\n  if (direction) {\r\n    let player = world.primaryCharacter();\r\n    player.move(direction);\r\n  }\r\n})\r\n\r\ngame.input.keyboard.on('release', (evt: ex.Input.KeyEvent) => {\r\n  // console.log(\"RELEASE\", { evt });\r\n  let { key } = evt;\r\n  let direction: Direction = keyToDirection(key);\r\n  if (direction) {\r\n    let player = world.primaryCharacter();\r\n    player.halt(); //direction);\r\n    player.interacting = false;\r\n  }\r\n});\r\n\r\ngame.add('wander', levelOne);\r\n\r\ngame.start().then(() => {\r\n  world.processTiledMap(Resources.Map);\r\n\r\n  let tileMap = world.tileMap;\r\n  levelOne.addTileMap(tileMap);\r\n  game.goToScene('wander');\r\n\r\n  // really should be an audio player!\r\n  if (config.bgMusic) {\r\n    let theme = Resources.FineMist; //Science;\r\n    // wait a tiny bit for music to load??? (seems to work welll)\r\n    setTimeout(() => {\r\n      console.log('about to play music', { theme, isLoaded: theme.isLoaded() });\r\n      theme.play(0.2) //1.0)\r\n    }, 3000);\r\n  }\r\n});"],"sourceRoot":""}