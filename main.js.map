{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/util.ts","webpack:///./src/resources.ts","webpack:///./src/actors/index.ts","webpack:///./src/models.ts","webpack:///./src/world.ts","webpack:///./src/game.ts","webpack:///./src/images/alex.png","webpack:///./src/images/basic-sprites.png","webpack:///./src/images/spritemap.png","webpack:///./src/images/sword.png","webpack:///./src/actors/brand/logo.ts","webpack:///./src/actors/enemy/enemy.ts","webpack:///./src/actors/player/player.ts","webpack:///./src/scenes/main-menu/main-menu.ts","webpack:///./src/scenes/level-one/level-one.ts","webpack:///./src/index.ts"],"names":["webpackJsonpCallback","data","moduleId","chunkId","chunkIds","moreModules","executeModules","i","resolves","length","installedChunks","push","Object","prototype","hasOwnProperty","call","modules","parentJsonpFunction","shift","deferredModules","apply","checkDeferredModules","result","deferredModule","fulfilled","j","depId","splice","__webpack_require__","s","installedModules","1","exports","module","l","m","c","d","name","getter","o","defineProperty","configurable","enumerable","get","r","value","n","__esModule","default","object","property","p","jsonpArray","window","webpackJsonp","oldJsonpFunction","bind","slice","ex","clamp","min","max","val","clamped","Math","keyToDirection","key","direction","Input","Keys","A","Left","D","Right","S","Down","W","Up","oppositeWay","dir","opp","mode","array","map","Map","maxFreq","item","freq","has","set","addScalarToVec","vec","step","y","x","dirFromVec","abs","e","t","excalibur_tiled_1","sword","spritemap","basicSprites","alex","Resources","Sword","Texture","Spritemap","BasicSprites","Alex","imagePathAccessor","path","tileset","actualPath","replace","console","log","player_1","Player","enemy_1","Enemy","logo_1","Logo","Isle","[object Object]","items","this","models_1","World","mapResource","debugBoxes","island","_processTiledMap","cell","tileMap","getCellByPoint","sprites","__isle_item","_mapRes","terrainMeta","spriteTerrainById","spriteCollisionById","itemKindBySpriteId","tilesets","forEach","ts","terrains","terrain","properties","tile","reduce","acc","curr","assign","terrainName","tiles","id","terrainTile","solid","every","some","objectgroup","objects","currMeta","warn","getTileMap","blockingActors","spriteId","collision","block","Actor","collisionType","CollisionType","Fixed","ellipse","center","Vector","width","height","body","useCircleCollision","polygon","vecs","usePolygonCollision","draw","ctx","collisionArea","debugDraw","Color","LightGray","kind","theItem","resources_1","Game","Engine","super","displayMode","DisplayMode","FullScreen","loader","Loader","addResource","start","util_1","Label","message","strobeClamp","strobe","intensity","ceil","random","opacity","fontFamily","fontSize","color","initialVelocity","setWidth","setHeight","Red","Passive","vel","setTo","config","spriteSheet","wireWorld","world","_world","halt","move","facing","speed","currentDrawing","pos","Active","playerSpeed","interacting","down","getSprite","up","left","right","interactionPos","entityAt","description","getCenter","clone","yOff","engine","debugBoundingBoxes","Chartreuse","fillRect","actors_1","simpleButtonFactory","myButton","document","createElement","textContent","MainMenu","Scene","logo","drawWidth","add","addTimer","Timer","playMe","UIActor","onClick","factory","hide","rootElement","style","display","position","appendChild","buttonElement","addEventListener","canvasHeight","_engine","devicePixelRatio","canvasWidth","canvas","offsetLeft","top","offsetTop","buttonWidth","clientWidth","buttonHeight","clientHeight","goToScene","LevelOne","delta","update","level_one_1","main_menu_1","game_1","world_1","debugCells","zoom","playerStart","Physics","collisionPasses","game","mainMenu","levelOne","SpriteSheet","alexSprites","startX","startY","player","output","brand","input","keyboard","on","evt","E","interaction","interact","camera","text","White","strategy","lockToActor","then","addTileMap","actor","lastViewedCell","pointers","primary","debug"],"mappings":"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","file":"main.js","sourcesContent":[" \t// install a JSONP callback for chunk loading\n \tfunction webpackJsonpCallback(data) {\n \t\tvar chunkIds = data[0];\n \t\tvar moreModules = data[1];\n \t\tvar executeModules = data[2];\n \t\t// add \"moreModules\" to the modules object,\n \t\t// then flag all \"chunkIds\" as loaded and fire callback\n \t\tvar moduleId, chunkId, i = 0, resolves = [];\n \t\tfor(;i < chunkIds.length; i++) {\n \t\t\tchunkId = chunkIds[i];\n \t\t\tif(installedChunks[chunkId]) {\n \t\t\t\tresolves.push(installedChunks[chunkId][0]);\n \t\t\t}\n \t\t\tinstalledChunks[chunkId] = 0;\n \t\t}\n \t\tfor(moduleId in moreModules) {\n \t\t\tif(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {\n \t\t\t\tmodules[moduleId] = moreModules[moduleId];\n \t\t\t}\n \t\t}\n \t\tif(parentJsonpFunction) parentJsonpFunction(data);\n \t\twhile(resolves.length) {\n \t\t\tresolves.shift()();\n \t\t}\n\n \t\t// add entry modules from loaded chunk to deferred list\n \t\tdeferredModules.push.apply(deferredModules, executeModules || []);\n\n \t\t// run deferred modules when all chunks ready\n \t\treturn checkDeferredModules();\n \t};\n \tfunction checkDeferredModules() {\n \t\tvar result;\n \t\tfor(var i = 0; i < deferredModules.length; i++) {\n \t\t\tvar deferredModule = deferredModules[i];\n \t\t\tvar fulfilled = true;\n \t\t\tfor(var j = 1; j < deferredModule.length; j++) {\n \t\t\t\tvar depId = deferredModule[j];\n \t\t\t\tif(installedChunks[depId] !== 0) fulfilled = false;\n \t\t\t}\n \t\t\tif(fulfilled) {\n \t\t\t\tdeferredModules.splice(i--, 1);\n \t\t\t\tresult = __webpack_require__(__webpack_require__.s = deferredModule[0]);\n \t\t\t}\n \t\t}\n \t\treturn result;\n \t}\n\n \t// The module cache\n \tvar installedModules = {};\n\n \t// object to store loaded and loading chunks\n \t// undefined = chunk not loaded, null = chunk preloaded/prefetched\n \t// Promise = chunk loading, 0 = chunk loaded\n \tvar installedChunks = {\n \t\t1: 0\n \t};\n\n \tvar deferredModules = [];\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \tvar jsonpArray = window[\"webpackJsonp\"] = window[\"webpackJsonp\"] || [];\n \tvar oldJsonpFunction = jsonpArray.push.bind(jsonpArray);\n \tjsonpArray.push = webpackJsonpCallback;\n \tjsonpArray = jsonpArray.slice();\n \tfor(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);\n \tvar parentJsonpFunction = oldJsonpFunction;\n\n\n \t// add entry module to deferred list\n \tdeferredModules.push([17,0]);\n \t// run deferred modules when ready\n \treturn checkDeferredModules();\n","import * as ex from 'excalibur';\n\n// restrain a value between a min and a max\nconst clamp = (min: number, max: number) => (val: number) => {\n  let clamped = Math.min(val, max);\n  clamped = Math.max(clamped, min);\n  return clamped;\n}\n\ntype Direction = 'left' | 'right' | 'up' | 'down';\n\nconst keyToDirection = (key: number): Direction => {\n  let direction : Direction;\n  if (key === ex.Input.Keys.A || key === ex.Input.Keys.Left) {\n    direction = 'left';\n  }\n  if (key === ex.Input.Keys.D || key === ex.Input.Keys.Right) {\n    direction = 'right';\n  }\n  if (key === ex.Input.Keys.S || key === ex.Input.Keys.Down) {\n    direction = 'down';\n  }\n  if (key === ex.Input.Keys.W || key === ex.Input.Keys.Up) {\n    direction = 'up';\n  }\n  return direction;\n}\n\nconst oppositeWay = (dir: Direction): Direction => {\n  let opp: Direction;\n  switch(dir) {\n    case 'left': opp = 'right'; break;\n    case 'right': opp = 'left'; break;\n    case 'up': opp = 'down'; break;\n    case 'down': opp = 'up'; break;\n  }\n  return opp;\n}\n\n// suggested impl from https://codereview.stackexchange.com/a/169667\nconst mode = (array) => {\n  const map = new Map(); // new Map();\n\n  let maxFreq = 0;\n  let mode;\n\n  for(const item of array) {\n    let freq = map.has(item) ? map.get(item) : 0;\n    freq++;\n\n    if(freq > maxFreq) {\n      maxFreq = freq;\n      mode = item;\n    }\n    \n    map.set(item, freq);\n  }\n\n  return mode;\n};\n\nconst addScalarToVec = (vec: ex.Vector, direction: Direction, step: number) => {\n  switch (direction) {\n    case 'up':\n      vec.y -= step;\n      break;\n    case 'down':\n      vec.y += step;\n      break;\n    case 'left':\n      vec.x -= step;\n      break;\n    case 'right':\n      vec.x += step;\n      break;\n  }\n}\n\nconst dirFromVec = (vec: ex.Vector): Direction => {\n  let {x,y} = vec;\n  if (Math.abs(x) > Math.abs(y)) {\n    return x > 0 ? 'right' : 'left';\n  } else {\n    return y > 0 ? 'down' : 'up';\n  }\n}\n\nexport {\n  clamp,\n  Direction,\n  keyToDirection,\n  addScalarToVec,\n  dirFromVec,\n  oppositeWay,\n  mode\n};\n","import * as ex from 'excalibur';\nimport TiledResource from '@excaliburjs/excalibur-tiled';\n\nconst sword = require('./images/sword.png');\nconst spritemap = require('./images/spritemap.png')\nconst basicSprites = require('./images/basic-sprites.png')\nconst alex = require('./images/alex.png')\n\nlet mapName = 'solidity';\n\nlet Resources = {\n    Sword: new ex.Texture(sword),\n    Spritemap: new ex.Texture(spritemap), // SpriteSheet(spritemap)\n    BasicSprites: new ex.Texture(basicSprites),\n    Alex: new ex.Texture(alex),\n    Map: new TiledResource(`map/${mapName}.json`)\n}\n\nResources.Map.imagePathAccessor = (path, tileset) => {\n    let actualPath = path.replace(/^(?:\\.\\.\\/)+/, \"\");\n    console.log(\"LOAD IMG\", { path, actualPath });\n    return actualPath;\n    // return \"/assets/\" + path;\n}\n\nexport { Resources }\n","import { Player } from './player/player';\nimport { Enemy } from './enemy/enemy';\nimport { Logo } from './brand/logo';\nexport { Player, Enemy, Logo };\n","type Material = 'wood' | 'stone' | 'glass'; // | 'rope'\r\n\r\ninterface ItemKind {\r\n    name: string\r\n    description: string\r\n    destructible: boolean\r\n    yields?: Material\r\n    openable: boolean\r\n    // open?: boolean\r\n}\r\n\r\ninterface Item {\r\n    kind: ItemKind\r\n    x: number\r\n    y: number\r\n    // open?: boolean\r\n    // ...\r\n}\r\n\r\nclass Isle {\r\n    constructor(public name: string, public items: Array<Item> = []) {\r\n    }\r\n}\r\n\r\nexport { Isle, Item, ItemKind };","import * as ex from 'excalibur';\r\nimport TiledResource from '@excaliburjs/excalibur-tiled';\r\nimport { Isle, Item, ItemKind } from './models';\r\n\r\n// hmmmm (maybe more like a world-factory?)\r\nclass World {\r\n    island: Isle\r\n    tileMap: ex.TileMap\r\n    blockingActors: Array<ex.Actor>\r\n    // itemKindBySpriteId: { [spriteId: number]: ItemKind }\r\n\r\n    constructor(public mapResource: TiledResource, public debugBoxes: boolean) {\r\n        this.island = new Isle('sorna');\r\n\r\n        this._processTiledMap();\r\n    }\r\n\r\n    entityAt(x: number, y: number): Item {\r\n        let cell = this.tileMap.getCellByPoint(x, y); //interactionPos.x, interactionPos.y);\r\n        //console.log(\r\n        //  \"WOULD ATTEMPT TO INTERACT IN DIRECTION w/ CELL: \", \r\n        //  { dir: this.facing, cell }\r\n        //);\r\n        if (cell.sprites.length > 1) {\r\n            //console.log(\"goodness, there is something there!!!\", cell);\r\n            let it : Item = cell['__isle_item'];\r\n            return it; //cell['__isle_item']; // sprites[1] };\r\n            //  // we need to build some kind of object model we can deref\r\n            //  // all we'll have is a spriteId...\r\n        }\r\n        return null; // { nothing: 'to see here' };\r\n\r\n    }\r\n\r\n    _processTiledMap() {\r\n        let _mapRes = this.mapResource; // Resources.Map;\r\n        let terrainMeta = {};\r\n        let spriteTerrainById = {};\r\n        let spriteCollisionById = {};\r\n        let itemKindBySpriteId: { [spriteId: number]: ItemKind } = {};\r\n\r\n        _mapRes.data.tilesets.forEach((ts) => {\r\n            //console.log(\"TILESET\", { ts });\r\n            if (ts.terrains) {\r\n                ts.terrains.forEach(terrain => {\r\n                    if (terrain.properties) {\r\n                        terrainMeta[terrain.tile] = terrain.properties.reduce((acc, curr) => {\r\n                            let { name, value } = curr;\r\n                            return (<any>Object).assign(acc, { [name]: value })\r\n                        }, {});\r\n\r\n                        terrainMeta[terrain.tile].terrainName = terrain.name;\r\n\r\n                        console.log(\r\n                            `terrain ${terrain.name} (${terrain.tile}) has props: `,\r\n                            terrainMeta[terrain.tile]\r\n                        )\r\n                    }\r\n                });\r\n\r\n                spriteTerrainById = ts.tiles.reduce((acc, curr) => {\r\n                    let { terrain, id } = curr;\r\n                    const solid = terrain.every(tile => terrainMeta[tile] && terrainMeta[tile].solid); // : false);\r\n                    let terrainTile = { solid };\r\n                    // console.log(`terrain set for ${id}`, { solid }, terrain.map(tile => terrainMeta[tile]))\r\n                    return (<any>Object).assign(acc, { [id]: terrainTile });\r\n                }, {});\r\n\r\n                // console.log({ terrainMeta, spriteTerrainById });\r\n            }\r\n\r\n            // console.log({tiles: ts.tiles})\r\n            if (ts.tiles && ts.tiles.some(tile => tile.objectgroup)) {\r\n                // should also grab item/obj metadata here?\r\n                // console.log(\"todo -- extract obj group collision frame?\");\r\n                //debugger;\r\n                spriteCollisionById = ts.tiles.reduce((acc, curr) => {\r\n                    let { objectgroup, id } = curr;\r\n                    if (objectgroup && objectgroup.objects && objectgroup.objects.length) {\r\n                        return (<any>Object).assign(acc, { [id]: objectgroup.objects[0] });\r\n                    } else {\r\n                        return acc;\r\n                    }\r\n                }, {});\r\n\r\n                console.log({ spriteCollisionById });\r\n\r\n                itemKindBySpriteId = ts.tiles.reduce((acc, curr) => {\r\n                    if (curr.properties) {\r\n                        let currMeta = curr.properties.reduce((acc, curr) => {\r\n                            let { name, value } = curr;\r\n                            return (<any>Object).assign(acc, { [name]: value })\r\n                        }, {});\r\n                        return (<any>Object).assign(acc, { [curr.id]: currMeta });\r\n                    } else {\r\n                        console.warn(\"no props for sprite with id\", {curr});\r\n                        // no props for this one?\r\n                        return acc;\r\n                    }\r\n                }, {})\r\n                console.log({ itemKindBySpriteId })\r\n            }\r\n        });\r\n\r\n        this.tileMap = _mapRes.getTileMap();\r\n\r\n        this.blockingActors = [];\r\n\r\n        this.tileMap.data.forEach((cell: ex.Cell) => {\r\n\r\n            if (cell.sprites[0]) {\r\n                let tile = spriteTerrainById[cell.sprites[0].spriteId];\r\n                cell = Object.assign(cell, tile);\r\n                // cell.height = cell.y;\r\n\r\n                // we have another sprite, maybe a thing to build a box for?\r\n                if (cell.sprites[1]) {\r\n                    const spriteId = cell.sprites[1].spriteId;\r\n                    // console.log(\"processing cell with spriteId\", { spriteId });\r\n                    const collision = spriteCollisionById[spriteId]; //cell.sprites[1].spriteId];\r\n                    if (collision) {\r\n                        let block = new ex.Actor(cell.x, cell.y, 32, 32);\r\n                        // + collision.x, cell.y + collision.y, 32, 32);\r\n                        block.collisionType = ex.CollisionType.Fixed;\r\n                        if (collision.ellipse) {\r\n                            let center = new ex.Vector(\r\n                                    collision.x + collision.width/2,\r\n                                    collision.y + collision.height/2,\r\n                                )\r\n                            block.body.useCircleCollision(\r\n                                collision.height / 2,\r\n                                center\r\n                            );\r\n                        } else if (collision.polygon) {\r\n                            //console.log(\"poly\", { polygon: collision.polygon });\r\n                            //debugger;\r\n                            let vecs : ex.Vector[] = collision.polygon.map(\r\n                                ({ x, y }) => new ex.Vector(\r\n                                    x + collision.x,\r\n                                    y + collision.y\r\n                                )\r\n                            );\r\n\r\n                            block.body.usePolygonCollision(\r\n                                vecs\r\n                            )\r\n                        } else {\r\n                            console.warn(\"implement collider:\", { collision })\r\n                            //debugger;\r\n                        }\r\n                        if (this.debugBoxes) {\r\n                            // console.log({ collision, block });\r\n                            block.draw = (ctx) => {\r\n                                block.collisionArea.debugDraw(ctx, ex.Color.LightGray);\r\n                            }\r\n                        }\r\n                        //console.log({collision});\r\n                        this.blockingActors.push(block);\r\n\r\n                        // de-ref from sprite id\r\n                        const kind: ItemKind = itemKindBySpriteId[spriteId];\r\n                        //debugger;\r\n                        if (kind) { // model it!\r\n                            let theItem = {\r\n                                kind,\r\n                                x: cell.x,\r\n                                y: cell.y\r\n                            };\r\n                            this.island.items.push(theItem);\r\n                            // need some way back from the cell?\r\n                            cell['__isle_item'] = theItem;\r\n                        }\r\n                    }\r\n                    // add it to the level...\r\n                    // levelOne.add(block);\r\n                }\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nexport { World };","import * as ex from 'excalibur';\nimport { Resources } from './resources';\n\nexport class Game extends ex.Engine {\n  constructor(width: number, height: number) {\n    super({ width, height, displayMode: ex.DisplayMode.FullScreen });\n  }\n\n  public start() { // loader: ex.Loader) {\n\n    let loader = new ex.Loader();\n    for (let key in Resources) {\n      loader.addResource(Resources[key]);\n    }\n    return super.start(loader);\n  }\n}\n","module.exports = __webpack_public_path__ + \"fae4f5150e1940c263da8bc294009090.png\";","module.exports = __webpack_public_path__ + \"6c58b202773ef36a8c3ffd4538381400.png\";","module.exports = __webpack_public_path__ + \"b9b405c74e06d77b7a88f04d6d3ae5cd.png\";","module.exports = __webpack_public_path__ + \"94754f62e0ae4d23d386e246f5e0cb6e.png\";","import * as ex from 'excalibur';\nimport { clamp } from '../../util';\n\nexport class Logo extends ex.Label {\n  intensity: number;\n  constructor(x: number, y: number, message: string) {\n    super(message);\n    //this.setWidth(200);\n    this.x = x; // (game.drawWidth / 2) - 200;\n    this.y = y; // 400;\n\n    this.fontFamily = 'Arial';\n    this.fontSize = 256;\n\n    this.color = new ex.Color(255,255,255);\n    this.intensity = 150;\n    this.strobe();\n  }\n\n  strobeClamp = clamp(50, 200);\n\n  strobe = () => {\n    this.intensity = this.intensity + Math.ceil(Math.random()*16) - 8;\n    this.intensity = this.strobeClamp(this.intensity);\n    // console.log(\"strobe\", { intensity: this.intensity });\n\n    this.opacity = this.intensity / 255;\n  }\n}\n","import * as ex from 'excalibur';\n\nexport class Enemy extends ex.Actor {\n  constructor({initialVelocity}:{initialVelocity: [number,number]}) {\n    super();\n    this.setWidth(15);\n    this.setHeight(15);\n    this.x = 200;\n    this.y = 200;\n    this.color = ex.Color.Red; // new ex.Color(255, 0, 255);\n\n    // we are collision-aware!\n    this.collisionType = ex.CollisionType.Passive;\n\n    this.vel.setTo(initialVelocity[0], initialVelocity[1]); // 100,140);\n  }\n\n  // draw(ctx: CanvasRenderingContext2D) {\n  //   ctx.fillStyle = this.color.toString()\n  //   ctx.beginPath()\n  //   ctx.arc(this.pos.x, this.pos.y, 10, 0, Math.PI * 2)\n  //   ctx.closePath()\n  //   ctx.fill()\n  // }\n}","import * as ex from 'excalibur';\nimport { Game } from '../../game';\nimport { Direction, oppositeWay, addScalarToVec, dirFromVec } from '../../util';\nimport { Vector } from 'excalibur';\nimport { World } from '../../world';\nimport { GameConfig } from '../../game_config';\n\nexport class Player extends ex.Actor {\n  interacting: boolean\n\n  speed: number\n  facing: Direction\n  _world: World\n  alex: { [key: string]: ex.Sprite }\n\n  constructor(\n    public x: number,\n    public y: number,\n    protected config: GameConfig,\n    protected spriteSheet: ex.SpriteSheet \n  ) {\n    super();\n\n    this.setWidth(20);\n    this.setHeight(36);\n    this.collisionArea.pos.y = 12;\n\n    this.color = new ex.Color(255, 255, 255);\n\n    this.collisionType = ex.CollisionType.Active;\n    this.speed = config.playerSpeed; // cells/sec\n    //this.facing = 'down';\n    this.interacting = false;\n\n    this.alex = {\n      'down': spriteSheet.getSprite(0),\n      'up': spriteSheet.getSprite(1),\n      'left': spriteSheet.getSprite(3),\n      'right': spriteSheet.getSprite(2),\n    }\n\n    // set facing + init sprite\n    this.move('down');\n    this.halt();\n  }\n\n  wireWorld = (world: World) => { this._world = world; }\n\n  interact() {\n    let pos = this.interactionPos();\n    // console.log(\"attempting to interact at\", {pos});\n    this.interacting = true;\n    let item = this._world.entityAt(pos.x, pos.y) ||\n      this._world.entityAt(pos.x, pos.y+10) ||\n      this._world.entityAt(pos.x, pos.y-10) ||\n      this._world.entityAt(pos.x-10, pos.y) ||\n      this._world.entityAt(pos.x+10, pos.y);\n    if (item) {\n      let { name, description } = item.kind;\n      // console.log(\"ENTITY IS\", {name, description });\n      return description;\n    }\n    // return '(..)';\n  }\n\n  interactionPos(): { x:number, y:number }  {\n    let interactionPos = this.getCenter().clone();\n    let yOff = this.facing === 'up' ? 10 : 16;\n    interactionPos.y += yOff; //this.getHeight();\n    interactionPos.x -= 2;\n    addScalarToVec(interactionPos, this.facing, 24);\n    return interactionPos;\n  }\n\n  draw(ctx: CanvasRenderingContext2D, engine) {\n    super.draw(ctx, engine);\n    if (this.config.debugBoundingBoxes) {\n      this.collisionArea.debugDraw(ctx, ex.Color.Chartreuse);\n      if (this.interacting) {\n        let pos = this.interactionPos(); //getCenter().clone();\n        ctx.fillRect(pos.x, pos.y - 10, 4, 4);\n        ctx.fillRect(pos.x, pos.y, 4, 4);\n        ctx.fillRect(pos.x, pos.y + 10, 4, 4);\n        ctx.fillRect(pos.x - 10, pos.y, 4, 4);\n        ctx.fillRect(pos.x + 10, pos.y, 4, 4);\n      }\n    }\n  }\n\n  halt = () => {\n    this.vel = new ex.Vector(0, 0);\n  }\n\n  move = (direction: Direction) => {\n    this.facing = direction;\n    const step = this.speed * 32;\n    this.halt();\n    if (direction === 'left')  { this.vel.x = -step; }\n    if (direction === 'right') { this.vel.x = step; }\n    if (direction === 'up')    { this.vel.y = -step; }\n    if (direction === 'down')  { this.vel.y = step; }\n    this.currentDrawing = this.alex[direction];\n    // this.addDrawing(this.alex[direction]);\n    // this.setZIndex(this.y);\n  }\n\n  //stopMovingDirection = (direction: Direction) => {\n  //  switch(direction) {\n  //    case 'left': this.vel.x = 0;\n  //    case 'right': this.vel.x = 0;\n  //    case 'up': this.vel.y = 0;\n  //    case 'down': this.vel.y = 0;\n  //  }\n  //}\n}\n","import * as ex from 'excalibur';\r\nimport { Logo } from '../../actors';\r\n\r\nconst simpleButtonFactory = (message: string) => {\r\n    let myButton = document.createElement('button');\r\n    myButton.textContent = message; // 'The best button';\r\n    return myButton;\r\n};\r\n\r\nclass Button extends ex.UIActor {\r\n    rootElement: HTMLElement\r\n    buttonElement: HTMLElement\r\n    // onClick: Function\r\n    // _engine: ex.Engine\r\n\r\n    constructor(message, x, y, onClick, factory = simpleButtonFactory) {\r\n        super();\r\n        this.rootElement = document.createElement('div');\r\n        this.rootElement.style.position = 'absolute';\r\n        document.body.appendChild(this.rootElement)\r\n        this.buttonElement = factory(message);\r\n        this.rootElement.appendChild(\r\n            this.buttonElement\r\n        );\r\n        this.buttonElement.addEventListener('click', onClick);\r\n        // this.onClick = onClick;\r\n    }\r\n\r\n    hide = () => this.rootElement.style.display = 'none';\r\n\r\n    draw(ctx: CanvasRenderingContext2D) {\r\n      let canvasHeight = this._engine.canvasHeight / window.devicePixelRatio;\r\n      let canvasWidth = this._engine.canvasWidth / window.devicePixelRatio;\r\n      let left = ctx.canvas.offsetLeft;\r\n      let top = ctx.canvas.offsetTop;\r\n      let buttonWidth = this.buttonElement.clientWidth;\r\n      let buttonHeight = this.buttonElement.clientHeight;\r\n      this.rootElement.style.left = `${left + canvasWidth / 2 - buttonWidth / 2}px`;\r\n      this.rootElement.style.top = `${top + canvasHeight / 2 - buttonHeight / 2 + 100}px`;\r\n    }\r\n}\r\n\r\nexport class MainMenu extends ex.Scene {\r\n    public onInitialize(engine: ex.Engine) {\r\n        const logo = new Logo(\r\n            engine.drawWidth / 2,\r\n            400,\r\n            'Isle'\r\n        );\r\n        this.add(logo);\r\n\r\n        engine.addTimer(\r\n            new ex.Timer(\r\n                logo.strobe,\r\n                20,\r\n                true\r\n            )\r\n        )\r\n                \r\n        const playMe = new Button(\r\n            'start game',\r\n            engine.drawWidth / 2,\r\n            400,\r\n            () => {\r\n                playMe.hide()\r\n                engine.goToScene('wander');\r\n            }\r\n        ); \r\n        // new ex.Label(\r\n        //     'start game',\r\n        //     engine.drawWidth / 2,\r\n        //     400,\r\n        //     'Arial'\r\n        // )\r\n        // engine.input.pointers.primary.on('mousedown', () => {\r\n        //     console.log(\"CLICK\")\r\n        //   engine.goToScene('wander')\r\n        // });\r\n\r\n        this.add(playMe);\r\n    }\r\n}","import * as ex from 'excalibur';\n\nexport class LevelOne extends ex.Scene {\n  public onInitialize(engine: ex.Engine) {\n  }\n\n  public onActivate() {}\n  public onDeactivate() {}\n\n  public update(engine: ex.Engine, delta) {\n\n    super.update(engine, delta);\n  }\n}\n","import * as ex from 'excalibur';\nimport { LevelOne } from './scenes/level-one/level-one';\nimport { MainMenu } from './scenes/main-menu/main-menu';\nimport { Player, Enemy, Logo } from './actors';\nimport { Resources } from './resources';\nimport { Game } from './game';\n\nimport { Isle } from './models';\n\nimport { keyToDirection, Direction, mode } from './util';\nimport { TileMap } from 'excalibur';\nimport { World } from './world';\nimport { GameConfig } from './game_config';\n\nconst config: GameConfig = {\n  debugCells: false,\n  debugBoundingBoxes: false,\n  zoom: 4,\n  playerStart: { x: 30, y: 30 },\n  playerSpeed: 6,\n}\n\nex.Physics.collisionPasses = 8;\n\n// Islands are either from before or for after humankind. (gd)\n\n/* \nDreaming of islands — whether with joy or in fear, it \ndoesn't matter — is dreaming of pulling away, of being already separate, far \nfrom any continent, of being lost and alone — or it is dreaming of starting from \nscratch, recreating, beginning anew. (gd)\n*/\n\n// An island doesn't stop being deserted simply because it is inhabited. (gd)\n\n// const island = new Isle();\n\nconst game = new Game(800, 600);\n\nconst mainMenu = new MainMenu();\ngame.add('main-menu', mainMenu);\n\nconst levelOne = new LevelOne();\n\nconst spritemap = new ex.SpriteSheet(Resources.Spritemap, 8, 8, 32, 32);\nconst basicSprites = new ex.SpriteSheet(Resources.BasicSprites, 8, 8, 32, 32);\nconst alexSprites = new ex.SpriteSheet(Resources.Alex, 4, 1, 32, 64);\n\nconst tinyAlexSprite = basicSprites.getSprite(4); //spritemap.getSprite(7));\n//const alexSprite = alexSprites.getSprite(0); //Resources.Alex.asSprite(); //new ex.Sprite(Resources.Alex.);\n\nconst startX = config.playerStart.x, startY = config.playerStart.y;\nconst player = new Player(startX * 32, startY * 32, config, alexSprites);\n\n//player.addDrawing(alexSprite);\n\nconst output = new ex.Label('(welcome to isle)', 500, 500, 'Arial');\n//output.\nconst brand = new ex.Label('(welcome to isle)', 500, 500, 'Arial');\nlevelOne.add(output);\nlevelOne.add(brand);\n\ngame.input.keyboard.on('press', (evt: ex.Input.KeyEvent) => {\n  let { key } = evt;\n  if (key == ex.Input.Keys.E) {\n    let interaction = player.interact();\n    if (interaction) {\n      output.x = levelOne.camera.x;\n      output.y = levelOne.camera.y;\n      output.text = interaction;\n      output.color = ex.Color.White;\n      output.fontSize = 24;\n    }\n  } else {\n    // assume we're trying to move\n    let direction = keyToDirection(key);\n    if (direction) { player.move(direction); }\n  }\n})\n\ngame.input.keyboard.on('hold', (evt: ex.Input.KeyEvent) => {\n  let { key } = evt;\n  let direction : Direction = keyToDirection(key);\n  if (direction) {\n    player.move(direction);\n  }\n})\n\ngame.input.keyboard.on('release', (evt: ex.Input.KeyEvent) => {\n  // console.log(\"RELEASE\", { evt });\n  let { key } = evt;\n  let direction : Direction = keyToDirection(key);\n  if (direction) {\n    player.halt(); //direction);\n    player.interacting = false;\n  }\n});\n\nlevelOne.add(player);\n\nlevelOne.camera.strategy.lockToActor(player);\nlevelOne.camera.zoom(config.zoom);\n\n// game.input.pointers.primary.on('move', (e: ex.Input.PointerEvent) => {\n//   console.log(\"POINTER MOVE\", e.pos);\n// });\n\n\ngame.add('wander', levelOne);\n\n\ngame.start().then(() => {\n  game.goToScene('wander');\n  let world = new World(Resources.Map, config.debugBoundingBoxes);\n\n  let tileMap = world.tileMap;\n  levelOne.addTileMap(tileMap);\n  player.wireWorld(world); //wireMap(tileMap);\n\n  world.blockingActors.forEach(actor => levelOne.add(actor));\n\n  if (config.debugCells) {\n    let lastViewedCell = null;\n    game.input.pointers.primary.on('move', (e: ex.Input.PointerEvent) => {\n      let { pos } = e;\n      let cell = tileMap.getCellByPoint(pos.x, pos.y);\n      if (cell && lastViewedCell != cell) {\n        console.debug(\"CELL\", { pos, spriteId: cell.sprites[0].spriteId }, cell);\n        lastViewedCell = cell;\n      }\n    });\n  }\n\n});\n\n\n"],"sourceRoot":""}