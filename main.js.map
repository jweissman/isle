{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/resources.ts","webpack:///./src/util.ts","webpack:///./src/actors/thing.ts","webpack:///./src/models.ts","webpack:///./src/world.ts","webpack:///./src/game.ts","webpack:///./src/sounds/science.mp3","webpack:///./src/sounds/finemist.mp3","webpack:///./src/images/palm.png","webpack:///./src/images/greatpalm.png","webpack:///./src/images/alex.png","webpack:///./src/images/basic-sprites.png","webpack:///./src/images/spritemap.png","webpack:///./src/images/sword.png","webpack:///./src/actors/brand/logo.ts","webpack:///./src/actors/enemy/enemy.ts","webpack:///./src/actors/player/player.ts","webpack:///./src/actors/index.ts","webpack:///./src/scenes/level-one/level-one.ts","webpack:///./src/index.ts"],"names":["webpackJsonpCallback","data","moduleId","chunkId","chunkIds","moreModules","executeModules","i","resolves","length","installedChunks","push","Object","prototype","hasOwnProperty","call","modules","parentJsonpFunction","shift","deferredModules","apply","checkDeferredModules","result","deferredModule","fulfilled","j","depId","splice","__webpack_require__","s","installedModules","1","exports","module","l","m","c","d","name","getter","o","defineProperty","configurable","enumerable","get","r","value","n","__esModule","default","object","property","p","jsonpArray","window","webpackJsonp","oldJsonpFunction","bind","slice","ex","excalibur_tiled_1","sword","spritemap","basicSprites","alex","greatPalm","palm","fineMist","science","Resources","Sword","Texture","Spritemap","BasicSprites","Alex","Map","GreatPalm","Palm","FineMist","Sound","Science","imagePathAccessor","path","tileset","actualPath","replace","console","log","clamp","min","max","val","clamped","Math","keyToDirection","key","direction","Input","Keys","A","Left","D","Right","S","Down","W","Up","oppositeWay","dir","opp","mode","array","map","maxFreq","item","freq","has","set","addScalarToVec","vec","step","y","x","dirFromVec","abs","e","t","Thing","Actor","[object Object]","zOff","size","debugBoxes","super","Color","Chartreuse","this","computeZ","ctx","engine","draw","collisionArea","debugDraw","LightGray","fillRect","collision","collisionType","CollisionType","Fixed","ellipse","center","Vector","width","height","body","useCircleCollision","polygon","vecs","usePolygonCollision","warn","useBoxCollision","setHeight","setWidth","PreventCollision","resources_1","Item","kind","actor","cell","world","initialize","SpriteSheet","asSprite","BasicSpriteMap","chestClosed","getSprite","chestOpen","itemClasses","Chest","state","open","addDrawing","setDrawing","hp","message","base","tileMap","getCellByIndex","index","cols","destroy","newThing","spawn","itemKinds","WoodLogStack","buildItem","Isle","items","models_1","thing_1","World","scene","island","it","description","activate","getCellByPoint","__isle_item","Array","keys","kill","thing","drawing","constructCollisionArea","theItem","add","setZIndex","mapResource","_mapRes","terrainMeta","spriteTerrainById","spriteCollisionById","itemKindBySpriteId","tilesets","forEach","ts","terrains","terrain","properties","tile","reduce","acc","curr","assign","terrainName","tiles","id","terrainTile","solid","every","some","objectgroup","objects","currMeta","getTileMap","sprites","spriteId","spriteSheetKey","sheet","_spriteSheets","xOff","yOff","cx","cy","cellToRemove","removeSprite","z","newSprite","Game","Engine","config","displayMode","DisplayMode","FullScreen","setup","loader","Loader","addResource","start","then","kick","util_1","Logo","Label","strobeClamp","strobe","intensity","ceil","random","opacity","fontFamily","fontSize","color","Enemy","initialVelocity","Red","Passive","vel","setTo","Player","spriteSheet","wireWorld","_world","halt","move","facing","speed","Active","playerSpeed","interacting","down","up","left","right","on","pos","interactionPos","entityAt","interact","getCenter","clone","debugBoundingBoxes","delta","currentDrawing","update","player_1","enemy_1","logo_1","LevelOne","Scene","level_one_1","actors_1","game_1","world_1","debugCells","zoom","playerStart","bgMusic","game","levelOne","alexSprites","startX","startY","player","output","brand","input","pointers","primary","camera","keyboard","evt","E","interaction","text","White","strategy","lockToActor","processTiledMap","addTileMap","lastViewedCell","debug","goToScene","theme","setTimeout","isLoaded","play"],"mappings":"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","file":"main.js","sourcesContent":[" \t// install a JSONP callback for chunk loading\n \tfunction webpackJsonpCallback(data) {\n \t\tvar chunkIds = data[0];\n \t\tvar moreModules = data[1];\n \t\tvar executeModules = data[2];\n \t\t// add \"moreModules\" to the modules object,\n \t\t// then flag all \"chunkIds\" as loaded and fire callback\n \t\tvar moduleId, chunkId, i = 0, resolves = [];\n \t\tfor(;i < chunkIds.length; i++) {\n \t\t\tchunkId = chunkIds[i];\n \t\t\tif(installedChunks[chunkId]) {\n \t\t\t\tresolves.push(installedChunks[chunkId][0]);\n \t\t\t}\n \t\t\tinstalledChunks[chunkId] = 0;\n \t\t}\n \t\tfor(moduleId in moreModules) {\n \t\t\tif(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {\n \t\t\t\tmodules[moduleId] = moreModules[moduleId];\n \t\t\t}\n \t\t}\n \t\tif(parentJsonpFunction) parentJsonpFunction(data);\n \t\twhile(resolves.length) {\n \t\t\tresolves.shift()();\n \t\t}\n\n \t\t// add entry modules from loaded chunk to deferred list\n \t\tdeferredModules.push.apply(deferredModules, executeModules || []);\n\n \t\t// run deferred modules when all chunks ready\n \t\treturn checkDeferredModules();\n \t};\n \tfunction checkDeferredModules() {\n \t\tvar result;\n \t\tfor(var i = 0; i < deferredModules.length; i++) {\n \t\t\tvar deferredModule = deferredModules[i];\n \t\t\tvar fulfilled = true;\n \t\t\tfor(var j = 1; j < deferredModule.length; j++) {\n \t\t\t\tvar depId = deferredModule[j];\n \t\t\t\tif(installedChunks[depId] !== 0) fulfilled = false;\n \t\t\t}\n \t\t\tif(fulfilled) {\n \t\t\t\tdeferredModules.splice(i--, 1);\n \t\t\t\tresult = __webpack_require__(__webpack_require__.s = deferredModule[0]);\n \t\t\t}\n \t\t}\n \t\treturn result;\n \t}\n\n \t// The module cache\n \tvar installedModules = {};\n\n \t// object to store loaded and loading chunks\n \t// undefined = chunk not loaded, null = chunk preloaded/prefetched\n \t// Promise = chunk loading, 0 = chunk loaded\n \tvar installedChunks = {\n \t\t1: 0\n \t};\n\n \tvar deferredModules = [];\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \tvar jsonpArray = window[\"webpackJsonp\"] = window[\"webpackJsonp\"] || [];\n \tvar oldJsonpFunction = jsonpArray.push.bind(jsonpArray);\n \tjsonpArray.push = webpackJsonpCallback;\n \tjsonpArray = jsonpArray.slice();\n \tfor(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);\n \tvar parentJsonpFunction = oldJsonpFunction;\n\n\n \t// add entry module to deferred list\n \tdeferredModules.push([21,0]);\n \t// run deferred modules when ready\n \treturn checkDeferredModules();\n","import * as ex from 'excalibur';\r\nimport TiledResource from '@excaliburjs/excalibur-tiled';\r\n\r\nconst sword = require('./images/sword.png');\r\nconst spritemap = require('./images/spritemap.png')\r\nconst basicSprites = require('./images/basic-sprites.png')\r\nconst alex = require('./images/alex.png')\r\nconst greatPalm = require('./images/greatpalm.png')\r\nconst palm = require('./images/palm.png')\r\n\r\nconst fineMist = require('./sounds/finemist.mp3')\r\nconst science = require('./sounds/science.mp3')\r\n\r\nlet mapName = 'solidity';\r\n\r\nlet Resources = {\r\n    // images\r\n    Sword: new ex.Texture(sword),\r\n    Spritemap: new ex.Texture(spritemap), // SpriteSheet(spritemap)\r\n    BasicSprites: new ex.Texture(basicSprites),\r\n    Alex: new ex.Texture(alex),\r\n    Map: new TiledResource(`map/${mapName}.json`),\r\n    GreatPalm: new ex.Texture(greatPalm),\r\n    Palm: new ex.Texture(palm),\r\n\r\n    // music\r\n    FineMist: new ex.Sound(fineMist),\r\n    Science: new ex.Sound(science)\r\n}\r\n\r\nResources.Map.imagePathAccessor = (path, tileset) => {\r\n    let actualPath = path.replace(/^(?:\\.\\.\\/)+/, \"\");\r\n    console.log(\"LOAD IMG\", { path, actualPath });\r\n    return actualPath;\r\n    // return \"/assets/\" + path;\r\n}\r\n\r\nexport { Resources }\r\n","import * as ex from 'excalibur';\n\n// restrain a value between a min and a max\nconst clamp = (min: number, max: number) => (val: number) => {\n  let clamped = Math.min(val, max);\n  clamped = Math.max(clamped, min);\n  return clamped;\n}\n\ntype Direction = 'left' | 'right' | 'up' | 'down';\n\nconst keyToDirection = (key: number): Direction => {\n  let direction : Direction;\n  if (key === ex.Input.Keys.A || key === ex.Input.Keys.Left) {\n    direction = 'left';\n  }\n  if (key === ex.Input.Keys.D || key === ex.Input.Keys.Right) {\n    direction = 'right';\n  }\n  if (key === ex.Input.Keys.S || key === ex.Input.Keys.Down) {\n    direction = 'down';\n  }\n  if (key === ex.Input.Keys.W || key === ex.Input.Keys.Up) {\n    direction = 'up';\n  }\n  return direction;\n}\n\nconst oppositeWay = (dir: Direction): Direction => {\n  let opp: Direction;\n  switch(dir) {\n    case 'left': opp = 'right'; break;\n    case 'right': opp = 'left'; break;\n    case 'up': opp = 'down'; break;\n    case 'down': opp = 'up'; break;\n  }\n  return opp;\n}\n\n// suggested impl from https://codereview.stackexchange.com/a/169667\nconst mode = (array) => {\n  const map = new Map(); // new Map();\n\n  let maxFreq = 0;\n  let mode;\n\n  for(const item of array) {\n    let freq = map.has(item) ? map.get(item) : 0;\n    freq++;\n\n    if(freq > maxFreq) {\n      maxFreq = freq;\n      mode = item;\n    }\n    \n    map.set(item, freq);\n  }\n\n  return mode;\n};\n\nconst addScalarToVec = (vec: ex.Vector, direction: Direction, step: number) => {\n  switch (direction) {\n    case 'up':\n      vec.y -= step;\n      break;\n    case 'down':\n      vec.y += step;\n      break;\n    case 'left':\n      vec.x -= step;\n      break;\n    case 'right':\n      vec.x += step;\n      break;\n  }\n}\n\nconst dirFromVec = (vec: ex.Vector): Direction => {\n  let {x,y} = vec;\n  if (Math.abs(x) > Math.abs(y)) {\n    return x > 0 ? 'right' : 'left';\n  } else {\n    return y > 0 ? 'down' : 'up';\n  }\n}\n\nexport {\n  clamp,\n  Direction,\n  keyToDirection,\n  addScalarToVec,\n  dirFromVec,\n  oppositeWay,\n  mode\n};\n","import * as ex from 'excalibur';\r\nimport { GameConfig } from '../game_config';\r\n\r\nexport class Thing extends ex.Actor {\r\n    constructor(\r\n        public x: number,\r\n        public y: number,\r\n        public zOff: number = 0,\r\n        public size: number = 1,\r\n        public debugBoxes: boolean,\r\n    ) {\r\n        super(x, y, 32 * size, 32 * size, ex.Color.Chartreuse);\r\n    }\r\n\r\n    draw(ctx, engine) {\r\n        super.draw(ctx, engine);\r\n        if (this.debugBoxes) {\r\n            this.collisionArea.debugDraw(ctx, ex.Color.LightGray);\r\n            ctx.fillRect(this.x, this.computeZ(), 5, 5);\r\n        }\r\n    }\r\n\r\n    computeZ = () => (this.y + 4 + (this.size-1) * 16); // / 10000;\r\n    constructCollisionArea(collision) {\r\n        if (!collision) {\r\n            if (this.size > 1) {\r\n                // console.log(\"CREATE LARGE THING!!!\")\r\n                this.collisionType = ex.CollisionType.Fixed;\r\n                this.body.useBoxCollision(\r\n                    new ex.Vector(\r\n                        0, //(32 * this.size) / 2,\r\n                        (16 * this.size) - 14 \r\n                    )\r\n                )\r\n                this.setHeight((26*this.size) / 4);\r\n                this.setWidth(24*this.size);\r\n            } else {\r\n                this.collisionType = ex.CollisionType.PreventCollision;\r\n            }\r\n        }\r\n        else {\r\n            this.collisionType = ex.CollisionType.Fixed;\r\n            if (collision.ellipse) {\r\n                let center = new ex.Vector((collision.x + collision.width / 2) - 16, (collision.y + collision.height / 2) - 16);\r\n                this.body.useCircleCollision(collision.height / 2, center);\r\n            }\r\n            else if (collision.polygon) {\r\n                //console.log(\"poly\", { polygon: collision.polygon });\r\n                //debugger;\r\n                let vecs: ex.Vector[] = collision.polygon.map(({ x, y }) => new ex.Vector(x + collision.x, y + collision.y));\r\n                this.body.usePolygonCollision(vecs);\r\n            }\r\n            else {\r\n                console.warn(\"implement collider:\", { collision });\r\n                //debugger;\r\n            }\r\n        }\r\n    }\r\n}","import * as ex from 'excalibur';\r\nimport { Resources } from './resources';\r\nimport { World } from './world';\r\nimport { Cell } from 'excalibur';\r\n\r\n//type Material = 'wood' | 'stone' | 'glass'; // | 'rope'\r\n\r\ninterface ItemKind {\r\n    name: string\r\n    description: string\r\n    //public sprite: ex.Sprite,\r\n\r\n    z?: number\r\n    size?: number\r\n\r\n    drawing?: ex.Sprite\r\n    collision?: any\r\n    // alternate?: boolean\r\n}\r\n\r\nclass Item {\r\n    //static sprites: { [key: string]: ex.Sprite }\r\n\r\n    constructor(\r\n        public kind: ItemKind,\r\n        public actor: ex.Actor,\r\n        public cell: ex.Cell, // the 'root' cell (upper-left corner of large objs)\r\n        //public sprite: ex.Sprite,\r\n        //public state: Object = {},\r\n        public world: World\r\n    ) {\r\n        //console.log(\"CREATED ITEM\", { kind: this.kind, sprite: this.sprite });\r\n        this.initialize();\r\n    }\r\n\r\n    initialize() {}\r\n\r\n    activate() {\r\n      console.warn(\"item is non-interactive\",\r\n          { kind: this.kind });\r\n        return null; //'...';\r\n    }\r\n}\r\n\r\nconst basicSprites = new ex.SpriteSheet(Resources.BasicSprites, 8, 8, 32, 32);\r\nconst greatPalm = Resources.GreatPalm.asSprite();\r\nconst palm = Resources.Palm.asSprite();\r\n\r\n//new ex.Sprite(Resources.GreatPalm.once)\r\nconst BasicSpriteMap = {\r\n    chestClosed: basicSprites.getSprite(2),\r\n    chestOpen: basicSprites.getSprite(3),\r\n    greatPalm, //: basicSprites.getSprite\r\n    palm,\r\n}\r\n\r\n\r\nclass Chest extends Item {\r\n    state: { open: boolean } = { open: false }\r\n\r\n    initialize() {\r\n        this.actor.addDrawing('closed', BasicSpriteMap.chestClosed);\r\n        this.actor.addDrawing('open', BasicSpriteMap.chestOpen);\r\n    }\r\n\r\n    activate() {\r\n        console.log(\"Chest activated!\");\r\n        if (this.state.open) {\r\n            this.actor.setDrawing('closed');\r\n            this.state = { open: false };\r\n            return 'closed';\r\n        } else {\r\n            this.actor.setDrawing('open');\r\n            this.state = { open: true }\r\n            return 'opened';\r\n        }\r\n    }\r\n}\r\n\r\nclass Palm extends Item {\r\n    initialize() {\r\n        this.actor.addDrawing('palm', BasicSpriteMap.palm);\r\n        this.actor.setDrawing('palm');\r\n    }\r\n}\r\n\r\n//class WoodLogStack extends Item {}\r\n\r\nclass GreatPalm extends Item {\r\n    state: { hp: number } = { hp: 100 }\r\n\r\n    initialize() {\r\n        this.actor.addDrawing('palm', BasicSpriteMap.greatPalm);\r\n        this.actor.setDrawing('palm');\r\n    }\r\n\r\n    activate() {\r\n        if (this.state.hp > 0) {\r\n            const message: string = `once a seed (${this.state.hp}%)`\r\n            this.state.hp -= 30;\r\n            return message;\r\n        } else {\r\n            let base: ex.Cell = //this.cell; //world.tileMap.getCellByPoint(this.actor.x, this.actor.y);\r\n            this.world.tileMap.getCellByIndex(\r\n                this.cell.index + \r\n                  (this.kind.size/2) +\r\n                  ((this.kind.size-1) * this.world.tileMap.cols)\r\n            );\r\n            // cell.clearSprites();\r\n\r\n            this.world.destroy(this);\r\n            let newThing = this.world.spawn(\r\n                this.world.itemKinds['WoodLogStack'],\r\n                base,\r\n            );\r\n            console.log(\"TIMBER\", { base, newThing }); //, newThing });\r\n            //this.actor.actions..fade(0.5, 2000);\r\n            // setTimeout(() => this.world.destroy(this), 2000);\r\n            return \"timber\";\r\n        }\r\n    }\r\n}\r\n\r\nconst itemClasses = {\r\n    Chest,\r\n    Palm,\r\n    GreatPalm,\r\n    //Lumber\r\n};\r\n\r\nconst buildItem = (kind: ItemKind, actor: ex.Actor, cell: Cell, world: World): Item => {\r\n    if (itemClasses[kind.name]) {\r\n        //itemClasses[kind.name].sprites[state] = sprite; //can i assign to 'static' members like that??\r\n        return new itemClasses[kind.name](kind, actor, cell, world);\r\n    } else {\r\n        return new Item(kind, actor, cell, world);\r\n    }\r\n}\r\n\r\nclass Isle {\r\n    constructor(public name: string, public items: Array<Item> = []) {\r\n    }\r\n}\r\n\r\nexport { Isle, Item, ItemKind, buildItem };","import * as ex from 'excalibur';\r\nimport { TiledResource } from '@excaliburjs/excalibur-tiled';\r\nimport { Isle, Item, ItemKind, buildItem } from './models';\r\nimport { Thing } from './actors/thing';\r\n// import { GameConfig } from './game_config';\r\n// import { SpriteSheet, Sprite } from 'excalibur';\r\n\r\n// hmmmm (maybe more like a world-factory? [now def more world-ly...])\r\nclass World {\r\n    island: Isle\r\n    tileMap: ex.TileMap\r\n    itemKinds: { [key: string]: ItemKind }\r\n    // blockingActors: Array<ex.Actor>\r\n    // itemKindBySpriteId: { [spriteId: number]: ItemKind }\r\n\r\n    constructor(\r\n        //public mapResource: TiledResource,\r\n        public debugBoxes: boolean,\r\n        public scene: ex.Scene\r\n        //public config: GameConfig\r\n    ) {\r\n        this.island = new Isle('sorna');\r\n        this.itemKinds = {};\r\n        //this._processTiledMap();\r\n    }\r\n\r\n    interact(it: Item): string {\r\n        console.log(\"WOULD INTERACT WITH ITEM\", { it });\r\n        // it.activate();\r\n\r\n        let { name, description } = it.kind;\r\n        return it.activate() || description;\r\n    }\r\n\r\n    entityAt(x: number, y: number): Item {\r\n        let cell = this.tileMap.getCellByPoint(x, y);\r\n        // console.log(\"looking for entity at \", { x, y, cell });\r\n        if (cell && cell['__isle_item']) {\r\n            let it: Item = cell['__isle_item'];\r\n            return it;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    destroy(it: Item) {\r\n        console.log(\"DESTROY\", {it});\r\n        let { kind, cell } = it;\r\n        let { size } = kind;\r\n        for (const x of Array(size).keys()) {\r\n            for (const y of Array(size).keys()) {\r\n                let cellToMark = this.tileMap.getCellByIndex(cell.index + x + (y * this.tileMap.cols));\r\n                // remove item from list...\r\n                cellToMark['__isle_item'] = null;\r\n            }\r\n        }\r\n\r\n        it.actor.kill();\r\n\r\n        return true;\r\n    }\r\n\r\n    // has to have a cell to attach item...\r\n    spawn(kind: ItemKind, cell: ex.Cell): Thing { //}, x: number = 0, y: number =0): Thing { //}, x: number, y: number): Thing {\r\n        //let obj = entityCreator(x,y,32,32);\r\n        let { size } = kind;\r\n        size = size || 1;\r\n\r\n        let x = cell.x + 16 * size;\r\n        let y = cell.y + 16 * size;\r\n        let thing: Thing = new Thing(x, y, size, size, this.debugBoxes);\r\n\r\n        if (kind.drawing) {\r\n          thing.addDrawing(kind.drawing);\r\n        }\r\n\r\n        thing.constructCollisionArea(kind.collision);\r\n\r\n        let theItem: Item = buildItem(kind, thing, cell, this);\r\n        this.island.items.push(theItem);\r\n        for (const x of Array(size).keys()) {\r\n            for (const y of Array(size).keys()) {\r\n                let cellToMark = this.tileMap.getCellByIndex(cell.index + x + (y * this.tileMap.cols));\r\n                cellToMark['__isle_item'] = theItem;\r\n                //if (cellToRemove.sprites[1]) {\r\n                //    //console.log(\"REMOVE SPRITE FROM\", {x,y,cellToRemove});\r\n                //    cellToRemove.removeSprite(cellToRemove.sprites[1]);\r\n                //    cellsToMark.push(cellToRemove);\r\n                //} else {\r\n                //    // console.warn(\"NO SPRITE TO REMOVE FROM\", { x, y, size });\r\n                //}\r\n            }\r\n        }\r\n\r\n        // attach item to it???\r\n\r\n        //cell['__isle_item'] = theItem;\r\n        // cellsToMark.push(cell);\r\n        // if (cellsToMark.length) {\r\n        //     cellsToMark.forEach((c: ex.Cell) => {\r\n        //         c['__isle_item'] = theItem\r\n        //         //c.clearSprites();\r\n        //     });\r\n        // }\r\n\r\n        this.scene.add(thing);\r\n        thing.setZIndex(thing.computeZ());\r\n        console.log(\"SPAWN\", { kind, thing });\r\n        return thing;\r\n        //cell.x + xOff, cell.y + yOff, z, size, this.debugBoxes);\r\n    }\r\n\r\n    processTiledMap(mapResource: TiledResource) {\r\n        let _mapRes: TiledResource = mapResource; // Resources.Map;\r\n        let terrainMeta = {};\r\n        let spriteTerrainById = {};\r\n        let spriteCollisionById = {};\r\n        let itemKindBySpriteId: { [spriteId: number]: ItemKind } = {};\r\n\r\n        _mapRes.data.tilesets.forEach((ts) => {\r\n            //console.log(\"TILESET\", { ts });\r\n            if (ts.terrains) {\r\n                ts.terrains.forEach(terrain => {\r\n                    if (terrain.properties) {\r\n                        terrainMeta[terrain.tile] = terrain.properties.reduce((acc, curr) => {\r\n                            let { name, value } = curr;\r\n                            return (<any>Object).assign(acc, { [name]: value })\r\n                        }, {});\r\n\r\n                        terrainMeta[terrain.tile].terrainName = terrain.name;\r\n\r\n                        console.log(\r\n                            `terrain ${terrain.name} (${terrain.tile}) has props: `,\r\n                            terrainMeta[terrain.tile]\r\n                        )\r\n                    }\r\n                });\r\n\r\n                spriteTerrainById = ts.tiles.reduce((acc, curr) => {\r\n                    let { terrain, id } = curr;\r\n                    const solid = terrain.every(tile => terrainMeta[tile] && terrainMeta[tile].solid); // : false);\r\n                    let terrainTile = { solid };\r\n                    // console.log(`terrain set for ${id}`, { solid }, terrain.map(tile => terrainMeta[tile]))\r\n                    return (<any>Object).assign(acc, { [id]: terrainTile });\r\n                }, {});\r\n\r\n                // console.log({ terrainMeta, spriteTerrainById });\r\n            }\r\n\r\n            // console.log({tiles: ts.tiles})\r\n            if (ts.tiles && ts.tiles.some(tile => tile.objectgroup)) {\r\n                // should also grab item/obj metadata here?\r\n                // console.log(\"todo -- extract obj group collision frame?\");\r\n                //debugger;\r\n                spriteCollisionById = ts.tiles.reduce((acc, curr) => {\r\n                    let { objectgroup, id } = curr;\r\n                    if (objectgroup && objectgroup.objects && objectgroup.objects.length) {\r\n                        return (<any>Object).assign(acc, { [id]: objectgroup.objects[0] });\r\n                    } else {\r\n                        return acc;\r\n                    }\r\n                }, {});\r\n\r\n                console.log({ spriteCollisionById });\r\n                console.log({ ts });\r\n\r\n                itemKindBySpriteId = ts.tiles.reduce((acc, curr) => {\r\n                    // debugger;\r\n                    //console.log({ curr });\r\n                    if (curr.properties) {\r\n                        let currMeta = curr.properties.reduce((acc, curr) => {\r\n                            let { name, value } = curr;\r\n                            return (<any>Object).assign(acc, { [name]: value })\r\n                        }, {});\r\n                        return (<any>Object).assign(acc, { [curr.id]: currMeta });\r\n                    } else {\r\n                        console.warn(\"no props for sprite with id\", { curr });\r\n                        // no props for this one?\r\n                        return acc;\r\n                    }\r\n                }, {})\r\n                //console.log({ itemKindBySpriteId })\r\n            }\r\n        });\r\n\r\n        this.tileMap = _mapRes.getTileMap();\r\n\r\n        // this.blockingActors = [];\r\n\r\n        this.tileMap.data.forEach((cell: ex.Cell, index) => {\r\n\r\n            if (cell.sprites[0]) {\r\n                let tile = spriteTerrainById[cell.sprites[0].spriteId];\r\n                cell = Object.assign(cell, tile);\r\n                // we have another sprite, maybe a thing to build a box for?\r\n                if (cell.sprites[1]) {\r\n                    // we could use the sprite, but... also we could do something else\r\n                    // build our own sprite with z-indexes\r\n                    // better yet: spawn an entity\r\n\r\n                    let { spriteSheetKey, spriteId } = cell.sprites[1];\r\n                    const kind: ItemKind = itemKindBySpriteId[spriteId];\r\n                    this.itemKinds[kind.name] = kind;\r\n\r\n                    // we could get the image and attach it to an actor\r\n                    const collision = spriteCollisionById[spriteId]; //cell.sprites[1].spriteId];\r\n                    //cell.removeSprite(cell.sprites[1]);\r\n\r\n                    let sheet: ex.SpriteSheet = (<any>this.tileMap)._spriteSheets[spriteSheetKey];\r\n                    let xOff = 16, yOff = 16;\r\n                    let size = kind.size || 1;\r\n                    //let cellsToMark = [];\r\n                    if (size > 1) {\r\n                        xOff = 16 * size; yOff = 16 * size;\r\n                        for (const x of Array(size).keys()) {\r\n                            for (const y of Array(size).keys()) {\r\n                                let cx = x, cy = y;\r\n                                let cellToRemove = this.tileMap.getCellByIndex(index + cx + (cy * this.tileMap.cols));\r\n                                if (cellToRemove.sprites[1]) {\r\n                                    //console.log(\"REMOVE SPRITE FROM\", {x,y,cellToRemove});\r\n                                    cellToRemove.removeSprite(cellToRemove.sprites[1]);\r\n                                    //cellsToMark.push(cellToRemove);\r\n                                } else {\r\n                                    // console.warn(\"NO SPRITE TO REMOVE FROM\", { x, y, size });\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    let z: number = (kind && kind.z) || 0;\r\n                    kind.collision = collision;\r\n                    let newSprite: ex.Sprite = sheet.getSprite(spriteId)\r\n                    kind.drawing = newSprite; \r\n\r\n                    let thing: Thing = this.spawn(kind, cell); //, xOff, yOff); //, size);\r\n                    console.log('spawned', {thing});\r\n\r\n\r\n                    //if (kind) { // model it!\r\n                    //    let theItem: Item = buildItem(kind, thing, this);\r\n                    //    this.island.items.push(theItem);\r\n\r\n                    //    //cell['__isle_item'] = theItem;\r\n                    //    cellsToMark.push(cell);\r\n                    //    if (cellsToMark.length) {\r\n                    //        cellsToMark.forEach((c: ex.Cell) => {\r\n                    //            c['__isle_item'] = theItem\r\n                    //            //c.clearSprites();\r\n                    //        });\r\n                    //    }\r\n                    //    //console.log(\"created item\", { theItem });\r\n                    //}\r\n\r\n                    // this.blockingActors.push(thing);\r\n                }\r\n            }\r\n        });\r\n\r\n        console.log({ itemKinds: this.itemKinds });\r\n    }\r\n\r\n}\r\n\r\nexport { World };","import * as ex from 'excalibur';\nimport { Resources } from './resources';\nimport { GameConfig } from './game_config';\nimport { setupMaster } from 'cluster';\nimport { LevelOne } from './scenes/level-one/level-one';\n\nexport class Game extends ex.Engine {\n  constructor(width: number, height: number, config: GameConfig) {\n    super({ width, height, displayMode: ex.DisplayMode.FullScreen });\n\n    this.setup();\n  }\n\n\n  // entrypoint\n\n  public start() {\n    let loader = new ex.Loader();\n    for (let key in Resources) {\n      loader.addResource(Resources[key]);\n    }\n\n    return super.start(loader).then(this.kick);\n  }\n\n  // runs on new Game\n  protected setup() {\n    // console.log(\"game setup here\")\n    // initialize island...\n\n    // const levelOne = new LevelOne();\n    // this.add(levelOne);\n  }\n\n  // runs after loader\n  protected kick() {\n\n  } \n}\n","module.exports = __webpack_public_path__ + \"1452350757e2b9db94866b0f3a01e215.mp3\";","module.exports = __webpack_public_path__ + \"fac8210e66067d101e48370329fc4c5a.mp3\";","module.exports = __webpack_public_path__ + \"db6f4f593c47b1aa561da3453157f4bb.png\";","module.exports = __webpack_public_path__ + \"e12b440e05a78caaa8a410ac5a9ae975.png\";","module.exports = __webpack_public_path__ + \"11463f0311c27e615a3126fa867d1885.png\";","module.exports = __webpack_public_path__ + \"0f2be413ac886c54bff59c2b3291754c.png\";","module.exports = __webpack_public_path__ + \"b9b405c74e06d77b7a88f04d6d3ae5cd.png\";","module.exports = __webpack_public_path__ + \"94754f62e0ae4d23d386e246f5e0cb6e.png\";","import * as ex from 'excalibur';\nimport { clamp } from '../../util';\n\nexport class Logo extends ex.Label {\n  intensity: number;\n  constructor(x: number, y: number, message: string) {\n    super(message);\n    //this.setWidth(200);\n    this.x = x; // (game.drawWidth / 2) - 200;\n    this.y = y; // 400;\n\n    this.fontFamily = 'Arial';\n    this.fontSize = 256;\n\n    this.color = new ex.Color(255,255,255);\n    this.intensity = 150;\n    this.strobe();\n  }\n\n  strobeClamp = clamp(50, 200);\n\n  strobe = () => {\n    this.intensity = this.intensity + Math.ceil(Math.random()*16) - 8;\n    this.intensity = this.strobeClamp(this.intensity);\n    // console.log(\"strobe\", { intensity: this.intensity });\n\n    this.opacity = this.intensity / 255;\n  }\n}\n","import * as ex from 'excalibur';\n\nexport class Enemy extends ex.Actor {\n  constructor({initialVelocity}:{initialVelocity: [number,number]}) {\n    super();\n    this.setWidth(15);\n    this.setHeight(15);\n    this.x = 200;\n    this.y = 200;\n    this.color = ex.Color.Red; // new ex.Color(255, 0, 255);\n\n    // we are collision-aware!\n    this.collisionType = ex.CollisionType.Passive;\n\n    this.vel.setTo(initialVelocity[0], initialVelocity[1]); // 100,140);\n  }\n\n  // draw(ctx: CanvasRenderingContext2D) {\n  //   ctx.fillStyle = this.color.toString()\n  //   ctx.beginPath()\n  //   ctx.arc(this.pos.x, this.pos.y, 10, 0, Math.PI * 2)\n  //   ctx.closePath()\n  //   ctx.fill()\n  // }\n}","import * as ex from 'excalibur';\r\nimport { Game } from '../../game';\r\nimport { Direction, oppositeWay, addScalarToVec, dirFromVec } from '../../util';\r\nimport { Vector } from 'excalibur';\r\nimport { World } from '../../world';\r\nimport { GameConfig } from '../../game_config';\r\n\r\nexport class Player extends ex.Actor {\r\n  interacting: boolean\r\n\r\n  speed: number\r\n  facing: Direction\r\n  _world: World\r\n  alex: { [key: string]: ex.Sprite }\r\n\r\n  constructor(\r\n    public x: number,\r\n    public y: number,\r\n    protected config: GameConfig,\r\n    protected spriteSheet: ex.SpriteSheet \r\n  ) {\r\n    super(x, y, 32, 64);\r\n\r\n    //this.setWidth(24);\r\n    //this.setHeight(20);\r\n    this.collisionArea.body.useCircleCollision(6, new ex.Vector(0, 22));\r\n    //this.collisionArea.pos.y = 32;\r\n\r\n    this.color = new ex.Color(255, 255, 255);\r\n\r\n    this.collisionType = ex.CollisionType.Active;\r\n    this.speed = config.playerSpeed; // cells/sec\r\n    //this.facing = 'down';\r\n    this.interacting = false;\r\n\r\n    this.alex = {\r\n      'down': spriteSheet.getSprite(0),\r\n      'up': spriteSheet.getSprite(1),\r\n      'left': spriteSheet.getSprite(3),\r\n      'right': spriteSheet.getSprite(2),\r\n    }\r\n\r\n    // set facing + init sprite\r\n    this.move('down');\r\n    this.halt();\r\n    this.on('precollision', this.halt);\r\n  }\r\n\r\n  wireWorld = (world: World) => { this._world = world; }\r\n\r\n  interact() {\r\n    let pos = this.interactionPos();\r\n    this.interacting = true;\r\n    let item = this._world.entityAt(pos.x, pos.y) ||\r\n      this._world.entityAt(pos.x, pos.y+10) ||\r\n      this._world.entityAt(pos.x, pos.y-10) ||\r\n      this._world.entityAt(pos.x-10, pos.y) ||\r\n      this._world.entityAt(pos.x+10, pos.y);\r\n    if (item) {\r\n      return this._world.interact(item);\r\n    }\r\n  }\r\n\r\n  interactionPos(): { x:number, y:number }  {\r\n    let interactionPos = this.getCenter().clone();\r\n    let yOff = 20; //this.facing === 'up' ? 10 : 16;\r\n    if (this.facing === 'up') { yOff -= 2; }\r\n    if (this.facing === 'down') { yOff -= 4; }\r\n    interactionPos.y += yOff; //this.getHeight();\r\n    interactionPos.x -= 2;\r\n    addScalarToVec(interactionPos, this.facing, 24);\r\n    return interactionPos;\r\n  }\r\n\r\n  draw(ctx: CanvasRenderingContext2D, engine) {\r\n    super.draw(ctx, engine);\r\n    if (this.config.debugBoundingBoxes) {\r\n      this.collisionArea.debugDraw(ctx, ex.Color.Chartreuse);\r\n      if (this.interacting) {\r\n        let pos = this.interactionPos(); //getCenter().clone();\r\n        ctx.fillRect(pos.x, pos.y - 10, 4, 4);\r\n        ctx.fillRect(pos.x, pos.y, 4, 4);\r\n        ctx.fillRect(pos.x, pos.y + 10, 4, 4);\r\n        ctx.fillRect(pos.x - 10, pos.y, 4, 4);\r\n        ctx.fillRect(pos.x + 10, pos.y, 4, 4);\r\n      }\r\n      ctx.fillRect(this.x, this.computeZ(), 3, 3);\r\n    }\r\n  }\r\n\r\n  computeZ = () => (this.y + 24); // / 10000; //8;\r\n\r\n  halt = () => {\r\n    this.vel = new ex.Vector(0, 0);\r\n  }\r\n\r\n  move = (direction: Direction) => {\r\n    this.facing = direction;\r\n    const step = this.speed * 32;\r\n    this.halt();\r\n    if (direction === 'left')  { this.vel.x = -step; }\r\n    if (direction === 'right') { this.vel.x = step; }\r\n    if (direction === 'up')    { this.vel.y = -step; }\r\n    if (direction === 'down')  { this.vel.y = step; }\r\n  }\r\n\r\n  update(engine, delta) {\r\n    this.currentDrawing = this.alex[this.facing];\r\n    super.update(engine, delta);\r\n    this.setZIndex(this.computeZ());\r\n    //console.log({z: this.getZIndex()})\r\n  }\r\n\r\n}\r\n","import { Player } from './player/player';\nimport { Enemy } from './enemy/enemy';\nimport { Logo } from './brand/logo';\nexport { Player, Enemy, Logo };\n","import * as ex from 'excalibur';\nimport { Resources } from '../../resources';\n\nexport class LevelOne extends ex.Scene {\n  public onInitialize(engine: ex.Engine) {\n  }\n\n  public onActivate() {\n    \n  }\n  public onDeactivate() {}\n\n  public update(engine: ex.Engine, delta) {\n\n    super.update(engine, delta);\n  }\n}\n","import * as ex from 'excalibur';\r\nimport { LevelOne } from './scenes/level-one/level-one';\r\nimport { MainMenu } from './scenes/main-menu/main-menu';\r\nimport { Player } from './actors';\r\nimport { Resources } from './resources';\r\nimport { Game } from './game';\r\n\r\nimport { keyToDirection, Direction, mode } from './util';\r\nimport { World } from './world';\r\nimport { Thing } from \"./actors/thing\";\r\nimport { GameConfig } from './game_config';\r\n\r\n// Islands are either from before or for after humankind. (gd)\r\n\r\n/* \r\nDreaming of islands — whether with joy or in fear, it \r\ndoesn't matter — is dreaming of pulling away, of being already separate, far \r\nfrom any continent, of being lost and alone — or it is dreaming of starting from \r\nscratch, recreating, beginning anew. (gd)\r\n*/\r\n\r\n// An island doesn't stop being deserted simply because it is inhabited. (gd)\r\n\r\nconst config: GameConfig = {\r\n  debugCells: false,\r\n  debugBoundingBoxes: false,\r\n  zoom: 2,\r\n  playerStart: { x: 24, y: 20 },\r\n  playerSpeed: 7.5,\r\n  bgMusic: true\r\n}\r\n\r\n\r\nconst game = new Game(800, 600, config);\r\n\r\n// const mainMenu = new MainMenu();\r\n// game.add('main-menu', mainMenu);\r\n\r\nconst levelOne = new LevelOne();\r\nconst world = new World(config.debugBoundingBoxes, levelOne);\r\n\r\n\r\nconst basicSprites = new ex.SpriteSheet(Resources.BasicSprites, 8, 8, 32, 32);\r\nconst alexSprites = new ex.SpriteSheet(Resources.Alex, 4, 1, 32, 64);\r\n\r\nconst startX = config.playerStart.x, startY = config.playerStart.y;\r\nconst player = new Player(startX * 32, startY * 32, config, alexSprites);\r\n\r\n//player.addDrawing(alexSprite);\r\n\r\nconst output = new ex.Label('(welcome to isle)', 500, 500, 'Arial');\r\n//output.\r\nconst brand = new ex.Label('(welcome to isle)', 500, 500, 'Arial');\r\nlevelOne.add(output);\r\nlevelOne.add(brand);\r\n\r\ngame.input.pointers.primary.on('scroll', (e) => { levelOne.camera.zoom(4); })\r\n\r\ngame.input.keyboard.on('press', (evt: ex.Input.KeyEvent) => {\r\n  // check for current scene?\r\n  let { key } = evt;\r\n  if (key == ex.Input.Keys.E) {\r\n    let interaction = player.interact();\r\n    if (interaction) {\r\n      output.x = levelOne.camera.x;\r\n      output.y = levelOne.camera.y;\r\n      output.text = interaction;\r\n      output.color = ex.Color.White;\r\n      output.fontSize = 24;\r\n    }\r\n  } else {\r\n    // assume we're trying to move\r\n    let direction = keyToDirection(key);\r\n    if (direction) { player.move(direction); }\r\n  }\r\n})\r\n\r\ngame.input.keyboard.on('hold', (evt: ex.Input.KeyEvent) => {\r\n  let { key } = evt;\r\n  let direction : Direction = keyToDirection(key);\r\n  if (direction) {\r\n    player.move(direction);\r\n  }\r\n})\r\n\r\ngame.input.keyboard.on('release', (evt: ex.Input.KeyEvent) => {\r\n  // console.log(\"RELEASE\", { evt });\r\n  let { key } = evt;\r\n  let direction : Direction = keyToDirection(key);\r\n  if (direction) {\r\n    player.halt(); //direction);\r\n    player.interacting = false;\r\n  }\r\n});\r\n\r\nlevelOne.add(player);\r\n\r\nlevelOne.camera.strategy.lockToActor(player);\r\nlevelOne.camera.zoom(config.zoom);\r\n\r\n// game.input.pointers.primary.on('move', (e: ex.Input.PointerEvent) => {\r\n//   console.log(\"POINTER MOVE\", e.pos);\r\n// });\r\n\r\n\r\ngame.add('wander', levelOne);\r\n\r\n\r\ngame.start().then(() => {\r\n  world.processTiledMap(Resources.Map);\r\n\r\n  let tileMap = world.tileMap;\r\n  levelOne.addTileMap(tileMap);\r\n  player.wireWorld(world); //wireMap(tileMap);\r\n\r\n  //world.blockingActors.forEach((actor: Thing) => {\r\n  //  //let y = actor['_cell'].y; // - 7;\r\n  //  //console.log(\"would set z to\", {y, currentZeD: actor.getZIndex()});\r\n  //  levelOne.add(actor);\r\n  //  actor.setZIndex(actor.computeZ());\r\n  //});\r\n  output.setZIndex(1000);\r\n\r\n  if (config.debugCells) {\r\n    let lastViewedCell = null;\r\n    game.input.pointers.primary.on('move', (e: ex.Input.PointerEvent) => {\r\n      let { pos } = e;\r\n      let cell = tileMap.getCellByPoint(pos.x, pos.y);\r\n      if (cell && lastViewedCell != cell) {\r\n        console.debug(\"CELL\", { pos, spriteId: cell.sprites[0].spriteId }, cell);\r\n        lastViewedCell = cell;\r\n      }\r\n    });\r\n  }\r\n\r\n  game.goToScene('wander');\r\n\r\n  //theme.play();\r\n  //theme.load().then(() => {\r\n\r\n  //  theme.play()\r\n  //}); //() => theme.play();\r\n  //if (theme.isLoaded) {\r\n  //  console.log(\"playing song...\");\r\n  //  //debugger;\r\n  //  //theme.play(1.0);\r\n  //} else {\r\n  //  console.error(\"theme song not loaded?\")\r\n  //  //throw new Error(\"theme song wasn't loaded?\")\r\n  //}\r\n\r\n  // really should be an audio player\r\n  if (config.bgMusic) {\r\n    let theme = Resources.FineMist; //Science;\r\n    // wait a tiny bit for music to load??? (seems to work welll)\r\n    setTimeout(() => {\r\n      console.log('about to play music', { theme, isLoaded: theme.isLoaded() });\r\n      theme.play(0.2) //1.0)\r\n    }, 3000);\r\n  }\r\n\r\n\r\n});\r\n\r\n\r\n"],"sourceRoot":""}