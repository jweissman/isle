{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/util.ts","webpack:///./src/actors/index.ts","webpack:///./src/game.ts","webpack:///./src/images/spritemap.png","webpack:///./src/images/sword.png","webpack:///./src/resources.ts","webpack:///./src/actors/brand/logo.ts","webpack:///./src/actors/enemy/enemy.ts","webpack:///./src/actors/player/player.ts","webpack:///./src/scenes/main-menu/main-menu.ts","webpack:///./src/scenes/level-one/level-one.ts","webpack:///./src/index.ts"],"names":["webpackJsonpCallback","data","moduleId","chunkId","chunkIds","moreModules","executeModules","i","resolves","length","installedChunks","push","Object","prototype","hasOwnProperty","call","modules","parentJsonpFunction","shift","deferredModules","apply","checkDeferredModules","result","deferredModule","fulfilled","j","depId","splice","__webpack_require__","s","installedModules","1","exports","module","l","m","c","d","name","getter","o","defineProperty","configurable","enumerable","get","r","value","n","__esModule","default","object","property","p","jsonpArray","window","webpackJsonp","oldJsonpFunction","bind","slice","ex","clamp","min","max","val","clamped","Math","keyToDirection","key","direction","Input","Keys","A","Left","D","Right","S","Down","W","Up","oppositeWay","dir","opp","mode","array","map","Map","maxFreq","item","freq","has","set","addScalarToVec","vec","step","y","x","dirFromVec","abs","e","t","player_1","Player","enemy_1","Enemy","logo_1","Logo","Game","Engine","[object Object]","width","height","super","displayMode","DisplayMode","FullScreen","loader","start","excalibur_tiled_1","sword","spritemap","Resources","Sword","Texture","Spritemap","imagePathAccessor","path","tileset","actualPath","replace","console","log","util_1","Label","message","this","strobeClamp","strobe","intensity","ceil","random","opacity","fontFamily","fontSize","color","Color","Actor","initialVelocity","setWidth","setHeight","Red","collisionType","CollisionType","Passive","vel","setTo","halt","Vector","move","speed","collisionArea","pos","Active","on","actors_1","simpleButtonFactory","myButton","document","createElement","textContent","MainMenu","Scene","engine","logo","drawWidth","add","addTimer","Timer","playMe","UIActor","onClick","factory","hide","rootElement","style","display","position","body","appendChild","buttonElement","addEventListener","ctx","canvasHeight","_engine","devicePixelRatio","canvasWidth","left","canvas","offsetLeft","top","offsetTop","buttonWidth","clientWidth","buttonHeight","clientHeight","goToScene","LevelOne","level_one_1","main_menu_1","resources_1","game_1","game","mainMenu","levelOne","sheet","SpriteSheet","player","startX","startY","addDrawing","getSprite","input","keyboard","evt","camera","strategy","lockToActor","Loader","addResource","then","terrainMeta","spriteTerrainById","spriteCollisionById","tilesets","forEach","ts","terrains","terrain","properties","tile","reduce","acc","curr","assign","terrainName","tiles","id","solid","some","terrainTile","objectgroup","objects","tileMap","getTileMap","cell","sprites","spriteId","collision","block","Fixed","useCircleCollision","addTileMap","lastViewedCell","pointers","primary","getCellByPoint"],"mappings":"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","file":"main.js","sourcesContent":[" \t// install a JSONP callback for chunk loading\n \tfunction webpackJsonpCallback(data) {\n \t\tvar chunkIds = data[0];\n \t\tvar moreModules = data[1];\n \t\tvar executeModules = data[2];\n \t\t// add \"moreModules\" to the modules object,\n \t\t// then flag all \"chunkIds\" as loaded and fire callback\n \t\tvar moduleId, chunkId, i = 0, resolves = [];\n \t\tfor(;i < chunkIds.length; i++) {\n \t\t\tchunkId = chunkIds[i];\n \t\t\tif(installedChunks[chunkId]) {\n \t\t\t\tresolves.push(installedChunks[chunkId][0]);\n \t\t\t}\n \t\t\tinstalledChunks[chunkId] = 0;\n \t\t}\n \t\tfor(moduleId in moreModules) {\n \t\t\tif(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {\n \t\t\t\tmodules[moduleId] = moreModules[moduleId];\n \t\t\t}\n \t\t}\n \t\tif(parentJsonpFunction) parentJsonpFunction(data);\n \t\twhile(resolves.length) {\n \t\t\tresolves.shift()();\n \t\t}\n\n \t\t// add entry modules from loaded chunk to deferred list\n \t\tdeferredModules.push.apply(deferredModules, executeModules || []);\n\n \t\t// run deferred modules when all chunks ready\n \t\treturn checkDeferredModules();\n \t};\n \tfunction checkDeferredModules() {\n \t\tvar result;\n \t\tfor(var i = 0; i < deferredModules.length; i++) {\n \t\t\tvar deferredModule = deferredModules[i];\n \t\t\tvar fulfilled = true;\n \t\t\tfor(var j = 1; j < deferredModule.length; j++) {\n \t\t\t\tvar depId = deferredModule[j];\n \t\t\t\tif(installedChunks[depId] !== 0) fulfilled = false;\n \t\t\t}\n \t\t\tif(fulfilled) {\n \t\t\t\tdeferredModules.splice(i--, 1);\n \t\t\t\tresult = __webpack_require__(__webpack_require__.s = deferredModule[0]);\n \t\t\t}\n \t\t}\n \t\treturn result;\n \t}\n\n \t// The module cache\n \tvar installedModules = {};\n\n \t// object to store loaded and loading chunks\n \t// undefined = chunk not loaded, null = chunk preloaded/prefetched\n \t// Promise = chunk loading, 0 = chunk loaded\n \tvar installedChunks = {\n \t\t1: 0\n \t};\n\n \tvar deferredModules = [];\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \tvar jsonpArray = window[\"webpackJsonp\"] = window[\"webpackJsonp\"] || [];\n \tvar oldJsonpFunction = jsonpArray.push.bind(jsonpArray);\n \tjsonpArray.push = webpackJsonpCallback;\n \tjsonpArray = jsonpArray.slice();\n \tfor(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);\n \tvar parentJsonpFunction = oldJsonpFunction;\n\n\n \t// add entry module to deferred list\n \tdeferredModules.push([13,0]);\n \t// run deferred modules when ready\n \treturn checkDeferredModules();\n","import * as ex from 'excalibur';\n\n// restrain a value between a min and a max\nconst clamp = (min: number, max: number) => (val: number) => {\n  let clamped = Math.min(val, max);\n  clamped = Math.max(clamped, min);\n  return clamped;\n}\n\ntype Direction = 'left' | 'right' | 'up' | 'down';\n\nconst keyToDirection = (key: number): Direction => {\n  let direction : Direction;\n  if (key === ex.Input.Keys.A || key === ex.Input.Keys.Left) {\n    direction = 'left';\n  }\n  if (key === ex.Input.Keys.D || key === ex.Input.Keys.Right) {\n    direction = 'right';\n  }\n  if (key === ex.Input.Keys.S || key === ex.Input.Keys.Down) {\n    direction = 'down';\n  }\n  if (key === ex.Input.Keys.W || key === ex.Input.Keys.Up) {\n    direction = 'up';\n  }\n  return direction;\n}\n\nconst oppositeWay = (dir: Direction): Direction => {\n  let opp: Direction;\n  switch(dir) {\n    case 'left': opp = 'right'; break;\n    case 'right': opp = 'left'; break;\n    case 'up': opp = 'down'; break;\n    case 'down': opp = 'up'; break;\n  }\n  return opp;\n}\n\n// suggested impl from https://codereview.stackexchange.com/a/169667\nconst mode = (array) => {\n  const map = new Map(); // new Map();\n\n  let maxFreq = 0;\n  let mode;\n\n  for(const item of array) {\n    let freq = map.has(item) ? map.get(item) : 0;\n    freq++;\n\n    if(freq > maxFreq) {\n      maxFreq = freq;\n      mode = item;\n    }\n    \n    map.set(item, freq);\n  }\n\n  return mode;\n};\n\nconst addScalarToVec = (vec: ex.Vector, direction: Direction, step: number) => {\n  switch (direction) {\n    case 'up':\n      vec.y -= step;\n      break;\n    case 'down':\n      vec.y += step;\n      break;\n    case 'left':\n      vec.x -= step;\n      break;\n    case 'right':\n      vec.x += step;\n      break;\n  }\n}\n\nconst dirFromVec = (vec: ex.Vector): Direction => {\n  let {x,y} = vec;\n  if (Math.abs(x) > Math.abs(y)) {\n    return x > 0 ? 'right' : 'left';\n  } else {\n    return y > 0 ? 'down' : 'up';\n  }\n}\n\nexport {\n  clamp,\n  Direction,\n  keyToDirection,\n  addScalarToVec,\n  dirFromVec,\n  oppositeWay,\n  mode\n};\n","import { Player } from './player/player';\nimport { Enemy } from './enemy/enemy';\nimport { Logo } from './brand/logo';\nexport { Player, Enemy, Logo };\n","import * as ex from 'excalibur';\n\nexport class Game extends ex.Engine {\n  constructor(width: number, height: number) {\n    super({ width, height, displayMode: ex.DisplayMode.FullScreen });\n  }\n\n  public start(loader: ex.Loader) {\n    return super.start(loader);\n  }\n}\n","module.exports = __webpack_public_path__ + \"b9b405c74e06d77b7a88f04d6d3ae5cd.png\";","module.exports = __webpack_public_path__ + \"94754f62e0ae4d23d386e246f5e0cb6e.png\";","import * as ex from 'excalibur';\nimport TiledResource from '@excaliburjs/excalibur-tiled';\n\nconst sword = require('./images/sword.png');\nconst spritemap = require('./images/spritemap.png')\n\nlet mapName = 'solidity';\n\nlet Resources = {\n    Sword: new ex.Texture(sword),\n    Spritemap: new ex.Texture(spritemap), // SpriteSheet(spritemap)\n    Map: new TiledResource(`map/${mapName}.json`)\n}\n\nResources.Map.imagePathAccessor = (path, tileset) => {\n    let actualPath = path.replace(/^(?:\\.\\.\\/)+/, \"\");\n    console.log(\"LOAD IMG\", { path, actualPath });\n    return actualPath;\n    // return \"/assets/\" + path;\n}\n\nexport { Resources }\n","import * as ex from 'excalibur';\nimport { clamp } from '../../util';\n\nexport class Logo extends ex.Label {\n  intensity: number;\n  constructor(x: number, y: number, message: string) {\n    super(message);\n    //this.setWidth(200);\n    this.x = x; // (game.drawWidth / 2) - 200;\n    this.y = y; // 400;\n\n    this.fontFamily = 'Arial';\n    this.fontSize = 256;\n\n    this.color = new ex.Color(255,255,255);\n    this.intensity = 150;\n    this.strobe();\n  }\n\n  strobeClamp = clamp(50, 200);\n\n  strobe = () => {\n    this.intensity = this.intensity + Math.ceil(Math.random()*16) - 8;\n    this.intensity = this.strobeClamp(this.intensity);\n    // console.log(\"strobe\", { intensity: this.intensity });\n\n    this.opacity = this.intensity / 255;\n  }\n}\n","import * as ex from 'excalibur';\n\nexport class Enemy extends ex.Actor {\n  constructor({initialVelocity}:{initialVelocity: [number,number]}) {\n    super();\n    this.setWidth(15);\n    this.setHeight(15);\n    this.x = 200;\n    this.y = 200;\n    this.color = ex.Color.Red; // new ex.Color(255, 0, 255);\n\n    // we are collision-aware!\n    this.collisionType = ex.CollisionType.Passive;\n\n    this.vel.setTo(initialVelocity[0], initialVelocity[1]); // 100,140);\n  }\n\n  // draw(ctx: CanvasRenderingContext2D) {\n  //   ctx.fillStyle = this.color.toString()\n  //   ctx.beginPath()\n  //   ctx.arc(this.pos.x, this.pos.y, 10, 0, Math.PI * 2)\n  //   ctx.closePath()\n  //   ctx.fill()\n  // }\n}","import * as ex from 'excalibur';\nimport { Game } from '../../game';\nimport { Direction, oppositeWay, addScalarToVec, dirFromVec } from '../../util';\nimport { Vector } from 'excalibur';\n\nexport class Player extends ex.Actor {\n  speed: number\n  // _map: ex.TileMap\n  blocked: { [key: string]: boolean }\n\n  constructor(public x: number, public y: number) { //game: Game) {\n    super();\n    this.setWidth(20);\n    this.setHeight(10);\n    this.collisionArea.pos.y = 8;\n    this.collisionArea.pos.x = -4;\n    //this.collisionArea.pos.y = 20;\n    this.color = new ex.Color(255, 255, 255);\n\n    this.collisionType = ex.CollisionType.Active; //.Fixed;\n    //this.body.useBoxCollision(new ex.Vector(0,10));\n    this.speed = 200;\n    //this.friction = 0.2;\n\n    this.on('precollision', (e) => {\n      this.halt();\n      //let dir = dirFromVec(e.intersection);\n      //console.log(\"COLLISION FROM\", { dir });\n      //this.shift(dir, 1);\n    });\n  }\n\n  //draw(ctx, engine) {\n  //  this.collisionArea.debugDraw(ctx, ex.Color.Chartreuse);\n  //  super.draw(ctx, engine);\n  //}\n\n  halt = () => this.vel = new ex.Vector(0,0);\n\n  //wireMap = (_map : ex.TileMap) => { this._map = _map; }\n\n  //tryMove = (direction: Direction) => {\n  //  this.move(direction);\n  //}\n\n  move = (direction: Direction) => {\n    const step = this.speed;\n    if (direction === 'left')  { this.vel.x = -step; }\n    if (direction === 'right') { this.vel.x = step; }\n    if (direction === 'up')    { this.vel.y = -step; }\n    if (direction === 'down')  { this.vel.y = step; }\n  }\n\n  //shift = (direction: Direction, step) => {\n  //  if (direction === 'left')  { this.pos.x += -step; }\n  //  if (direction === 'right') { this.pos.x += step; }\n  //  if (direction === 'up')    { this.pos.y += -step; }\n  //  if (direction === 'down')  { this.pos.y += step; }\n  //}\n\n}\n","import * as ex from 'excalibur';\r\nimport { Logo } from '../../actors';\r\n\r\nconst simpleButtonFactory = (message: string) => {\r\n    let myButton = document.createElement('button');\r\n    myButton.textContent = message; // 'The best button';\r\n    return myButton;\r\n};\r\n\r\nclass Button extends ex.UIActor {\r\n    rootElement: HTMLElement\r\n    buttonElement: HTMLElement\r\n    // onClick: Function\r\n    // _engine: ex.Engine\r\n\r\n    constructor(message, x, y, onClick, factory = simpleButtonFactory) {\r\n        super();\r\n        this.rootElement = document.createElement('div');\r\n        this.rootElement.style.position = 'absolute';\r\n        document.body.appendChild(this.rootElement)\r\n        this.buttonElement = factory(message);\r\n        this.rootElement.appendChild(\r\n            this.buttonElement\r\n        );\r\n        this.buttonElement.addEventListener('click', onClick);\r\n        // this.onClick = onClick;\r\n    }\r\n\r\n    hide = () => this.rootElement.style.display = 'none';\r\n\r\n    draw(ctx: CanvasRenderingContext2D) {\r\n      let canvasHeight = this._engine.canvasHeight / window.devicePixelRatio;\r\n      let canvasWidth = this._engine.canvasWidth / window.devicePixelRatio;\r\n      let left = ctx.canvas.offsetLeft;\r\n      let top = ctx.canvas.offsetTop;\r\n      let buttonWidth = this.buttonElement.clientWidth;\r\n      let buttonHeight = this.buttonElement.clientHeight;\r\n      this.rootElement.style.left = `${left + canvasWidth / 2 - buttonWidth / 2}px`;\r\n      this.rootElement.style.top = `${top + canvasHeight / 2 - buttonHeight / 2 + 100}px`;\r\n    }\r\n}\r\n\r\nexport class MainMenu extends ex.Scene {\r\n    public onInitialize(engine: ex.Engine) {\r\n        const logo = new Logo(\r\n            engine.drawWidth / 2,\r\n            400,\r\n            'Isle'\r\n        );\r\n        this.add(logo);\r\n\r\n        engine.addTimer(\r\n            new ex.Timer(\r\n                logo.strobe,\r\n                20,\r\n                true\r\n            )\r\n        )\r\n                \r\n        const playMe = new Button(\r\n            'start game',\r\n            engine.drawWidth / 2,\r\n            400,\r\n            () => {\r\n                playMe.hide()\r\n                engine.goToScene('wander');\r\n            }\r\n        ); \r\n        // new ex.Label(\r\n        //     'start game',\r\n        //     engine.drawWidth / 2,\r\n        //     400,\r\n        //     'Arial'\r\n        // )\r\n        // engine.input.pointers.primary.on('mousedown', () => {\r\n        //     console.log(\"CLICK\")\r\n        //   engine.goToScene('wander')\r\n        // });\r\n\r\n        this.add(playMe);\r\n    }\r\n}","import * as ex from 'excalibur';\n\nexport class LevelOne extends ex.Scene {\n  public onInitialize(engine: ex.Engine) {\n  }\n  public onActivate() {}\n  public onDeactivate() {}\n}\n","import * as ex from 'excalibur';\nimport { LevelOne } from './scenes/level-one/level-one';\nimport { MainMenu } from './scenes/main-menu/main-menu';\nimport { Player, Enemy, Logo } from './actors';\nimport { Resources } from './resources';\nimport { Game } from './game';\n\nimport { Isle } from './models';\n\nimport { keyToDirection, Direction, mode } from './util';\nimport { TileMap } from 'excalibur';\n\n// const island = new Isle();\n\nconst game = new Game(800, 600);\n\nconst mainMenu = new MainMenu();\ngame.add('main-menu', mainMenu);\n\nconst levelOne = new LevelOne();\n\nconst sheet = new ex.SpriteSheet(Resources.Spritemap, 8, 8, 32, 32);\n\nconst startX = 4, startY = 4;\nconst player = new Player(startX * 32, startY * 32);\n\n\nplayer.addDrawing(sheet.getSprite(7));\n\ngame.input.keyboard.on('press', (evt: ex.Input.KeyEvent) => {\n  let { key } = evt;\n  let direction = keyToDirection(key);\n  if (direction) {\n    player.move(direction);\n  }\n})\n\ngame.input.keyboard.on('hold', (evt: ex.Input.KeyEvent) => {\n  let { key } = evt;\n  let direction : Direction = keyToDirection(key);\n  if (direction) {\n    player.move(direction);\n  }\n})\n\ngame.input.keyboard.on('release', (evt: ex.Input.KeyEvent) => {\n  console.log(\"RELEASE\", { evt });\n  let { key } = evt;\n  let direction : Direction = keyToDirection(key);\n  if (direction) {\n    player.halt(); //direction);\n  }\n});\n\nlevelOne.add(player);\n\nlevelOne.camera.strategy.lockToActor(player);\n\n// game.input.pointers.primary.on('move', (e: ex.Input.PointerEvent) => {\n//   console.log(\"POINTER MOVE\", e.pos);\n// });\n\n\ngame.add('wander', levelOne);\n\nlet loader = new ex.Loader();\nfor (let key in Resources) {\n  loader.addResource(Resources[key]);\n}\n\ngame.start(loader).then(() => {\n  game.goToScene('wander');\n\n  let _mapRes = Resources.Map;\n  let terrainMeta = {};\n  let spriteTerrainById = {};\n  let spriteCollisionById = {};\n\n  _mapRes.data.tilesets.forEach((ts) => {\n    console.log(\"TILESET\", { ts });\n    if (ts.terrains) {\n      ts.terrains.forEach(terrain => {\n        if (terrain.properties) {\n          terrainMeta[terrain.tile] = terrain.properties.reduce((acc, curr) => {\n            let { name, value } = curr;\n            return (<any>Object).assign(acc, { [name]: value })\n          }, {});\n\n          terrainMeta[terrain.tile].terrainName = terrain.name;\n\n          console.log(\n            `terrain ${terrain.name} (${terrain.tile}) has props: `,\n            terrainMeta[terrain.tile]\n          )\n        }\n      });\n\n      spriteTerrainById = ts.tiles.reduce((acc, curr) => {\n        let { terrain, id } = curr;\n        const solid = terrain.some(tile => terrainMeta[tile] && terrainMeta[tile].solid); // : false);\n        let terrainTile = { solid };\n        console.log(`terrain set for ${id}`, {solid}, terrain.map(tile => terrainMeta[tile]))\n        return (<any>Object).assign(acc, { [id]: terrainTile });\n      }, {});\n\n      console.log({ terrainMeta, spriteTerrainById });\n    }\n\n    // console.log({tiles: ts.tiles})\n    if (ts.tiles && ts.tiles.some(tile => tile.objectgroup)) {\n      // console.log(\"todo -- extract obj group collision frame?\");\n      //debugger;\n      spriteCollisionById = ts.tiles.reduce((acc, curr) => {\n        let { objectgroup, id } = curr;\n        if (objectgroup && objectgroup.objects && objectgroup.objects.length) {\n          return (<any>Object).assign(acc, { [id]: objectgroup.objects[0] });\n        } else {\n          return acc;\n        }\n      }, {});\n\n      console.log({spriteCollisionById});\n\n    }\n  });\n\n\n  let tileMap: ex.TileMap = Resources.Map.getTileMap();\n\n  tileMap.data.forEach((cell: ex.Cell) => {\n    let tile = spriteTerrainById[cell.sprites[0].spriteId];\n    // console.log({ cell, tile });\n    if (cell.sprites[1]) {\n      const collision = spriteCollisionById[cell.sprites[1].spriteId]; \n      // may need to grab object group?\n      //cell.\n      //debugger;\n      let block = new ex.Actor(cell.x + 12, cell.y, 32, 32);\n      block.collisionType = ex.CollisionType.Fixed;\n      block.body.useCircleCollision(\n        collision.height, // / 1.2,\n        new ex.Vector(collision.x, collision.y)\n        // 16,16) // 0,0) // collision.x, collision.y)\n      );\n      //block.draw = (ctx) => { //block.body.actor.debugDraw(ctx); }\n      //  block.collisionArea.debugDraw(ctx, ex.Color.LightGray);\n      //}\n      // block.pos.x = cell.x;\n      // block.pos.y = cell.y;\n      console.log({collision, block});\n      // add to level\n      levelOne.add(block);\n    }\n    cell = Object.assign(cell, tile);\n  });\n\n  levelOne.addTileMap(tileMap);\n  // player.wireMap(tileMap);\n  //player.on('collisionstart', console.log);\n\n  // console.log(\"setup pointers...\");\n\n  let lastViewedCell = null;\n  game.input.pointers.primary.on('move', (e: ex.Input.PointerEvent) => {\n    let { pos } = e;\n    let cell = tileMap.getCellByPoint(pos.x, pos.y);\n    if (cell && lastViewedCell != cell) {\n    //console.log(\"---> INSPECT CELL AT\", { pos });\n      // console.debug(\"CELL\", { pos, spriteId: cell.sprites[0].spriteId }, cell);\n      lastViewedCell = cell; \n    }\n  });\n\n  // console.log(\"pointers setup!\");\n\n  // debugger;\n\n  // levelOne.camera.zoom(1, 1000);\n  // tileMap.collides(player)\n  \n\n});\n\n\n"],"sourceRoot":""}