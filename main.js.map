{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/util.ts","webpack:///./src/resources.ts","webpack:///./src/actors/brand/logo.ts","webpack:///./src/actors/enemy/enemy.ts","webpack:///./src/actors/player/player.ts","webpack:///./src/actors/index.ts","webpack:///./src/actors/thing.ts","webpack:///./src/models.ts","webpack:///./src/world.ts","webpack:///./src/game.ts","webpack:///./src/sounds/science.mp3","webpack:///./src/sounds/finemist.mp3","webpack:///./src/images/campfire.png","webpack:///./src/images/palm.png","webpack:///./src/images/greatpalm.png","webpack:///./src/images/miranda.png","webpack:///./src/images/alex.png","webpack:///./src/images/basic-sprites.png","webpack:///./src/images/spritemap.png","webpack:///./src/scenes/level-one/level-one.ts","webpack:///./src/index.ts"],"names":["webpackJsonpCallback","data","moduleId","chunkId","chunkIds","moreModules","executeModules","i","resolves","length","installedChunks","push","Object","prototype","hasOwnProperty","call","modules","parentJsonpFunction","shift","deferredModules","apply","checkDeferredModules","result","deferredModule","fulfilled","j","depId","splice","__webpack_require__","s","installedModules","1","exports","module","l","m","c","d","name","getter","o","defineProperty","configurable","enumerable","get","r","value","n","__esModule","default","object","property","p","jsonpArray","window","webpackJsonp","oldJsonpFunction","bind","slice","ex","coinflip","Math","random","clamp","min","max","val","clamped","keyToDirection","key","direction","Input","Keys","A","Left","D","Right","S","Down","W","Up","oppositeWay","dir","opp","mode","array","map","Map","maxFreq","item","freq","has","set","addScalarToVec","vec","step","y","x","dirFromVec","abs","e","t","excalibur_tiled_1","spritemap","basicSprites","alex","miranda","greatPalm","palm","campfire","fineMist","science","Resources","Alex","Texture","Miranda","Spritemap","BasicSprites","GreatPalm","Palm","Campfire","FineMist","Sound","Science","imagePathAccessor","path","tileset","actualPath","replace","console","log","util_1","Logo","Label","[object Object]","message","super","this","strobeClamp","strobe","intensity","ceil","opacity","fontFamily","fontSize","color","Color","Enemy","Actor","initialVelocity","setWidth","setHeight","Red","collisionType","CollisionType","Passive","vel","setTo","Player","config","spriteSheet","wireWorld","world","_world","computeZ","halt","Vector","move","facing","speed","collisionArea","body","useCircleCollision","Active","playerSpeed","interacting","down","getSprite","up","left","right","on","pos","interactionPos","entityAndCell","entityAt","entity","cell","interact","getCenter","clone","yOff","ctx","engine","draw","debugBoundingBoxes","debugDraw","Chartreuse","fillRect","delta","currentDrawing","update","setZIndex","player_1","enemy_1","logo_1","Thing","zOff","size","debugBoxes","LightGray","collision","Fixed","ellipse","center","width","height","polygon","vecs","usePolygonCollision","warn","useBoxCollision","PreventCollision","resources_1","Item","kind","actor","initialize","SpriteSheet","asSprite","BasicSpriteMap","chestClosed","chestOpen","itemClasses","Chest","state","open","addDrawing","setDrawing","hp","baseCells","offset","tileMap","getCellByIndex","index","cols","destroy","forEach","base","logKind","newThing","spawn","itemKinds","BigCampfire","buildItem","Isle","items","models_1","thing_1","actors_1","World","scene","island","playerCharacterMeta","sprites","primary","it","description","activate","__isle_pc","_primaryCharacter","makePrimaryCharacter","getCellByPoint","__isle_item","Array","keys","kill","thing","drawing","constructCollisionArea","theItem","add","pcMeta","pc","camera","strategy","lockToActor","zoom","mapResource","_mapRes","terrainMeta","spriteTerrainById","spriteCollisionById","characterById","itemKindBySpriteId","tilesets","ts","terrains","terrain","properties","tile","reduce","acc","curr","assign","terrainName","tiles","id","terrainTile","solid","every","some","objectgroup","objects","prop","currMeta","find","getTileMap","spriteId","spriteSheetKey","characterName","removeSprite","createPlayableCharacter","sheet","_spriteSheets","cx","cy","cellToRemove","newSprite","Game","Engine","displayMode","DisplayMode","FullScreen","setup","loader","Loader","addResource","start","then","kick","LevelOne","Scene","level_one_1","game_1","world_1","debugCells","playerStart","bgMusic","game","levelOne","output","brand","input","keyboard","evt","player","primaryCharacter","E","interaction","text","White","processTiledMap","addTileMap","lastViewedCell","pointers","debug","goToScene","theme","setTimeout","isLoaded","play"],"mappings":"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","file":"main.js","sourcesContent":[" \t// install a JSONP callback for chunk loading\n \tfunction webpackJsonpCallback(data) {\n \t\tvar chunkIds = data[0];\n \t\tvar moreModules = data[1];\n \t\tvar executeModules = data[2];\n \t\t// add \"moreModules\" to the modules object,\n \t\t// then flag all \"chunkIds\" as loaded and fire callback\n \t\tvar moduleId, chunkId, i = 0, resolves = [];\n \t\tfor(;i < chunkIds.length; i++) {\n \t\t\tchunkId = chunkIds[i];\n \t\t\tif(installedChunks[chunkId]) {\n \t\t\t\tresolves.push(installedChunks[chunkId][0]);\n \t\t\t}\n \t\t\tinstalledChunks[chunkId] = 0;\n \t\t}\n \t\tfor(moduleId in moreModules) {\n \t\t\tif(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {\n \t\t\t\tmodules[moduleId] = moreModules[moduleId];\n \t\t\t}\n \t\t}\n \t\tif(parentJsonpFunction) parentJsonpFunction(data);\n \t\twhile(resolves.length) {\n \t\t\tresolves.shift()();\n \t\t}\n\n \t\t// add entry modules from loaded chunk to deferred list\n \t\tdeferredModules.push.apply(deferredModules, executeModules || []);\n\n \t\t// run deferred modules when all chunks ready\n \t\treturn checkDeferredModules();\n \t};\n \tfunction checkDeferredModules() {\n \t\tvar result;\n \t\tfor(var i = 0; i < deferredModules.length; i++) {\n \t\t\tvar deferredModule = deferredModules[i];\n \t\t\tvar fulfilled = true;\n \t\t\tfor(var j = 1; j < deferredModule.length; j++) {\n \t\t\t\tvar depId = deferredModule[j];\n \t\t\t\tif(installedChunks[depId] !== 0) fulfilled = false;\n \t\t\t}\n \t\t\tif(fulfilled) {\n \t\t\t\tdeferredModules.splice(i--, 1);\n \t\t\t\tresult = __webpack_require__(__webpack_require__.s = deferredModule[0]);\n \t\t\t}\n \t\t}\n \t\treturn result;\n \t}\n\n \t// The module cache\n \tvar installedModules = {};\n\n \t// object to store loaded and loading chunks\n \t// undefined = chunk not loaded, null = chunk preloaded/prefetched\n \t// Promise = chunk loading, 0 = chunk loaded\n \tvar installedChunks = {\n \t\t1: 0\n \t};\n\n \tvar deferredModules = [];\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \tvar jsonpArray = window[\"webpackJsonp\"] = window[\"webpackJsonp\"] || [];\n \tvar oldJsonpFunction = jsonpArray.push.bind(jsonpArray);\n \tjsonpArray.push = webpackJsonpCallback;\n \tjsonpArray = jsonpArray.slice();\n \tfor(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);\n \tvar parentJsonpFunction = oldJsonpFunction;\n\n\n \t// add entry module to deferred list\n \tdeferredModules.push([22,0]);\n \t// run deferred modules when ready\n \treturn checkDeferredModules();\n","import * as ex from 'excalibur';\n\n// tiny probability handler...\nconst coinflip = () => Math.random() > 0.5\n\n// restrain a value between a min and a max\nconst clamp = (min: number, max: number) => (val: number) => {\n  let clamped = Math.min(val, max);\n  clamped = Math.max(clamped, min);\n  return clamped;\n}\n\ntype Direction = 'left' | 'right' | 'up' | 'down';\n\nconst keyToDirection = (key: number): Direction => {\n  let direction : Direction;\n  if (key === ex.Input.Keys.A || key === ex.Input.Keys.Left) {\n    direction = 'left';\n  }\n  if (key === ex.Input.Keys.D || key === ex.Input.Keys.Right) {\n    direction = 'right';\n  }\n  if (key === ex.Input.Keys.S || key === ex.Input.Keys.Down) {\n    direction = 'down';\n  }\n  if (key === ex.Input.Keys.W || key === ex.Input.Keys.Up) {\n    direction = 'up';\n  }\n  return direction;\n}\n\nconst oppositeWay = (dir: Direction): Direction => {\n  let opp: Direction;\n  switch(dir) {\n    case 'left': opp = 'right'; break;\n    case 'right': opp = 'left'; break;\n    case 'up': opp = 'down'; break;\n    case 'down': opp = 'up'; break;\n  }\n  return opp;\n}\n\n// suggested impl from https://codereview.stackexchange.com/a/169667\nconst mode = (array) => {\n  const map = new Map(); // new Map();\n\n  let maxFreq = 0;\n  let mode;\n\n  for(const item of array) {\n    let freq = map.has(item) ? map.get(item) : 0;\n    freq++;\n\n    if(freq > maxFreq) {\n      maxFreq = freq;\n      mode = item;\n    }\n    \n    map.set(item, freq);\n  }\n\n  return mode;\n};\n\nconst addScalarToVec = (vec: ex.Vector, direction: Direction, step: number) => {\n  switch (direction) {\n    case 'up':\n      vec.y -= step;\n      break;\n    case 'down':\n      vec.y += step;\n      break;\n    case 'left':\n      vec.x -= step;\n      break;\n    case 'right':\n      vec.x += step;\n      break;\n  }\n}\n\nconst dirFromVec = (vec: ex.Vector): Direction => {\n  let {x,y} = vec;\n  if (Math.abs(x) > Math.abs(y)) {\n    return x > 0 ? 'right' : 'left';\n  } else {\n    return y > 0 ? 'down' : 'up';\n  }\n}\n\nexport {\n  clamp,\n  Direction,\n  keyToDirection,\n  addScalarToVec,\n  dirFromVec,\n  oppositeWay,\n  mode,\n  coinflip\n};\n","import * as ex from 'excalibur';\r\nimport TiledResource from '@excaliburjs/excalibur-tiled';\r\n\r\n// const sword = require('./images/sword.png');\r\nconst spritemap = require('./images/spritemap.png')\r\nconst basicSprites = require('./images/basic-sprites.png')\r\n\r\nconst alex = require('./images/alex.png')\r\nconst miranda = require('./images/miranda.png')\r\n\r\nconst greatPalm = require('./images/greatpalm.png')\r\nconst palm = require('./images/palm.png')\r\nconst campfire = require('./images/campfire.png')\r\n\r\nconst fineMist = require('./sounds/finemist.mp3')\r\nconst science = require('./sounds/science.mp3')\r\n\r\nlet mapName = 'solidity';\r\n\r\nlet Resources = {\r\n    // images\r\n    Alex: new ex.Texture(alex),\r\n    Miranda: new ex.Texture(miranda),\r\n\r\n    //Sword: new ex.Texture(sword),\r\n    Spritemap: new ex.Texture(spritemap), // SpriteSheet(spritemap)\r\n    BasicSprites: new ex.Texture(basicSprites),\r\n    Map: new TiledResource(`map/${mapName}.json`),\r\n    GreatPalm: new ex.Texture(greatPalm),\r\n    Palm: new ex.Texture(palm),\r\n    Campfire: new ex.Texture(campfire),\r\n\r\n    // music\r\n    FineMist: new ex.Sound(fineMist),\r\n    Science: new ex.Sound(science)\r\n}\r\n\r\nResources.Map.imagePathAccessor = (path, tileset) => {\r\n    let actualPath = path.replace(/^(?:\\.\\.\\/)+/, \"\");\r\n    console.log(\"LOAD IMG\", { path, actualPath });\r\n    return actualPath;\r\n    // return \"/assets/\" + path;\r\n}\r\n\r\nexport { Resources }\r\n","import * as ex from 'excalibur';\nimport { clamp } from '../../util';\n\nexport class Logo extends ex.Label {\n  intensity: number;\n  constructor(x: number, y: number, message: string) {\n    super(message);\n    //this.setWidth(200);\n    this.x = x; // (game.drawWidth / 2) - 200;\n    this.y = y; // 400;\n\n    this.fontFamily = 'Arial';\n    this.fontSize = 256;\n\n    this.color = new ex.Color(255,255,255);\n    this.intensity = 150;\n    this.strobe();\n  }\n\n  strobeClamp = clamp(50, 200);\n\n  strobe = () => {\n    this.intensity = this.intensity + Math.ceil(Math.random()*16) - 8;\n    this.intensity = this.strobeClamp(this.intensity);\n    // console.log(\"strobe\", { intensity: this.intensity });\n\n    this.opacity = this.intensity / 255;\n  }\n}\n","import * as ex from 'excalibur';\n\nexport class Enemy extends ex.Actor {\n  constructor({initialVelocity}:{initialVelocity: [number,number]}) {\n    super();\n    this.setWidth(15);\n    this.setHeight(15);\n    this.x = 200;\n    this.y = 200;\n    this.color = ex.Color.Red; // new ex.Color(255, 0, 255);\n\n    // we are collision-aware!\n    this.collisionType = ex.CollisionType.Passive;\n\n    this.vel.setTo(initialVelocity[0], initialVelocity[1]); // 100,140);\n  }\n\n  // draw(ctx: CanvasRenderingContext2D) {\n  //   ctx.fillStyle = this.color.toString()\n  //   ctx.beginPath()\n  //   ctx.arc(this.pos.x, this.pos.y, 10, 0, Math.PI * 2)\n  //   ctx.closePath()\n  //   ctx.fill()\n  // }\n}","import * as ex from 'excalibur';\r\nimport { Game } from '../../game';\r\nimport { Direction, oppositeWay, addScalarToVec, dirFromVec } from '../../util';\r\nimport { Vector } from 'excalibur';\r\nimport { World } from '../../world';\r\nimport { GameConfig } from '../../game_config';\r\n\r\nexport class Player extends ex.Actor {\r\n  interacting: boolean\r\n\r\n  speed: number\r\n  facing: Direction\r\n  _world: World\r\n  alex: { [key: string]: ex.Sprite }\r\n\r\n  constructor(\r\n    public x: number,\r\n    public y: number,\r\n    protected config: GameConfig,\r\n    protected spriteSheet: ex.SpriteSheet \r\n  ) {\r\n    super(x, y, 32, 64);\r\n\r\n    //this.setWidth(24);\r\n    //this.setHeight(20);\r\n    this.collisionArea.body.useCircleCollision(6, new ex.Vector(0, 22));\r\n    //this.collisionArea.pos.y = 32;\r\n\r\n    this.color = new ex.Color(255, 255, 255);\r\n\r\n    this.collisionType = ex.CollisionType.Active;\r\n    this.speed = config.playerSpeed; // cells/sec\r\n    //this.facing = 'down';\r\n    this.interacting = false;\r\n\r\n    this.alex = {\r\n      'down': spriteSheet.getSprite(0),\r\n      'up': spriteSheet.getSprite(1),\r\n      'left': spriteSheet.getSprite(3),\r\n      'right': spriteSheet.getSprite(2),\r\n    }\r\n\r\n    // set facing + init sprite\r\n    this.move('down');\r\n    this.halt();\r\n    this.on('precollision', this.halt);\r\n  }\r\n\r\n  wireWorld = (world: World) => { this._world = world; }\r\n\r\n  interact() {\r\n    let pos = this.interactionPos();\r\n    this.interacting = true;\r\n    let entityAndCell = this._world.entityAt(pos.x, pos.y) ||\r\n      this._world.entityAt(pos.x, pos.y+10) ||\r\n      this._world.entityAt(pos.x, pos.y-10) ||\r\n      this._world.entityAt(pos.x-10, pos.y) ||\r\n      this._world.entityAt(pos.x+10, pos.y);\r\n    if (entityAndCell) {\r\n      let { entity, cell } = entityAndCell;\r\n      return this._world.interact(entity, cell);\r\n    }\r\n  }\r\n\r\n  interactionPos(): { x:number, y:number }  {\r\n    let interactionPos = this.getCenter().clone();\r\n    let yOff = 20; //this.facing === 'up' ? 10 : 16;\r\n    if (this.facing === 'up') { yOff -= 2; }\r\n    if (this.facing === 'down') { yOff -= 4; }\r\n    interactionPos.y += yOff; //this.getHeight();\r\n    interactionPos.x -= 2;\r\n    addScalarToVec(interactionPos, this.facing, 24);\r\n    return interactionPos;\r\n  }\r\n\r\n  draw(ctx: CanvasRenderingContext2D, engine) {\r\n    super.draw(ctx, engine);\r\n    if (this.config.debugBoundingBoxes) {\r\n      this.collisionArea.debugDraw(ctx, ex.Color.Chartreuse);\r\n      if (this.interacting) {\r\n        let pos = this.interactionPos(); //getCenter().clone();\r\n        ctx.fillRect(pos.x, pos.y - 10, 4, 4);\r\n        ctx.fillRect(pos.x, pos.y, 4, 4);\r\n        ctx.fillRect(pos.x, pos.y + 10, 4, 4);\r\n        ctx.fillRect(pos.x - 10, pos.y, 4, 4);\r\n        ctx.fillRect(pos.x + 10, pos.y, 4, 4);\r\n      }\r\n      ctx.fillRect(this.x, this.computeZ(), 3, 3);\r\n    }\r\n  }\r\n\r\n  computeZ = () => (this.y + 24); // / 10000; //8;\r\n\r\n  halt = () => {\r\n    this.vel = new ex.Vector(0, 0);\r\n  }\r\n\r\n  move = (direction: Direction) => {\r\n    this.facing = direction;\r\n    const step = this.speed * 32;\r\n    this.halt();\r\n    if (direction === 'left')  { this.vel.x = -step; }\r\n    if (direction === 'right') { this.vel.x = step; }\r\n    if (direction === 'up')    { this.vel.y = -step; }\r\n    if (direction === 'down')  { this.vel.y = step; }\r\n  }\r\n\r\n  update(engine, delta) {\r\n    this.currentDrawing = this.alex[this.facing];\r\n    super.update(engine, delta);\r\n    this.setZIndex(this.computeZ());\r\n    //console.log({z: this.getZIndex()})\r\n  }\r\n\r\n}\r\n","import { Player } from './player/player';\nimport { Enemy } from './enemy/enemy';\nimport { Logo } from './brand/logo';\nexport { Player, Enemy, Logo };\n","import * as ex from 'excalibur';\r\nimport { GameConfig } from '../game_config';\r\n\r\nexport class Thing extends ex.Actor {\r\n    constructor(\r\n        public x: number,\r\n        public y: number,\r\n        public zOff: number = 0,\r\n        public size: number = 1,\r\n        public debugBoxes: boolean,\r\n    ) {\r\n        super(x, y, 32 * size, 32 * size, ex.Color.Chartreuse);\r\n    }\r\n\r\n    draw(ctx, engine) {\r\n        super.draw(ctx, engine);\r\n        if (this.debugBoxes) {\r\n            this.collisionArea.debugDraw(ctx, ex.Color.LightGray);\r\n            ctx.fillRect(this.x, this.computeZ(), 5, 5);\r\n        }\r\n    }\r\n\r\n    computeZ = () => (this.y + 4 + (this.size-1) * 16); // / 10000;\r\n    constructCollisionArea(collision) {\r\n        if (!collision) {\r\n            if (this.size > 1) {\r\n                // console.log(\"CREATE LARGE THING!!!\")\r\n                this.collisionType = ex.CollisionType.Fixed;\r\n                this.body.useBoxCollision(\r\n                    new ex.Vector(\r\n                        0, //(32 * this.size) / 2,\r\n                        (16 * this.size) - 14 \r\n                    )\r\n                )\r\n                this.setHeight((26*this.size) / 4);\r\n                this.setWidth(24*this.size);\r\n            } else {\r\n                this.collisionType = ex.CollisionType.PreventCollision;\r\n            }\r\n        }\r\n        else {\r\n            this.collisionType = ex.CollisionType.Fixed;\r\n            if (collision.ellipse) {\r\n                let center = new ex.Vector((collision.x + collision.width / 2) - 16, (collision.y + collision.height / 2) - 16);\r\n                this.body.useCircleCollision(collision.height / 2, center);\r\n            }\r\n            else if (collision.polygon) {\r\n                //console.log(\"poly\", { polygon: collision.polygon });\r\n                //debugger;\r\n                let vecs: ex.Vector[] = collision.polygon.map(({ x, y }) => new ex.Vector(x + collision.x, y + collision.y));\r\n                this.body.usePolygonCollision(vecs);\r\n            }\r\n            else {\r\n                console.warn(\"implement collider:\", { collision });\r\n                //debugger;\r\n            }\r\n        }\r\n    }\r\n}","import * as ex from 'excalibur';\r\nimport { Resources } from './resources';\r\nimport { World } from './world';\r\nimport { Cell } from 'excalibur';\r\nimport { coinflip } from './util';\r\n\r\n//type Material = 'wood' | 'stone' | 'glass'; // | 'rope'\r\n\r\ninterface ItemKind {\r\n    name: string\r\n    description: string\r\n    //public sprite: ex.Sprite,\r\n\r\n    z?: number\r\n    size?: number\r\n\r\n    drawing?: ex.Sprite\r\n    collision?: any\r\n    // alternate?: boolean\r\n}\r\n\r\nclass Item {\r\n    //static sprites: { [key: string]: ex.Sprite }\r\n\r\n    constructor(\r\n        public kind: ItemKind,\r\n        public actor: ex.Actor,\r\n        public cell: ex.Cell, // the 'root' cell (upper-left corner of large objs)\r\n        //public sprite: ex.Sprite,\r\n        //public state: Object = {},\r\n        public world: World\r\n    ) {\r\n        //console.log(\"CREATED ITEM\", { kind: this.kind, sprite: this.sprite });\r\n        this.initialize();\r\n    }\r\n\r\n    initialize() {}\r\n\r\n    activate() {\r\n      console.warn(\"item is non-interactive\",\r\n          { kind: this.kind });\r\n        return null; //'...';\r\n    }\r\n}\r\n\r\nconst basicSprites = new ex.SpriteSheet(Resources.BasicSprites, 8, 8, 32, 32);\r\nconst greatPalm = Resources.GreatPalm.asSprite();\r\nconst palm = Resources.Palm.asSprite();\r\nconst campfire = Resources.Campfire.asSprite();\r\n\r\n//new ex.Sprite(Resources.GreatPalm.once)\r\nconst BasicSpriteMap = {\r\n    chestClosed: basicSprites.getSprite(2),\r\n    chestOpen: basicSprites.getSprite(3),\r\n    greatPalm, //: basicSprites.getSprite\r\n    palm,\r\n    campfire,\r\n}\r\n\r\n\r\nclass Chest extends Item {\r\n    state: { open: boolean } = { open: false }\r\n\r\n    initialize() {\r\n        this.actor.addDrawing('closed', BasicSpriteMap.chestClosed);\r\n        this.actor.addDrawing('open', BasicSpriteMap.chestOpen);\r\n        //this.actor.addDrawing();\r\n    }\r\n\r\n    activate() {\r\n        console.log(\"Chest activated!\");\r\n        if (this.state.open) {\r\n            this.actor.setDrawing('closed');\r\n            this.state = { open: false };\r\n            return 'closed';\r\n        } else {\r\n            this.actor.setDrawing('open');\r\n            this.state = { open: true }\r\n            return 'opened';\r\n        }\r\n    }\r\n}\r\n\r\nclass Palm extends Item {\r\n    initialize() {\r\n        this.actor.addDrawing('palm', BasicSpriteMap.palm);\r\n        this.actor.setDrawing('palm');\r\n    }\r\n}\r\n\r\nclass BigCampfire extends Item {\r\n    initialize() {\r\n        this.actor.addDrawing('fire', BasicSpriteMap.campfire);\r\n        this.actor.setDrawing('fire');\r\n        //this.actor.setDrawing('big')\r\n    }\r\n}\r\n\r\n//class WoodLogStack extends Item {}\r\n\r\nclass GreatPalm extends Item {\r\n    state: { hp: number } = { hp: 100 }\r\n\r\n    initialize() {\r\n        this.actor.addDrawing('palm', BasicSpriteMap.greatPalm);\r\n        this.actor.setDrawing('palm');\r\n    }\r\n\r\n    activate() {\r\n        if (this.state.hp > 0) {\r\n            const message: string = `once a seed (${this.state.hp}%)`\r\n            this.state.hp -= 30;\r\n            return message;\r\n        } else {\r\n            let baseCells: Array<ex.Cell> = [-2,-1,0,1,2].map((offset) => //this.cell; //world.tileMap.getCellByPoint(this.actor.x, this.actor.y);\r\n                this.world.tileMap.getCellByIndex(\r\n                    this.cell.index +\r\n                    (this.kind.size / 2) + offset +\r\n                    ((this.kind.size - 1) * this.world.tileMap.cols)\r\n                )\r\n            );\r\n            // cell.clearSprites();\r\n\r\n            this.world.destroy(this);\r\n\r\n            baseCells.forEach(base => {\r\n                let logKind = coinflip() ? 'WoodLogStack' : 'WoodLog';\r\n                let newThing = this.world.spawn(\r\n                    this.world.itemKinds[logKind],\r\n                    base,\r\n                );\r\n                console.log(\"TIMBER\", { base, newThing }); //, newThing });\r\n            });\r\n            //this.actor.actions..fade(0.5, 2000);\r\n            // setTimeout(() => this.world.destroy(this), 2000);\r\n            return \"timber\";\r\n        }\r\n    }\r\n}\r\n\r\nconst itemClasses = {\r\n    Chest,\r\n    Palm,\r\n    GreatPalm,\r\n    BigCampfire,\r\n    //Lumber\r\n};\r\n\r\nconst buildItem = (kind: ItemKind, actor: ex.Actor, cell: Cell, world: World): Item => {\r\n    if (itemClasses[kind.name]) {\r\n        //itemClasses[kind.name].sprites[state] = sprite; //can i assign to 'static' members like that??\r\n        return new itemClasses[kind.name](kind, actor, cell, world);\r\n    } else {\r\n        return new Item(kind, actor, cell, world);\r\n    }\r\n}\r\n\r\nclass Isle {\r\n    constructor(public name: string, public items: Array<Item> = []) {\r\n    }\r\n}\r\n\r\nexport { Isle, Item, ItemKind, buildItem };","import * as ex from 'excalibur';\r\nimport { TiledResource } from '@excaliburjs/excalibur-tiled';\r\nimport { Isle, Item, ItemKind, buildItem } from './models';\r\nimport { Thing } from './actors/thing';\r\nimport { Resources } from './resources';\r\nimport { Player } from './actors';\r\nimport { GameConfig } from './game_config';\r\n// import { GameConfig } from './game_config';\r\n// import { SpriteSheet, Sprite } from 'excalibur';\r\n\r\ntype Entity = Item | Player\r\n\r\n// hmmmm (maybe more like a world-factory? [now def more world-ly...])\r\nclass World {\r\n    island: Isle\r\n    tileMap: ex.TileMap\r\n    itemKinds: { [key: string]: ItemKind }\r\n    playerCharacterMeta: { [name: string]: {\r\n        sprites: ex.SpriteSheet,\r\n        primary: boolean\r\n    }}\r\n    debugBoxes: boolean\r\n    // blockingActors: Array<ex.Actor>\r\n    // itemKindBySpriteId: { [spriteId: number]: ItemKind }\r\n\r\n    constructor(\r\n        //public mapResource: TiledResource,\r\n        //public debugBoxes: boolean,\r\n        public scene: ex.Scene,\r\n        public config: GameConfig\r\n    ) {\r\n        this.island = new Isle('sorna');\r\n        this.itemKinds = {};\r\n        this.playerCharacterMeta = {\r\n            Alex: {\r\n                sprites: new ex.SpriteSheet(Resources.Alex, 4, 1, 32, 64),\r\n                primary: false\r\n            },\r\n            Miranda: {\r\n                sprites: new ex.SpriteSheet(Resources.Miranda, 4, 1, 32, 64),\r\n                primary: true\r\n            }\r\n        }\r\n        this.debugBoxes = config.debugBoundingBoxes;\r\n        //this._processTiledMap();\r\n    }\r\n\r\n    interact(it: Entity, cell: ex.Cell): string {\r\n        if (it instanceof Item) {\r\n            console.log(\"WOULD INTERACT WITH ITEM\", { it });\r\n            let { name, description } = it.kind;\r\n            return it.activate() || description;\r\n        } else if (it instanceof Player) {\r\n            console.log(\"WOULD SWAP PLAYER CHARACTER!!!\", {it});\r\n            cell['__isle_pc'] = this._primaryCharacter;\r\n            this._primaryCharacter.x = cell.x\r\n            this._primaryCharacter.y = cell.y-16\r\n            this._primaryCharacter.halt();\r\n            //cell.removeSprite(cell.sprites[1]);\r\n            // todo remove new pc from cell, add old pc TO that cell...\r\n            this.makePrimaryCharacter(it);\r\n            return \"nice to see you again\";\r\n        }\r\n    }\r\n\r\n    entityAt(x: number, y: number): { entity: Entity, cell: ex.Cell } {\r\n        let cell = this.tileMap.getCellByPoint(x, y);\r\n        // console.log(\"looking for entity at \", { x, y, cell });\r\n        if (cell) {\r\n            if (cell['__isle_item']) {\r\n                let it: Item = cell['__isle_item'];\r\n                return { entity: it, cell };\r\n            } else if (cell['__isle_pc']) {\r\n                let pc: Player = cell['__isle_pc'];\r\n                return { entity: pc, cell };\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    destroy(it: Item) {\r\n        console.log(\"DESTROY\", {it});\r\n        let { kind, cell } = it;\r\n        let { size } = kind;\r\n        for (const x of Array(size).keys()) {\r\n            for (const y of Array(size).keys()) {\r\n                let cellToMark = this.tileMap.getCellByIndex(cell.index + x + (y * this.tileMap.cols));\r\n                // remove item from list...\r\n                cellToMark['__isle_item'] = null;\r\n            }\r\n        }\r\n\r\n        it.actor.kill();\r\n\r\n        return true;\r\n    }\r\n\r\n    spawn(kind: ItemKind, cell: ex.Cell): Thing {\r\n        let { size } = kind;\r\n        size = size || 1;\r\n\r\n        let x = cell.x + 16 * size;\r\n        let y = cell.y + 16 * size;\r\n        let thing: Thing = new Thing(x, y, size, size, this.debugBoxes);\r\n\r\n        if (kind.drawing) {\r\n          thing.addDrawing(kind.drawing);\r\n        }\r\n\r\n        thing.constructCollisionArea(kind.collision);\r\n\r\n        let theItem: Item = buildItem(kind, thing, cell, this);\r\n        this.island.items.push(theItem);\r\n        for (const x of Array(size).keys()) {\r\n            for (const y of Array(size).keys()) {\r\n                let cellToMark = this.tileMap.getCellByIndex(cell.index + x + (y * this.tileMap.cols));\r\n                cellToMark['__isle_item'] = theItem;\r\n            }\r\n        }\r\n\r\n        this.scene.add(thing);\r\n        thing.setZIndex(thing.computeZ());\r\n        // console.log(`SPAWN ${kind.name}`, { kind, thing });\r\n        return thing;\r\n    }\r\n\r\n    _primaryCharacter: Player\r\n    createPlayableCharacter(name: string, cell: ex.Cell) { // x: number, y: number) {\r\n        // lookup pcs by name???\r\n        let pcMeta = this.playerCharacterMeta[name];\r\n        if (pcMeta) {\r\n            let { x, y } = cell;\r\n            console.log(\"CREATE PC\", { pcMeta });\r\n            const pc = new Player(x, y, this.config, pcMeta.sprites);\r\n            pc.wireWorld(this);\r\n            this.scene.add(pc);\r\n            cell['__isle_pc'] = pc;\r\n            if (pcMeta.primary) {\r\n                this.makePrimaryCharacter(pc);\r\n            } else {\r\n                console.log(\"PC is not primary\", { pcMeta });\r\n            }\r\n        }\r\n        // add to scene\r\n        // if primary character, lock cam!\r\n    }\r\n\r\n    makePrimaryCharacter(pc: Player) {\r\n        console.log(\"CREATE PRIMARY PC!!!\", { pc });\r\n        this._primaryCharacter = pc;\r\n        // fix cam!\r\n        this.scene.camera.strategy.lockToActor(pc);\r\n        this.scene.camera.zoom(this.config.zoom);\r\n    }\r\n\r\n    primaryCharacter() {\r\n        return this._primaryCharacter;\r\n    }\r\n\r\n    processTiledMap(mapResource: TiledResource) {\r\n        let _mapRes: TiledResource = mapResource; // Resources.Map;\r\n        let terrainMeta = {};\r\n        let spriteTerrainById = {};\r\n        let spriteCollisionById = {};\r\n\r\n        let characterById = {};\r\n\r\n        let itemKindBySpriteId: { [spriteId: number]: ItemKind } = {};\r\n\r\n        _mapRes.data.tilesets.forEach((ts) => {\r\n            //console.log(\"TILESET\", { ts });\r\n            if (ts.terrains) {\r\n                ts.terrains.forEach(terrain => {\r\n                    if (terrain.properties) {\r\n                        terrainMeta[terrain.tile] = terrain.properties.reduce((acc, curr) => {\r\n                            let { name, value } = curr;\r\n                            return (<any>Object).assign(acc, { [name]: value })\r\n                        }, {});\r\n\r\n                        terrainMeta[terrain.tile].terrainName = terrain.name;\r\n\r\n                        console.log(\r\n                            `terrain ${terrain.name} (${terrain.tile}) has props: `,\r\n                            terrainMeta[terrain.tile]\r\n                        )\r\n                    }\r\n                });\r\n\r\n                spriteTerrainById = ts.tiles.reduce((acc, curr) => {\r\n                    let { terrain, id } = curr;\r\n                    const solid = terrain.every(tile => terrainMeta[tile] && terrainMeta[tile].solid); // : false);\r\n                    let terrainTile = { solid };\r\n                    // console.log(`terrain set for ${id}`, { solid }, terrain.map(tile => terrainMeta[tile]))\r\n                    return (<any>Object).assign(acc, { [id]: terrainTile });\r\n                }, {});\r\n\r\n                // console.log({ terrainMeta, spriteTerrainById });\r\n            }\r\n\r\n            // console.log({tiles: ts.tiles})\r\n            if (ts.tiles && ts.tiles.some(tile => tile.objectgroup)) {\r\n                // should also grab item/obj metadata here?\r\n                // console.log(\"todo -- extract obj group collision frame?\");\r\n                //debugger;\r\n                spriteCollisionById = ts.tiles.reduce((acc, curr) => {\r\n                    let { objectgroup, id } = curr;\r\n                    if (objectgroup && objectgroup.objects && objectgroup.objects.length) {\r\n                        return (<any>Object).assign(acc, { [id]: objectgroup.objects[0] });\r\n                    } else {\r\n                        return acc;\r\n                    }\r\n                }, {});\r\n\r\n                console.log({ spriteCollisionById });\r\n                console.log({ ts });\r\n\r\n                itemKindBySpriteId = ts.tiles.reduce((acc, curr) => {\r\n                    // debugger;\r\n                    //console.log({ curr });\r\n                    if (curr.properties && !curr.properties.some(prop => prop.name === 'character')) {\r\n                        let currMeta = curr.properties.reduce((acc, curr) => {\r\n                            let { name, value } = curr;\r\n                            return (<any>Object).assign(acc, { [name]: value })\r\n                        }, {});\r\n                        return (<any>Object).assign(acc, { [curr.id]: currMeta });\r\n                    } else {\r\n                        console.warn(\"no props for sprite with id (or maybe char?)\", { curr });\r\n                        // no props for this one?\r\n                        return acc;\r\n                    }\r\n                }, {})\r\n                //console.log({ itemKindBySpriteId })\r\n\r\n                \r\n            }\r\n\r\n            if (ts.tiles && ts.tiles.some(tile => tile.properties && tile.properties.some(prop => prop.name === 'character'))) {\r\n                // console.log('character somewhere!!');\r\n                characterById = ts.tiles.reduce((acc, curr) => {\r\n                    if (curr.properties && curr.properties.some(prop => prop.name === 'character')) {\r\n                        // console.log('char found!', { curr });\r\n                        let charProp = curr.properties.find(prop => prop.name === 'character');\r\n                        let name = charProp.value;\r\n                        return (<any>Object.assign(acc, {\r\n                            [curr.id]: name // charProp.value // curr.properties.character.name\r\n                        }));\r\n                    } else {\r\n                        return acc;\r\n                    }\r\n                }, {});\r\n                console.log({ characterById });\r\n            } else {\r\n                console.warn('no chars in tileset', { tiles: ts.tiles })\r\n            }\r\n        });\r\n\r\n        this.tileMap = _mapRes.getTileMap();\r\n\r\n        // this.blockingActors = [];\r\n\r\n        this.tileMap.data.forEach((cell: ex.Cell, index) => {\r\n\r\n            if (cell.sprites[0]) {\r\n                let tile = spriteTerrainById[cell.sprites[0].spriteId];\r\n                cell = Object.assign(cell, tile);\r\n                // we have another sprite, maybe a thing to build a box for?\r\n                if (cell.sprites[1]) {\r\n                    // we could use the sprite, but... also we could do something else\r\n                    // build our own sprite with z-indexes\r\n                    // better yet: spawn an entity\r\n\r\n                    let { spriteSheetKey, spriteId } = cell.sprites[1];\r\n                    const kind: ItemKind = itemKindBySpriteId[spriteId];\r\n                    if (!kind) {\r\n                        const characterName: string = characterById[spriteId];\r\n                        if (characterName) {\r\n                            console.log(\"WOULD CREATE PLAYABLE CHARACTER\", {characterName, cell});\r\n                            cell.removeSprite(cell.sprites[1]); //hhclearSprites();\r\n                            this.createPlayableCharacter(characterName, cell); // cell.x, cell.y);\r\n                        } else {\r\n                            console.warn(\"CELL has sprite with no kind or character\", { cell, itemKindBySpriteId, characterById });\r\n                        }\r\n                        return;\r\n                    } // hm\r\n                    this.itemKinds[kind.name] = kind;\r\n\r\n                    // we could get the image and attach it to an actor\r\n                    const collision = spriteCollisionById[spriteId]; //cell.sprites[1].spriteId];\r\n                    //cell.removeSprite(cell.sprites[1]);\r\n\r\n                    let sheet: ex.SpriteSheet = (<any>this.tileMap)._spriteSheets[spriteSheetKey];\r\n                    // let xOff = 16, yOff = 16;\r\n                    let size = kind.size || 1;\r\n                    //let cellsToMark = [];\r\n                    if (size > 1) {\r\n                        // xOff = 16 * size; yOff = 16 * size;\r\n                        for (const x of Array(size).keys()) {\r\n                            for (const y of Array(size).keys()) {\r\n                                let cx = x, cy = y;\r\n                                let cellToRemove = this.tileMap.getCellByIndex(index + cx + (cy * this.tileMap.cols));\r\n                                if (cellToRemove.sprites[1]) {\r\n                                    //console.log(\"REMOVE SPRITE FROM\", {x,y,cellToRemove});\r\n                                    cellToRemove.removeSprite(cellToRemove.sprites[1]);\r\n                                    //cellsToMark.push(cellToRemove);\r\n                                } else {\r\n                                    // console.warn(\"NO SPRITE TO REMOVE FROM\", { x, y, size });\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    // let z: number = (kind && kind.z) || 0;\r\n                    kind.collision = collision;\r\n                    let newSprite: ex.Sprite = sheet.getSprite(spriteId)\r\n                    kind.drawing = newSprite; \r\n\r\n                    // let thing: Thing = \r\n                    this.spawn(kind, cell);\r\n                }\r\n            }\r\n        });\r\n\r\n        // console.log({ itemKinds: this.itemKinds });\r\n    }\r\n\r\n}\r\n\r\nexport { World };","import * as ex from 'excalibur';\nimport { Resources } from './resources';\nimport { GameConfig } from './game_config';\nimport { setupMaster } from 'cluster';\nimport { LevelOne } from './scenes/level-one/level-one';\n\nexport class Game extends ex.Engine {\n  constructor(width: number, height: number, config: GameConfig) {\n    super({ width, height, displayMode: ex.DisplayMode.FullScreen });\n\n    this.setup();\n  }\n\n\n  // entrypoint\n\n  public start() {\n    let loader = new ex.Loader();\n    for (let key in Resources) {\n      loader.addResource(Resources[key]);\n    }\n\n    return super.start(loader).then(this.kick);\n  }\n\n  // runs on new Game\n  protected setup() {\n    // console.log(\"game setup here\")\n    // initialize island...\n\n    // const levelOne = new LevelOne();\n    // this.add(levelOne);\n  }\n\n  // runs after loader\n  protected kick() {\n\n  } \n}\n","module.exports = __webpack_public_path__ + \"1452350757e2b9db94866b0f3a01e215.mp3\";","module.exports = __webpack_public_path__ + \"fac8210e66067d101e48370329fc4c5a.mp3\";","module.exports = __webpack_public_path__ + \"8e8aa6414e948820c3ad76cc2be5950e.png\";","module.exports = __webpack_public_path__ + \"db6f4f593c47b1aa561da3453157f4bb.png\";","module.exports = __webpack_public_path__ + \"e12b440e05a78caaa8a410ac5a9ae975.png\";","module.exports = __webpack_public_path__ + \"d5a50841caad19e959a464ebc0517db8.png\";","module.exports = __webpack_public_path__ + \"83bd63274b6376b2b4488e70cb516129.png\";","module.exports = __webpack_public_path__ + \"ad94201980b87379a48798e0a4c6e95a.png\";","module.exports = __webpack_public_path__ + \"b9b405c74e06d77b7a88f04d6d3ae5cd.png\";","import * as ex from 'excalibur';\nimport { Resources } from '../../resources';\n\nexport class LevelOne extends ex.Scene {\n  public onInitialize(engine: ex.Engine) {\n  }\n\n  public onActivate() {\n    \n  }\n  public onDeactivate() {}\n\n  public update(engine: ex.Engine, delta) {\n\n    super.update(engine, delta);\n  }\n}\n","import * as ex from 'excalibur';\r\nimport { LevelOne } from './scenes/level-one/level-one';\r\nimport { MainMenu } from './scenes/main-menu/main-menu';\r\nimport { Player } from './actors';\r\nimport { Resources } from './resources';\r\nimport { Game } from './game';\r\n\r\nimport { keyToDirection, Direction, mode } from './util';\r\nimport { World } from './world';\r\nimport { Thing } from \"./actors/thing\";\r\nimport { GameConfig } from './game_config';\r\n\r\n// Islands are either from before or for after humankind. (gd)\r\n\r\n/* \r\nDreaming of islands — whether with joy or in fear, it \r\ndoesn't matter — is dreaming of pulling away, of being already separate, far \r\nfrom any continent, of being lost and alone — or it is dreaming of starting from \r\nscratch, recreating, beginning anew. (gd)\r\n*/\r\n\r\n// An island doesn't stop being deserted simply because it is inhabited. (gd)\r\n\r\nconst config: GameConfig = {\r\n  debugCells: false,\r\n  debugBoundingBoxes: false,\r\n  zoom: 2,\r\n  playerStart: { x: 24, y: 20 },\r\n  playerSpeed: 7.5,\r\n  bgMusic: true\r\n}\r\n\r\n\r\nconst game = new Game(800, 600, config);\r\n\r\nconst levelOne = new LevelOne();\r\nconst world = new World(levelOne, config);\r\n\r\n//const alexSprites = new ex.SpriteSheet(Resources.Alex, 4, 1, 32, 64);\r\n//\r\n//const startX = config.playerStart.x, startY = config.playerStart.y;\r\n//const player = new Player(startX * 32, startY * 32, config, alexSprites);\r\n\r\n//player.addDrawing(alexSprite);\r\n\r\nconst output = new ex.Label('(welcome to isle)', 500, 500, 'Arial');\r\n//output.\r\nconst brand = new ex.Label('(welcome to isle)', 500, 500, 'Arial');\r\nlevelOne.add(output);\r\nlevelOne.add(brand);\r\n\r\ngame.input.keyboard.on('press', (evt: ex.Input.KeyEvent) => {\r\n  let player = world.primaryCharacter();\r\n\r\n  // check for current scene?\r\n  let { key } = evt;\r\n  if (key == ex.Input.Keys.E) {\r\n    let interaction = player.interact();\r\n    if (interaction) {\r\n      output.x = levelOne.camera.x;\r\n      output.y = levelOne.camera.y;\r\n      output.text = interaction;\r\n      output.color = ex.Color.White;\r\n      output.fontSize = 24;\r\n    }\r\n  } else {\r\n    // assume we're trying to move\r\n    let direction = keyToDirection(key);\r\n    if (direction) { player.move(direction); }\r\n  }\r\n})\r\n\r\ngame.input.keyboard.on('hold', (evt: ex.Input.KeyEvent) => {\r\n  let { key } = evt;\r\n  let direction : Direction = keyToDirection(key);\r\n  if (direction) {\r\n    let player = world.primaryCharacter();\r\n    player.move(direction);\r\n  }\r\n})\r\n\r\ngame.input.keyboard.on('release', (evt: ex.Input.KeyEvent) => {\r\n  // console.log(\"RELEASE\", { evt });\r\n  let { key } = evt;\r\n  let direction : Direction = keyToDirection(key);\r\n  if (direction) {\r\n    let player = world.primaryCharacter();\r\n    player.halt(); //direction);\r\n    player.interacting = false;\r\n  }\r\n});\r\n\r\n//levelOne.add(player);\r\n\r\n\r\n// game.input.pointers.primary.on('move', (e: ex.Input.PointerEvent) => {\r\n//   console.log(\"POINTER MOVE\", e.pos);\r\n// });\r\n\r\n\r\ngame.add('wander', levelOne);\r\n\r\n\r\ngame.start().then(() => {\r\n  world.processTiledMap(Resources.Map);\r\n\r\n  let tileMap = world.tileMap;\r\n  levelOne.addTileMap(tileMap);\r\n  //player.wireWorld(world); //wireMap(tileMap);\r\n\r\n  //world.blockingActors.forEach((actor: Thing) => {\r\n  //  //let y = actor['_cell'].y; // - 7;\r\n  //  //console.log(\"would set z to\", {y, currentZeD: actor.getZIndex()});\r\n  //  levelOne.add(actor);\r\n  //  actor.setZIndex(actor.computeZ());\r\n  //});\r\n  output.setZIndex(1000);\r\n\r\n  if (config.debugCells) {\r\n    let lastViewedCell = null;\r\n    game.input.pointers.primary.on('move', (e: ex.Input.PointerEvent) => {\r\n      let { pos } = e;\r\n      let cell = tileMap.getCellByPoint(pos.x, pos.y);\r\n      if (cell && lastViewedCell != cell) {\r\n        console.debug(\"CELL\", { pos, spriteId: cell.sprites[0].spriteId }, cell);\r\n        lastViewedCell = cell;\r\n      }\r\n    });\r\n  }\r\n\r\n  game.goToScene('wander');\r\n\r\n  //theme.play();\r\n  //theme.load().then(() => {\r\n\r\n  //  theme.play()\r\n  //}); //() => theme.play();\r\n  //if (theme.isLoaded) {\r\n  //  console.log(\"playing song...\");\r\n  //  //debugger;\r\n  //  //theme.play(1.0);\r\n  //} else {\r\n  //  console.error(\"theme song not loaded?\")\r\n  //  //throw new Error(\"theme song wasn't loaded?\")\r\n  //}\r\n\r\n  // really should be an audio player\r\n  if (config.bgMusic) {\r\n    let theme = Resources.FineMist; //Science;\r\n    // wait a tiny bit for music to load??? (seems to work welll)\r\n    setTimeout(() => {\r\n      console.log('about to play music', { theme, isLoaded: theme.isLoaded() });\r\n      theme.play(0.2) //1.0)\r\n    }, 3000);\r\n  }\r\n\r\n\r\n});\r\n\r\n\r\n"],"sourceRoot":""}